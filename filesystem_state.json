{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        scan: {\n          \"0%\": { left: \"-100%\" },\n          \"100%\": { left: \"100%\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        scan: \"scan 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2898},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"mobile/App.tsx":{"content":"import React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { I18nextProvider } from 'react-i18next';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { PaperProvider } from 'react-native-paper';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { RootNavigator } from '@/navigation';\nimport { queryClient } from '@/utils/queryClient';\nimport i18n from '@/utils/i18n';\nimport { colors } from '@/constants/theme';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <SafeAreaProvider>\n        <I18nextProvider i18n={i18n}>\n          <QueryClientProvider client={queryClient}>\n            <PaperProvider theme={{ colors }}>\n              <StatusBar style=\"auto\" />\n              <RootNavigator />\n            </PaperProvider>\n          </QueryClientProvider>\n        </I18nextProvider>\n      </SafeAreaProvider>\n    </GestureHandlerRootView>\n  );\n}\n","size_bytes":1027},"mobile/babel.config.js":{"content":"module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        'module-resolver',\n        {\n          root: ['./src'],\n          alias: {\n            '@': './src',\n            '@shared': '../shared',\n            '@assets': './assets',\n          },\n        },\n      ],\n      'react-native-reanimated/plugin', // Must be last\n    ],\n  };\n};","size_bytes":406},"mobile/index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"mobile/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nconst config = getDefaultConfig(__dirname);\n\n// Ensure shared types can be imported from parent directory\nconfig.watchFolders = [\n  path.resolve(__dirname, '../shared'),\n];\n\n// Configure Metro to handle TypeScript files from shared directory\nconfig.resolver.platforms = ['native', 'ios', 'android', 'web'];\nconfig.resolver.alias = {\n  '@shared': path.resolve(__dirname, '../shared'),\n};\n\n// Configure transformer to handle shared TypeScript files\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: false,\n    inlineRequires: true,\n  },\n});\n\nmodule.exports = config;","size_bytes":706},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface DocumentAnalysis {\n  category: string;\n  confidence: number;\n  extractedData: Record<string, any>;\n  summary: string;\n  keyInformation: string[];\n  documentType: string;\n}\n\nexport async function analyzeDocument(\n  text: string, \n  imageBase64?: string\n): Promise<DocumentAnalysis> {\n  try {\n    const messages: any[] = [\n      {\n        role: \"system\",\n        content: `You are an expert document analyzer. Analyze the provided document and extract key information.\n        \n        Categorize the document into one of these categories:\n        - factures (invoices/bills)\n        - contrats (contracts)\n        - medical (medical documents)\n        - legal (legal documents)\n        - correspondence (letters/emails)\n        - financial (bank statements, financial reports)\n        - administrative (official documents)\n        - other (other documents)\n        \n        Respond with JSON in this exact format:\n        {\n          \"category\": \"category_name\",\n          \"confidence\": 0.95,\n          \"extractedData\": {\n            \"key_field_1\": \"value1\",\n            \"key_field_2\": \"value2\"\n          },\n          \"summary\": \"Brief summary of the document\",\n          \"keyInformation\": [\"key point 1\", \"key point 2\"],\n          \"documentType\": \"Specific document type\"\n        }`\n      }\n    ];\n\n    if (imageBase64) {\n      messages.push({\n        role: \"user\",\n        content: [\n          {\n            type: \"text\",\n            text: text || \"Analyze this document image and extract key information.\"\n          },\n          {\n            type: \"image_url\",\n            image_url: {\n              url: `data:image/jpeg;base64,${imageBase64}`\n            }\n          }\n        ],\n      });\n    } else {\n      messages.push({\n        role: \"user\",\n        content: text\n      });\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages,\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    return {\n      category: result.category || \"other\",\n      confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n      extractedData: result.extractedData || {},\n      summary: result.summary || \"\",\n      keyInformation: result.keyInformation || [],\n      documentType: result.documentType || \"Unknown\"\n    };\n  } catch (error) {\n    console.error(\"Error analyzing document:\", error);\n    throw new Error(\"Failed to analyze document: \" + error.message);\n  }\n}\n\nexport async function extractTextFromImage(base64Image: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Extract all text from this image. Return only the extracted text, no additional commentary.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      max_tokens: 1000,\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    console.error(\"Error extracting text from image:\", error);\n    throw new Error(\"Failed to extract text from image: \" + error.message);\n  }\n}\n","size_bytes":3698},"server/replitAuth.ts":{"content":"// Code snippet from javascript_log_in_with_replit integration\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Create free trial for new users (3 weeks)\n  const trialEndsAt = new Date();\n  trialEndsAt.setDate(trialEndsAt.getDate() + 21); // 3 weeks\n\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    subscriptionStatus: \"trial\",\n    trialEndsAt: trialEndsAt,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4490},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { analyzeDocument, extractTextFromImage } from \"./openai\";\nimport { z } from \"zod\";\nimport { insertDocumentSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport Stripe from \"stripe\";\nimport { createHmac } from \"crypto\";\n\n// Initialize Stripe (we'll ask for secrets later)\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2025-08-27.basil\",\n  });\n}\n\n// Webhook signature verification\nfunction verifyWebhookSignature(rawBody: string, signature: string, secret: string): boolean {\n  const expectedSignature = createHmac('sha256', secret)\n    .update(rawBody)\n    .digest('hex');\n  return `sha256=${expectedSignature}` === signature;\n}\n\n// Price validation schema\nconst priceConfig = {\n  weekly: { amount: 299, label: \"Weekly\" },\n  monthly: { amount: 998, label: \"Monthly\" },\n  yearly: { amount: 9997, label: \"Yearly\" },\n} as const;\n\n// Input validation schemas\nconst createSubscriptionSchema = z.object({\n  priceType: z.enum([\"weekly\", \"monthly\", \"yearly\"]),\n});\n\nconst confirmSubscriptionSchema = z.object({\n  paymentIntentId: z.string().min(1),\n  subscriptionType: z.enum([\"weekly\", \"monthly\", \"yearly\"]),\n});\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// Webhook helper functions\nasync function handlePaymentSuccess(paymentIntent: any) {\n  try {\n    const { userId, subscriptionType } = paymentIntent.metadata;\n    \n    if (!userId || !subscriptionType) {\n      console.error('Missing metadata in payment intent:', paymentIntent.id);\n      return;\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      console.error('User not found for payment:', userId);\n      return;\n    }\n\n    // Calculate subscription period\n    const now = new Date();\n    let periodEnd = new Date();\n    \n    switch (subscriptionType) {\n      case 'weekly':\n        periodEnd.setDate(now.getDate() + 7);\n        break;\n      case 'monthly':\n        periodEnd.setMonth(now.getMonth() + 1);\n        break;\n      case 'yearly':\n        periodEnd.setFullYear(now.getFullYear() + 1);\n        break;\n    }\n\n    // Create subscription record\n    const priceInfo = priceConfig[subscriptionType as keyof typeof priceConfig];\n    await storage.createSubscription({\n      userId,\n      stripeSubscriptionId: paymentIntent.id,\n      stripeCustomerId: paymentIntent.customer,\n      status: \"active\",\n      type: subscriptionType,\n      amount: priceInfo.amount,\n      currency: \"eur\",\n      currentPeriodStart: now,\n      currentPeriodEnd: periodEnd,\n      cancelAtPeriodEnd: 0,\n    });\n\n    // Update user status\n    await storage.upsertUser({\n      ...user,\n      subscriptionStatus: \"active\",\n      subscriptionType,\n    });\n\n    console.log(`Subscription activated for user ${userId}`);\n  } catch (error) {\n    console.error('Error handling payment success:', error);\n  }\n}\n\nasync function handlePaymentFailure(paymentIntent: any) {\n  try {\n    const { userId } = paymentIntent.metadata;\n    \n    if (userId) {\n      console.log(`Payment failed for user ${userId}:`, paymentIntent.last_payment_error?.message);\n      // Could send notification email here\n    }\n  } catch (error) {\n    console.error('Error handling payment failure:', error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const objectStorageService = new ObjectStorageService();\n\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Stripe webhook endpoint (before authentication middleware)\n  if (stripe && process.env.STRIPE_WEBHOOK_SECRET) {\n    app.post('/api/webhooks/stripe', express.raw({ type: 'application/json' }), async (req, res) => {\n      try {\n        const signature = req.headers['stripe-signature'] as string;\n        const rawBody = req.body.toString();\n        \n        if (!verifyWebhookSignature(rawBody, signature, process.env.STRIPE_WEBHOOK_SECRET!)) {\n          console.error('Invalid webhook signature');\n          return res.status(400).send('Invalid signature');\n        }\n\n        const event = JSON.parse(rawBody);\n        console.log('Stripe webhook received:', event.type);\n\n        switch (event.type) {\n          case 'payment_intent.succeeded':\n            await handlePaymentSuccess(event.data.object);\n            break;\n          case 'payment_intent.payment_failed':\n            await handlePaymentFailure(event.data.object);\n            break;\n          default:\n            console.log(`Unhandled webhook event type: ${event.type}`);\n        }\n\n        res.json({ received: true });\n      } catch (error: any) {\n        console.error('Webhook error:', error);\n        res.status(400).send(`Webhook Error: ${error.message}`);\n      }\n    });\n  }\n\n  // Stripe subscription routes\n  if (stripe) {\n    // Get or create subscription for the user\n    app.post('/api/subscription/create', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        \n        // Validate input\n        const parseResult = createSubscriptionSchema.safeParse(req.body);\n        if (!parseResult.success) {\n          return res.status(400).json({ \n            message: \"Invalid input\",\n            errors: parseResult.error.errors\n          });\n        }\n        \n        const { priceType } = parseResult.data;\n        \n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        const priceInfo = priceConfig[priceType];\n        if (!priceInfo) {\n          return res.status(400).json({ message: \"Invalid price type\" });\n        }\n\n        let customerId = user.stripeCustomerId;\n        \n        // Create Stripe customer if doesn't exist\n        if (!customerId) {\n          const customer = await stripe!.customers.create({\n            email: user.email || undefined,\n            name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : undefined,\n          });\n          customerId = customer.id;\n          await storage.updateUserStripeInfo(userId, customerId);\n        }\n\n        // Create payment intent with enhanced security\n        const paymentIntent = await stripe!.paymentIntents.create({\n          amount: priceInfo.amount,\n          currency: \"eur\",\n          customer: customerId,\n          automatic_payment_methods: {\n            enabled: true,\n          },\n          metadata: {\n            userId,\n            subscriptionType: priceType,\n            createdAt: new Date().toISOString(),\n          },\n          description: `AdminIA ${priceInfo.label} Subscription`,\n        });\n\n        res.json({ clientSecret: paymentIntent.client_secret });\n      } catch (error: any) {\n        console.error(\"Error creating subscription:\", error);\n        res.status(500).json({ message: \"Error creating subscription: \" + error.message });\n      }\n    });\n\n    // Confirm subscription payment\n    app.post('/api/subscription/confirm', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        \n        // Validate input\n        const parseResult = confirmSubscriptionSchema.safeParse(req.body);\n        if (!parseResult.success) {\n          return res.status(400).json({ \n            message: \"Invalid input\",\n            errors: parseResult.error.errors\n          });\n        }\n        \n        const { paymentIntentId, subscriptionType } = parseResult.data;\n        \n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Update user subscription status\n        const now = new Date();\n        let periodEnd = new Date();\n        \n        switch (subscriptionType) {\n          case 'weekly':\n            periodEnd.setDate(now.getDate() + 7);\n            break;\n          case 'monthly':\n            periodEnd.setMonth(now.getMonth() + 1);\n            break;\n          case 'yearly':\n            periodEnd.setFullYear(now.getFullYear() + 1);\n            break;\n        }\n\n        // Verify payment intent exists and is successful\n        const paymentIntent = await stripe!.paymentIntents.retrieve(paymentIntentId);\n        if (paymentIntent.status !== 'succeeded') {\n          return res.status(400).json({ message: \"Payment not completed\" });\n        }\n\n        // Create subscription record\n        const priceInfo = priceConfig[subscriptionType];\n        const subscription = await storage.createSubscription({\n          userId,\n          stripeSubscriptionId: paymentIntentId,\n          stripeCustomerId: user.stripeCustomerId!,\n          status: \"active\",\n          type: subscriptionType,\n          amount: priceInfo.amount,\n          currency: \"eur\",\n          currentPeriodStart: now,\n          currentPeriodEnd: periodEnd,\n          cancelAtPeriodEnd: 0,\n        });\n\n        // Update user\n        await storage.upsertUser({\n          ...user,\n          subscriptionStatus: \"active\",\n          subscriptionType,\n        });\n\n        res.json({ subscription });\n      } catch (error: any) {\n        console.error(\"Error confirming subscription:\", error);\n        res.status(500).json({ message: \"Error confirming subscription: \" + error.message });\n      }\n    });\n\n    // Get user subscription status\n    app.get('/api/subscription/status', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        const user = await storage.getUser(userId);\n        const subscription = await storage.getUserActiveSubscription(userId);\n        \n        res.json({\n          user: {\n            subscriptionStatus: user?.subscriptionStatus || \"trial\",\n            subscriptionType: user?.subscriptionType,\n            trialEndsAt: user?.trialEndsAt,\n          },\n          subscription,\n        });\n      } catch (error: any) {\n        console.error(\"Error getting subscription status:\", error);\n        res.status(500).json({ message: \"Error getting subscription status: \" + error.message });\n      }\n    });\n\n    // Cancel subscription\n    app.post('/api/subscription/cancel', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        const subscription = await storage.getUserActiveSubscription(userId);\n        \n        if (!subscription) {\n          return res.status(404).json({ message: \"No active subscription found\" });\n        }\n\n        await storage.cancelSubscription(subscription.id);\n        \n        // Update user status\n        const user = await storage.getUser(userId);\n        if (user) {\n          await storage.upsertUser({\n            ...user,\n            subscriptionStatus: \"canceled\",\n          });\n        }\n\n        res.json({ message: \"Subscription canceled successfully\" });\n      } catch (error: any) {\n        console.error(\"Error canceling subscription:\", error);\n        res.status(500).json({ message: \"Error canceling subscription: \" + error.message });\n      }\n    });\n  }\n\n  // Serve private objects\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for document (protected)\n  app.post(\"/api/documents/upload-url\", isAuthenticated, async (req, res) => {\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Create document after upload (protected)\n  app.post(\"/api/documents\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertDocumentSchema.parse(req.body);\n      \n      // Normalize object path\n      const objectPath = objectStorageService.normalizeObjectEntityPath(validatedData.objectPath);\n      \n      const document = await storage.createDocument({\n        ...validatedData,\n        objectPath,\n      });\n\n      // Queue for AI processing\n      await storage.createAiProcessingQueue({\n        documentId: document.id,\n        status: \"pending\"\n      });\n\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error creating document:\", error);\n      res.status(400).json({ error: \"Invalid document data\" });\n    }\n  });\n\n  // Get all documents (protected)\n  app.get(\"/api/documents\", isAuthenticated, async (req, res) => {\n    try {\n      const documents = await storage.getDocuments();\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error getting documents:\", error);\n      res.status(500).json({ error: \"Failed to get documents\" });\n    }\n  });\n\n  // Get document by ID (protected)\n  app.get(\"/api/documents/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error getting document:\", error);\n      res.status(500).json({ error: \"Failed to get document\" });\n    }\n  });\n\n  // Delete document (protected)\n  app.delete(\"/api/documents/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteDocument(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Process document with AI (protected)\n  app.post(\"/api/documents/:id/analyze\", isAuthenticated, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n\n      // Update status to processing\n      await storage.updateDocument(document.id, { status: \"processing\" });\n\n      let analysis;\n      if (document.mimeType.startsWith('image/')) {\n        // For images, extract text first then analyze\n        const objectFile = await objectStorageService.getObjectEntityFile(document.objectPath);\n        \n        // Get image data (simplified - in production you'd stream this properly)\n        const [metadata] = await objectFile.getMetadata();\n        const imageStream = objectFile.createReadStream();\n        const chunks: Buffer[] = [];\n        \n        for await (const chunk of imageStream) {\n          chunks.push(chunk);\n        }\n        \n        const imageBuffer = Buffer.concat(chunks);\n        const base64Image = imageBuffer.toString('base64');\n        \n        const extractedText = await extractTextFromImage(base64Image);\n        analysis = await analyzeDocument(extractedText, base64Image);\n      } else {\n        // For text documents, analyze directly (you'd need to implement text extraction for PDFs, etc.)\n        analysis = await analyzeDocument(\"Document content would be extracted here\");\n      }\n\n      // Update document with analysis results\n      await storage.updateDocument(document.id, {\n        status: \"completed\",\n        category: analysis.category,\n        aiAnalysis: analysis,\n        extractedData: analysis.extractedData,\n      });\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing document:\", error);\n      \n      // Update status to error\n      await storage.updateDocument(req.params.id, { status: \"error\" });\n      \n      res.status(500).json({ error: \"Failed to analyze document\" });\n    }\n  });\n\n  // Get categories (public)\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error getting categories:\", error);\n      res.status(500).json({ error: \"Failed to get categories\" });\n    }\n  });\n\n  // Get document statistics (protected)\n  app.get(\"/api/statistics\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDocumentStatistics();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting statistics:\", error);\n      res.status(500).json({ error: \"Failed to get statistics\" });\n    }\n  });\n\n  // Get AI processing queue status (protected)\n  app.get(\"/api/ai-queue\", isAuthenticated, async (req, res) => {\n    try {\n      const queue = await storage.getAiProcessingQueue();\n      res.json(queue);\n    } catch (error) {\n      console.error(\"Error getting AI queue:\", error);\n      res.status(500).json({ error: \"Failed to get AI queue\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17660},"server/storage.ts":{"content":"import { type Document, type InsertDocument, type Category, type InsertCategory, type AiProcessingQueue, type InsertAiProcessingQueue, type User, type UpsertUser, type Subscription, type InsertSubscription } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users - (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(id: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined>;\n\n  // Subscriptions\n  getSubscription(id: string): Promise<Subscription | undefined>;\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined>;\n  getUserActiveSubscription(userId: string): Promise<Subscription | undefined>;\n  cancelSubscription(subscriptionId: string): Promise<void>;\n\n  // Documents\n  getDocument(id: string): Promise<Document | undefined>;\n  getDocuments(): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined>;\n  deleteDocument(id: string): Promise<void>;\n  getDocumentsByCategory(category: string): Promise<Document[]>;\n  getRecentDocuments(limit?: number): Promise<Document[]>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // AI Processing Queue\n  getAiProcessingQueue(): Promise<AiProcessingQueue[]>;\n  createAiProcessingQueue(item: InsertAiProcessingQueue): Promise<AiProcessingQueue>;\n  updateAiProcessingQueue(id: string, updates: Partial<AiProcessingQueue>): Promise<AiProcessingQueue | undefined>;\n\n  // Statistics\n  getDocumentStatistics(): Promise<{\n    totalDocuments: number;\n    processedToday: number;\n    pendingProcessing: number;\n    categoryCounts: Record<string, number>;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private subscriptions: Map<string, Subscription>;\n  private documents: Map<string, Document>;\n  private categories: Map<string, Category>;\n  private aiQueue: Map<string, AiProcessingQueue>;\n\n  constructor() {\n    this.users = new Map();\n    this.subscriptions = new Map();\n    this.documents = new Map();\n    this.categories = new Map();\n    this.aiQueue = new Map();\n    \n    // Initialize default categories\n    this.initializeDefaultCategories();\n  }\n\n  // User operations - (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    const now = new Date();\n    \n    const user: User = {\n      ...existingUser,\n      ...userData,\n      id: userData.id!,\n      email: userData.email ?? null,\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      stripeCustomerId: userData.stripeCustomerId ?? null,\n      stripeSubscriptionId: userData.stripeSubscriptionId ?? null,\n      subscriptionStatus: userData.subscriptionStatus ?? existingUser?.subscriptionStatus ?? \"trial\",\n      subscriptionType: userData.subscriptionType ?? null,\n      trialEndsAt: userData.trialEndsAt ?? null,\n      createdAt: existingUser?.createdAt ?? now,\n      updatedAt: now,\n    };\n    \n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUserStripeInfo(id: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser: User = {\n      ...user,\n      stripeCustomerId,\n      stripeSubscriptionId: stripeSubscriptionId ?? null,\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Subscription operations\n  async getSubscription(id: string): Promise<Subscription | undefined> {\n    return this.subscriptions.get(id);\n  }\n\n  async createSubscription(subscriptionData: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const now = new Date();\n    const subscription: Subscription = {\n      ...subscriptionData,\n      id,\n      currency: subscriptionData.currency || \"eur\",\n      currentPeriodStart: subscriptionData.currentPeriodStart ?? null,\n      currentPeriodEnd: subscriptionData.currentPeriodEnd ?? null,\n      cancelAtPeriodEnd: subscriptionData.cancelAtPeriodEnd ?? 0,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async updateSubscription(id: string, updates: Partial<Subscription>): Promise<Subscription | undefined> {\n    const subscription = this.subscriptions.get(id);\n    if (!subscription) return undefined;\n\n    const updatedSubscription: Subscription = {\n      ...subscription,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.subscriptions.set(id, updatedSubscription);\n    return updatedSubscription;\n  }\n\n  async getUserActiveSubscription(userId: string): Promise<Subscription | undefined> {\n    return Array.from(this.subscriptions.values())\n      .find(sub => sub.userId === userId && sub.status === \"active\");\n  }\n\n  async cancelSubscription(subscriptionId: string): Promise<void> {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (subscription) {\n      const updatedSubscription: Subscription = {\n        ...subscription,\n        status: \"canceled\",\n        cancelAtPeriodEnd: 1,\n        updatedAt: new Date(),\n      };\n      this.subscriptions.set(subscriptionId, updatedSubscription);\n    }\n  }\n\n  private initializeDefaultCategories() {\n    const defaultCategories: InsertCategory[] = [\n      { name: \"factures\", icon: \"fas fa-file-invoice\", color: \"blue\" },\n      { name: \"contrats\", icon: \"fas fa-file-contract\", color: \"green\" },\n      { name: \"medical\", icon: \"fas fa-file-medical\", color: \"purple\" },\n      { name: \"legal\", icon: \"fas fa-gavel\", color: \"red\" },\n      { name: \"correspondence\", icon: \"fas fa-envelope\", color: \"yellow\" },\n      { name: \"financial\", icon: \"fas fa-chart-line\", color: \"indigo\" },\n      { name: \"administrative\", icon: \"fas fa-building\", color: \"gray\" },\n      { name: \"other\", icon: \"fas fa-file-alt\", color: \"orange\" },\n    ];\n\n    defaultCategories.forEach(category => {\n      const id = randomUUID();\n      const categoryWithId: Category = {\n        ...category,\n        id,\n        createdAt: new Date(),\n      };\n      this.categories.set(id, categoryWithId);\n    });\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    return this.documents.get(id);\n  }\n\n  async getDocuments(): Promise<Document[]> {\n    return Array.from(this.documents.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const id = randomUUID();\n    const now = new Date();\n    const document: Document = {\n      ...insertDocument,\n      id,\n      status: insertDocument.status || \"pending\",\n      category: insertDocument.category ?? null,\n      aiAnalysis: insertDocument.aiAnalysis ?? null,\n      extractedData: insertDocument.extractedData ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  async updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined> {\n    const document = this.documents.get(id);\n    if (!document) return undefined;\n\n    const updatedDocument: Document = {\n      ...document,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.documents.set(id, updatedDocument);\n    return updatedDocument;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    this.documents.delete(id);\n    // Also remove from AI queue\n    const queueEntries = Array.from(this.aiQueue.entries());\n    for (const [queueId, item] of queueEntries) {\n      if (item.documentId === id) {\n        this.aiQueue.delete(queueId);\n      }\n    }\n  }\n\n  async getDocumentsByCategory(category: string): Promise<Document[]> {\n    return Array.from(this.documents.values())\n      .filter(doc => doc.category === category)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getRecentDocuments(limit: number = 10): Promise<Document[]> {\n    return Array.from(this.documents.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = {\n      ...insertCategory,\n      id,\n      createdAt: new Date(),\n    };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async getAiProcessingQueue(): Promise<AiProcessingQueue[]> {\n    return Array.from(this.aiQueue.values()).sort(\n      (a, b) => a.createdAt.getTime() - b.createdAt.getTime()\n    );\n  }\n\n  async createAiProcessingQueue(insertItem: InsertAiProcessingQueue): Promise<AiProcessingQueue> {\n    const id = randomUUID();\n    const now = new Date();\n    const item: AiProcessingQueue = {\n      ...insertItem,\n      id,\n      status: insertItem.status || \"pending\",\n      result: insertItem.result ?? null,\n      error: insertItem.error ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.aiQueue.set(id, item);\n    return item;\n  }\n\n  async updateAiProcessingQueue(id: string, updates: Partial<AiProcessingQueue>): Promise<AiProcessingQueue | undefined> {\n    const item = this.aiQueue.get(id);\n    if (!item) return undefined;\n\n    const updatedItem: AiProcessingQueue = {\n      ...item,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.aiQueue.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async getDocumentStatistics(): Promise<{\n    totalDocuments: number;\n    processedToday: number;\n    pendingProcessing: number;\n    categoryCounts: Record<string, number>;\n  }> {\n    const documents = Array.from(this.documents.values());\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const processedToday = documents.filter(\n      doc => doc.updatedAt >= today && doc.status === \"completed\"\n    ).length;\n\n    const categoryCounts: Record<string, number> = {};\n    documents.forEach(doc => {\n      if (doc.category) {\n        categoryCounts[doc.category] = (categoryCounts[doc.category] || 0) + 1;\n      }\n    });\n\n    const pendingProcessing = Array.from(this.aiQueue.values()).filter(\n      item => item.status === \"pending\" || item.status === \"processing\"\n    ).length;\n\n    return {\n      totalDocuments: documents.length,\n      processedToday,\n      pendingProcessing,\n      categoryCounts,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11115},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionStatus: text(\"subscription_status\").default(\"trial\"), // trial, active, inactive, canceled\n  subscriptionType: text(\"subscription_type\"), // weekly, monthly, yearly\n  trialEndsAt: timestamp(\"trial_ends_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscription history table\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\").notNull(),\n  stripeCustomerId: varchar(\"stripe_customer_id\").notNull(),\n  status: text(\"status\").notNull(), // active, canceled, past_due, unpaid\n  type: text(\"type\").notNull(), // weekly, monthly, yearly\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").notNull().default(\"eur\"),\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  cancelAtPeriodEnd: integer(\"cancel_at_period_end\").default(0), // 0 = false, 1 = true\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  objectPath: text(\"object_path\").notNull(),\n  category: text(\"category\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, error\n  aiAnalysis: jsonb(\"ai_analysis\"),\n  extractedData: jsonb(\"extracted_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const aiProcessingQueue = pgTable(\"ai_processing_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: text(\"document_id\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, error\n  result: jsonb(\"result\"),\n  error: text(\"error\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiProcessingQueueSchema = createInsertSchema(aiProcessingQueue).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type AiProcessingQueue = typeof aiProcessingQueue.$inferSelect;\nexport type InsertAiProcessingQueue = z.infer<typeof insertAiProcessingQueueSchema>;\n","size_bytes":4867},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"./lib/i18n\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DocumentsPage from \"@/pages/documents\";\nimport ScanPage from \"@/pages/scan\";\nimport PricingPage from \"@/pages/pricing\";\nimport SubscriptionPage from \"@/pages/subscription\";\nimport SubscriptionSuccessPage from \"@/pages/subscription-success\";\nimport TermsOfServicePage from \"@/pages/terms-of-service\";\nimport SettingsPage from \"@/pages/settings\";\nimport LandingPage from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        // Routes for non-authenticated users\n        <>\n          <Route path=\"/\" component={LandingPage} />\n          <Route path=\"/pricing\" component={PricingPage} />\n          <Route path=\"/terms\" component={TermsOfServicePage} />\n          <Route component={LandingPage} />\n        </>\n      ) : (\n        // Routes for authenticated users\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/documents\" component={DocumentsPage} />\n          <Route path=\"/scan\" component={ScanPage} />\n          <Route path=\"/upload\" component={DocumentsPage} />\n          <Route path=\"/analysis\" component={DocumentsPage} />\n          <Route path=\"/settings\" component={SettingsPage} />\n          <Route path=\"/pricing\" component={PricingPage} />\n          <Route path=\"/subscription\" component={SubscriptionPage} />\n          <Route path=\"/subscription/success\" component={SubscriptionSuccessPage} />\n          <Route path=\"/terms\" component={TermsOfServicePage} />\n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <I18nextProvider i18n={i18n}>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </I18nextProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2653},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(215, 25%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(215, 25%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 25%, 15%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(215, 28%, 97%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(142, 71%, 45%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(215, 20%, 90%);\n  --input: hsl(215, 20%, 95%);\n  --ring: hsl(221, 83%, 53%);\n  --radius: 8px;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 2px 4px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 4px 6px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 8px 10px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(215, 28%, 9%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(215, 28%, 12%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(215, 28%, 12%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 19%, 35%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 71%, 45%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(215, 28%, 18%);\n  --input: hsl(215, 28%, 18%);\n  --ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.8);\n  }\n\n  .dark .glass-effect {\n    background: rgba(15, 23, 42, 0.8);\n  }\n\n  .hover-lift {\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  }\n\n  .scan-animation {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .scan-animation::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, hsl(var(--primary)), transparent);\n    animation: scan 2s infinite;\n  }\n\n  @keyframes scan {\n    0% { left: -100%; }\n    100% { left: 100%; }\n  }\n}\n","size_bytes":3329},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/DocumentCategories.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Category } from \"@shared/schema\";\n\ninterface CategoryWithCount extends Category {\n  documentCount: number;\n  weeklyIncrease: number;\n}\n\nconst categoryIconColors = {\n  factures: { icon: \"fas fa-file-invoice\", color: \"text-blue-600\", bg: \"bg-blue-500/10\" },\n  contrats: { icon: \"fas fa-file-contract\", color: \"text-green-600\", bg: \"bg-green-500/10\" },\n  medical: { icon: \"fas fa-file-medical\", color: \"text-purple-600\", bg: \"bg-purple-500/10\" },\n  legal: { icon: \"fas fa-gavel\", color: \"text-red-600\", bg: \"bg-red-500/10\" },\n  correspondence: { icon: \"fas fa-envelope\", color: \"text-yellow-600\", bg: \"bg-yellow-500/10\" },\n  financial: { icon: \"fas fa-chart-line\", color: \"text-indigo-600\", bg: \"bg-indigo-500/10\" },\n  administrative: { icon: \"fas fa-building\", color: \"text-gray-600\", bg: \"bg-gray-500/10\" },\n  other: { icon: \"fas fa-file-alt\", color: \"text-orange-600\", bg: \"bg-orange-500/10\" },\n};\n\nexport function DocumentCategories() {\n  const { t } = useTranslation();\n\n  const { data: categories, isLoading } = useQuery<CategoryWithCount[]>({\n    queryKey: ['/api/categories/with-counts'],\n    queryFn: async () => {\n      // This would be replaced with actual API call\n      const [categoriesRes, statsRes] = await Promise.all([\n        fetch('/api/categories'),\n        fetch('/api/statistics')\n      ]);\n      \n      const categories: Category[] = await categoriesRes.json();\n      const stats = await statsRes.json();\n      \n      return categories.map(category => ({\n        ...category,\n        documentCount: stats.categoryCounts[category.name] || 0,\n        weeklyIncrease: Math.floor(Math.random() * 10) // This would come from real stats\n      }));\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"lg:col-span-2\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Skeleton className=\"h-7 w-48\" />\n          <Skeleton className=\"h-6 w-20\" />\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-20\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"lg:col-span-2\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-semibold text-foreground\">\n          {t('categories.title')}\n        </h3>\n        <Button\n          data-testid=\"button-categories-view-all\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n        >\n          {t('categories.viewAll')} <i className=\"fas fa-arrow-right ml-1\" />\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8\">\n        {categories?.map((category) => {\n          const styling = categoryIconColors[category.name as keyof typeof categoryIconColors] || categoryIconColors.other;\n          \n          return (\n            <Card\n              key={category.id}\n              data-testid={`card-category-${category.name}`}\n              className=\"hover-lift cursor-pointer group transition-all duration-200\"\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-10 h-10 ${styling.bg} rounded-lg flex items-center justify-center`}>\n                      <i className={`${styling.icon} ${styling.color}`} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">\n                        {t(`categories.${category.name}`)}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <span data-testid={`text-category-count-${category.name}`}>\n                          {category.documentCount}\n                        </span> {t('stats.documents').toLowerCase()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm text-accent\">\n                      {category.weeklyIncrease > 0 && '+'}\n                      <span data-testid={`text-category-increase-${category.name}`}>\n                        {category.weeklyIncrease}\n                      </span>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {t('categories.thisWeek')}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4969},"client/src/components/Header.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"wouter\";\nimport { LanguageSelector } from \"./LanguageSelector\";\nimport { Button } from \"@/components/ui/button\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport function Header() {\n  const { t } = useTranslation();\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n\n  const navigationItems = [\n    { href: \"/\", label: t('nav.dashboard'), icon: \"fas fa-tachometer-alt\" },\n    { href: \"/documents\", label: t('nav.documents'), icon: \"fas fa-folder\" },\n    { href: \"/analysis\", label: t('nav.analysis'), icon: \"fas fa-chart-bar\" },\n    { href: \"/settings\", label: t('nav.settings'), icon: \"fas fa-cog\" },\n  ];\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50 glass-effect\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-4 cursor-pointer\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-file-alt text-primary-foreground text-xl\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-foreground\">{t('app.title')}</h1>\n                  <p className=\"text-xs text-muted-foreground hidden sm:block\">\n                    {t('app.subtitle')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          {!isMobile && (\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              {navigationItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <button\n                    data-testid={`link-nav-${item.href.replace('/', '') || 'dashboard'}`}\n                    className={`transition-colors duration-200 font-medium ${\n                      location === item.href\n                        ? 'text-foreground'\n                        : 'text-muted-foreground hover:text-primary'\n                    }`}\n                  >\n                    <i className={`${item.icon} mr-2`} />\n                    {item.label}\n                  </button>\n                </Link>\n              ))}\n            </nav>\n          )}\n\n          {/* Language Selector and User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            <LanguageSelector />\n\n            {/* Notifications */}\n            <Button\n              data-testid=\"button-notifications\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors duration-200\"\n            >\n              <i className=\"fas fa-bell text-lg\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\" />\n            </Button>\n\n            {/* User Avatar */}\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\">JD</span>\n            </div>\n\n            {/* Mobile Menu Button */}\n            {isMobile && (\n              <Button\n                data-testid=\"button-mobile-menu\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden p-2 text-muted-foreground hover:text-foreground\"\n              >\n                <i className=\"fas fa-bars text-lg\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3790},"client/src/components/LanguageSelector.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nconst languages = [\n  { code: 'fr', name: 'Français', flag: '🇫🇷' },\n  { code: 'en', name: 'English', flag: '🇬🇧' },\n  { code: 'es', name: 'Español', flag: '🇪🇸' },\n  { code: 'de', name: 'Deutsch', flag: '🇩🇪' },\n  { code: 'it', name: 'Italiano', flag: '🇮🇹' },\n  { code: 'zh', name: '中文', flag: '🇨🇳' },\n  { code: 'ko', name: '한국어', flag: '🇰🇷' },\n  { code: 'ar', name: 'العربية', flag: '🇸🇦' },\n];\n\nexport function LanguageSelector() {\n  const { i18n } = useTranslation();\n  const [open, setOpen] = useState(false);\n  \n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  const handleLanguageChange = (langCode: string) => {\n    i18n.changeLanguage(langCode);\n    setOpen(false);\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          data-testid=\"button-language-selector\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"flex items-center space-x-2 px-3 py-2 bg-muted hover:bg-secondary transition-colors duration-200\"\n        >\n          <i className=\"fas fa-globe text-muted-foreground\" />\n          <span className=\"text-sm font-medium hidden sm:inline\">\n            {currentLanguage.code.toUpperCase()}\n          </span>\n          <i className=\"fas fa-chevron-down text-xs text-muted-foreground\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-48 p-1\" align=\"end\">\n        <div className=\"space-y-1\">\n          {languages.map((language) => (\n            <button\n              key={language.code}\n              data-testid={`option-language-${language.code}`}\n              onClick={() => handleLanguageChange(language.code)}\n              className={`w-full flex items-center px-3 py-2 text-sm rounded-sm hover:bg-muted transition-colors ${\n                i18n.language === language.code \n                  ? 'text-foreground font-medium' \n                  : 'text-muted-foreground'\n              }`}\n            >\n              <span className=\"mr-3\">{language.flag}</span>\n              {language.name}\n            </button>\n          ))}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":2449},"client/src/components/MobileNavigation.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"wouter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport function MobileNavigation() {\n  const { t } = useTranslation();\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n\n  if (!isMobile) return null;\n\n  const navigationItems = [\n    { href: \"/\", label: t('mobile.home'), icon: \"fas fa-home\" },\n    { href: \"/documents\", label: t('mobile.documents'), icon: \"fas fa-folder\" },\n    { href: \"/analysis\", label: t('mobile.analysis'), icon: \"fas fa-chart-bar\" },\n    { href: \"/settings\", label: t('mobile.settings'), icon: \"fas fa-cog\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border md:hidden z-50\">\n      <div className=\"grid grid-cols-4 h-16\">\n        {navigationItems.map((item) => (\n          <Link key={item.href} href={item.href}>\n            <div\n              data-testid={`link-mobile-nav-${item.href.replace('/', '') || 'home'}`}\n              className={`flex flex-col items-center justify-center space-y-1 transition-colors duration-200 ${\n                location === item.href \n                  ? 'text-primary' \n                  : 'text-muted-foreground'\n              }`}\n            >\n              <i className={`${item.icon} text-lg`} />\n              <span className=\"text-xs\">{item.label}</span>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1462},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2782},"client/src/components/QuickActions.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface QuickAction {\n  href: string;\n  icon: string;\n  iconColor: string;\n  bgColor: string;\n  hoverBgColor: string;\n  title: string;\n  description: string;\n  extra?: React.ReactNode;\n  testId: string;\n}\n\nexport function QuickActions() {\n  const { t } = useTranslation();\n\n  const actions: QuickAction[] = [\n    {\n      href: \"/scan\",\n      icon: \"fas fa-camera\",\n      iconColor: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      hoverBgColor: \"group-hover:bg-primary/20\",\n      title: t('actions.scan.title'),\n      description: t('actions.scan.description'),\n      testId: \"card-action-scan\",\n      extra: (\n        <div className=\"mt-4 scan-animation\">\n          <div className=\"w-full h-1 bg-muted rounded-full\" />\n        </div>\n      ),\n    },\n    {\n      href: \"/upload\",\n      icon: \"fas fa-cloud-upload-alt\",\n      iconColor: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      hoverBgColor: \"group-hover:bg-accent/20\",\n      title: t('actions.upload.title'),\n      description: t('actions.upload.description'),\n      testId: \"card-action-upload\",\n      extra: (\n        <div className=\"mt-4\">\n          <div className=\"text-xs text-muted-foreground\">\n            {t('actions.upload.formats')}\n          </div>\n        </div>\n      ),\n    },\n    {\n      href: \"/analysis\",\n      icon: \"fas fa-brain\",\n      iconColor: \"text-purple-600\",\n      bgColor: \"bg-gradient-to-br from-purple-500/10 to-pink-500/10\",\n      hoverBgColor: \"group-hover:from-purple-500/20 group-hover:to-pink-500/20\",\n      title: t('actions.ai.title'),\n      description: t('actions.ai.description'),\n      testId: \"card-action-ai\",\n      extra: (\n        <div className=\"mt-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" />\n            <span className=\"text-xs text-accent\">{t('actions.ai.active')}</span>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n      {actions.map((action) => (\n        <Link key={action.href} href={action.href}>\n          <Card\n            data-testid={action.testId}\n            className=\"hover-lift cursor-pointer group transition-all duration-200\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${action.bgColor} ${action.hoverBgColor} rounded-lg flex items-center justify-center transition-all duration-200`}>\n                  <i className={`${action.icon} ${action.iconColor} text-xl`} />\n                </div>\n                <i className={`fas fa-arrow-right text-muted-foreground group-hover:${action.iconColor} transition-colors duration-200`} />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {action.title}\n              </h3>\n              <p className=\"text-muted-foreground text-sm\">\n                {action.description}\n              </p>\n              {action.extra}\n            </CardContent>\n          </Card>\n        </Link>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3283},"client/src/components/RecentDocuments.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Document } from \"@shared/schema\";\n\nconst getFileIcon = (mimeType: string) => {\n  if (mimeType.includes('pdf')) return { icon: 'fas fa-file-pdf', color: 'text-red-600', bg: 'bg-red-500/10' };\n  if (mimeType.includes('word')) return { icon: 'fas fa-file-word', color: 'text-blue-600', bg: 'bg-blue-500/10' };\n  if (mimeType.includes('image')) return { icon: 'fas fa-file-image', color: 'text-green-600', bg: 'bg-green-500/10' };\n  if (mimeType.includes('excel')) return { icon: 'fas fa-file-excel', color: 'text-green-600', bg: 'bg-green-500/10' };\n  return { icon: 'fas fa-file', color: 'text-gray-600', bg: 'bg-gray-500/10' };\n};\n\nconst formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n};\n\nconst formatTimeAgo = (date: Date): string => {\n  const now = new Date();\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n  \n  if (diffInMinutes < 60) return `Il y a ${diffInMinutes}min`;\n  if (diffInMinutes < 1440) return `Il y a ${Math.floor(diffInMinutes / 60)}h`;\n  return `Il y a ${Math.floor(diffInMinutes / 1440)}j`;\n};\n\nconst getStatusBadge = (status: string, t: (key: string) => string) => {\n  const statusConfig = {\n    completed: { variant: 'default' as const, className: 'bg-accent/10 text-accent' },\n    processing: { variant: 'secondary' as const, className: 'bg-yellow-500/10 text-yellow-600' },\n    pending: { variant: 'outline' as const, className: 'bg-blue-500/10 text-blue-600' },\n    error: { variant: 'destructive' as const, className: 'bg-destructive/10 text-destructive' },\n  };\n  \n  const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n  \n  return (\n    <Badge variant={config.variant} className={config.className}>\n      {t(`status.${status}`)}\n    </Badge>\n  );\n};\n\nexport function RecentDocuments() {\n  const { t } = useTranslation();\n\n  const { data: documents, isLoading } = useQuery<Document[]>({\n    queryKey: ['/api/documents/recent'],\n    queryFn: async () => {\n      const response = await fetch('/api/documents');\n      const allDocuments = await response.json();\n      return allDocuments.slice(0, 5); // Get recent 5 documents\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Skeleton className=\"h-6 w-48\" />\n            <Skeleton className=\"h-6 w-16\" />\n          </div>\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4 p-3\">\n                <Skeleton className=\"w-10 h-10 rounded-lg flex-shrink-0\" />\n                <div className=\"flex-1 min-w-0 space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-3 w-3/4\" />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Skeleton className=\"h-5 w-16\" />\n                  <Skeleton className=\"w-6 h-6\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h4 className=\"text-lg font-semibold text-foreground\">\n            {t('documents.recent')}\n          </h4>\n          <Button\n            data-testid=\"button-documents-view-all\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n          >\n            {t('documents.viewAll')}\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {documents?.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-inbox text-3xl mb-4 block\" />\n              <p>Aucun document trouvé</p>\n            </div>\n          ) : (\n            documents?.map((document) => {\n              const fileIcon = getFileIcon(document.mimeType);\n              \n              return (\n                <div\n                  key={document.id}\n                  data-testid={`card-document-${document.id}`}\n                  className=\"flex items-center space-x-4 p-3 rounded-lg hover:bg-muted/50 transition-colors duration-200 cursor-pointer\"\n                >\n                  <div className={`w-10 h-10 ${fileIcon.bg} rounded-lg flex items-center justify-center flex-shrink-0`}>\n                    <i className={`${fileIcon.icon} ${fileIcon.color}`} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h5 className=\"font-medium text-foreground truncate\">\n                      <span data-testid={`text-document-name-${document.id}`}>\n                        {document.name}\n                      </span>\n                    </h5>\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <span data-testid={`text-document-category-${document.id}`}>\n                        {document.category ? t(`categories.${document.category}`) : t('categories.other')}\n                      </span>\n                      <span>•</span>\n                      <span data-testid={`text-document-size-${document.id}`}>\n                        {formatFileSize(document.size)}\n                      </span>\n                      <span>•</span>\n                      <span data-testid={`text-document-date-${document.id}`}>\n                        {formatTimeAgo(new Date(document.createdAt))}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span data-testid={`badge-document-status-${document.id}`}>\n                      {getStatusBadge(document.status, t)}\n                    </span>\n                    <Button\n                      data-testid={`button-document-menu-${document.id}`}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-muted-foreground hover:text-foreground transition-colors duration-200 p-1\"\n                    >\n                      <i className=\"fas fa-ellipsis-v\" />\n                    </Button>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6970},"client/src/components/Sidebar.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface StorageInfo {\n  local: { used: number; total: number };\n  cloud: { used: number; total: number };\n}\n\ninterface AIStatus {\n  pending: number;\n  processed: number;\n  credits: number;\n  currentlyProcessing?: string;\n}\n\nexport function Sidebar() {\n  const { t } = useTranslation();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/statistics'],\n  });\n\n  const { data: aiQueue, isLoading: aiLoading } = useQuery({\n    queryKey: ['/api/ai-queue'],\n  });\n\n  // Mock storage data (would come from API in production)\n  const storageInfo: StorageInfo = {\n    local: { used: 2.4 * 1024 * 1024 * 1024, total: 5 * 1024 * 1024 * 1024 },\n    cloud: { used: 1.2 * 1024 * 1024 * 1024, total: 10 * 1024 * 1024 * 1024 }\n  };\n\n  const formatStorage = (bytes: number) => {\n    const gb = bytes / (1024 * 1024 * 1024);\n    return `${gb.toFixed(1)} GB`;\n  };\n\n  const getStoragePercentage = (used: number, total: number) => {\n    return Math.round((used / total) * 100);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Storage Statistics */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h4 className=\"text-lg font-semibold text-foreground mb-4\">\n            {t('storage.title')}\n          </h4>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-foreground\">{t('storage.local')}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  <span data-testid=\"text-storage-local\">\n                    {formatStorage(storageInfo.local.used)} / {formatStorage(storageInfo.local.total)}\n                  </span>\n                </span>\n              </div>\n              <Progress \n                value={getStoragePercentage(storageInfo.local.used, storageInfo.local.total)}\n                className=\"h-2\"\n              />\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-foreground\">{t('storage.cloud')}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  <span data-testid=\"text-storage-cloud\">\n                    {formatStorage(storageInfo.cloud.used)} / {formatStorage(storageInfo.cloud.total)}\n                  </span>\n                </span>\n              </div>\n              <Progress \n                value={getStoragePercentage(storageInfo.cloud.used, storageInfo.cloud.total)}\n                className=\"h-2\"\n              />\n            </div>\n          </div>\n          <Button \n            data-testid=\"button-sync-cloud\"\n            className=\"w-full mt-4 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors duration-200 text-sm font-medium\"\n          >\n            <i className=\"fas fa-cloud-upload-alt mr-2\" />\n            {t('storage.sync')}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* AI Processing Status */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h4 className=\"text-lg font-semibold text-foreground mb-4\">\n            {t('ai.title')}\n          </h4>\n          {aiLoading || statsLoading ? (\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <Skeleton className=\"h-4 w-32\" />\n                <Skeleton className=\"h-4 w-8\" />\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <Skeleton className=\"h-4 w-28\" />\n                <Skeleton className=\"h-4 w-6\" />\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <Skeleton className=\"h-4 w-36\" />\n                <Skeleton className=\"h-4 w-12\" />\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">{t('ai.pending')}</span>\n                <span className=\"text-sm font-medium text-yellow-600\">\n                  <span data-testid=\"text-ai-pending\">{stats?.pendingProcessing || 0}</span>\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">{t('ai.processed')}</span>\n                <span className=\"text-sm font-medium text-accent\">\n                  <span data-testid=\"text-ai-processed\">{stats?.processedToday || 0}</span>\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">{t('ai.credits')}</span>\n                <span className=\"text-sm font-medium text-primary\">\n                  <span data-testid=\"text-ai-credits\">847</span>\n                </span>\n              </div>\n            </div>\n          )}\n          \n          {aiQueue && aiQueue.some((item: any) => item.status === 'processing') && (\n            <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\" />\n                <span className=\"text-sm text-foreground\">{t('ai.processing')}</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Document en cours...\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Links */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h4 className=\"text-lg font-semibold text-foreground mb-4\">\n            {t('links.title')}\n          </h4>\n          <div className=\"space-y-3\">\n            <a \n              href=\"#\"\n              data-testid=\"link-help\"\n              className=\"flex items-center space-x-3 text-sm text-muted-foreground hover:text-foreground transition-colors duration-200\"\n            >\n              <i className=\"fas fa-question-circle\" />\n              <span>{t('links.help')}</span>\n            </a>\n            <a \n              href=\"#\"\n              data-testid=\"link-tutorial\"\n              className=\"flex items-center space-x-3 text-sm text-muted-foreground hover:text-foreground transition-colors duration-200\"\n            >\n              <i className=\"fas fa-graduation-cap\" />\n              <span>{t('links.tutorial')}</span>\n            </a>\n            <a \n              href=\"#\"\n              data-testid=\"link-support\"\n              className=\"flex items-center space-x-3 text-sm text-muted-foreground hover:text-foreground transition-colors duration-200\"\n            >\n              <i className=\"fas fa-headset\" />\n              <span>{t('links.support')}</span>\n            </a>\n            <a \n              href=\"#\"\n              data-testid=\"link-docs\"\n              className=\"flex items-center space-x-3 text-sm text-muted-foreground hover:text-foreground transition-colors duration-200\"\n            >\n              <i className=\"fas fa-book\" />\n              <span>{t('links.docs')}</span>\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7563},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"// Code snippet from javascript_log_in_with_replit integration\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":319},"client/src/lib/authUtils.ts":{"content":"// Code snippet from javascript_log_in_with_replit integration\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":178},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nconst resources = {\n  fr: {\n    translation: {\n      // Header\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Gestionnaire Intelligent',\n      'nav.dashboard': 'Tableau de bord',\n      'nav.documents': 'Documents',\n      'nav.analysis': 'Analyses',\n      'nav.settings': 'Paramètres',\n      \n      // Welcome section\n      'welcome.greeting': 'Bonjour, {{name}} 👋',\n      'welcome.subtitle': 'Gérez vos documents intelligemment avec l\\'IA',\n      'stats.documents': 'Documents',\n      'stats.processedToday': 'Traités aujourd\\'hui',\n      \n      // Quick actions\n      'actions.scan.title': 'Scanner un document',\n      'actions.scan.description': 'Utilisez votre caméra pour numériser instantanément vos documents',\n      'actions.upload.title': 'Importer des fichiers',\n      'actions.upload.description': 'Glissez-déposez ou sélectionnez vos fichiers à traiter',\n      'actions.upload.formats': 'PDF, JPG, PNG, DOCX supportés',\n      'actions.ai.title': 'Analyse IA',\n      'actions.ai.description': 'Extraction automatique d\\'informations avec OpenAI',\n      'actions.ai.active': 'IA active',\n      \n      // Categories\n      'categories.title': 'Catégories de documents',\n      'categories.viewAll': 'Voir tout',\n      'categories.thisWeek': 'Cette semaine',\n      'categories.factures': 'Factures',\n      'categories.contrats': 'Contrats',\n      'categories.medical': 'Médical',\n      'categories.legal': 'Légal',\n      'categories.correspondence': 'Correspondance',\n      'categories.financial': 'Financier',\n      'categories.administrative': 'Administratif',\n      'categories.other': 'Autres',\n      \n      // Recent documents\n      'documents.recent': 'Documents récents',\n      'documents.viewAll': 'Voir tout',\n      'status.completed': 'Traité',\n      'status.processing': 'En cours',\n      'status.pending': 'En attente',\n      'status.error': 'Erreur',\n      \n      // Sidebar\n      'storage.title': 'Stockage',\n      'storage.local': 'Local',\n      'storage.cloud': 'Cloud',\n      'storage.sync': 'Synchroniser vers le cloud',\n      'ai.title': 'Traitement IA',\n      'ai.pending': 'Documents en attente',\n      'ai.processed': 'Traités aujourd\\'hui',\n      'ai.credits': 'Crédits IA restants',\n      'ai.processing': 'Traitement en cours...',\n      'links.title': 'Liens rapides',\n      'links.help': 'Centre d\\'aide',\n      'links.tutorial': 'Tutoriel interactif',\n      'links.support': 'Support technique',\n      'links.docs': 'Documentation API',\n      \n      // Mobile navigation\n      'mobile.home': 'Accueil',\n      'mobile.documents': 'Documents',\n      'mobile.analysis': 'Analyses',\n      'mobile.settings': 'Réglages',\n      \n      // Common\n      'button.upload': 'Télécharger',\n      'button.scan': 'Scanner',\n      'button.analyze': 'Analyser',\n      'button.delete': 'Supprimer',\n      'button.download': 'Télécharger',\n      'loading': 'Chargement...',\n      'error.generic': 'Une erreur est survenue',\n      'error.upload': 'Erreur lors du téléchargement',\n      'error.analysis': 'Erreur lors de l\\'analyse',\n      \n      // Settings\n      'settings.subtitle': 'Gérez vos préférences AdminIA et les fonctionnalités hors ligne',\n      'settings.connection.online': 'En ligne',\n      'settings.connection.offline': 'Hors ligne',\n      'settings.connection.online_desc': 'Connecté à internet',\n      'settings.connection.offline_desc': 'Aucune connexion internet disponible',\n      'settings.offline.title': 'Mode hors ligne',\n      'settings.offline.description': 'Utilisez AdminIA sans connexion internet',\n      'settings.offline.enable': 'Activer le mode hors ligne',\n      'settings.offline.enable_desc': 'Les documents et analyses seront stockés localement',\n      'settings.offline.warning': 'En mode hors ligne, vos données sont stockées localement sur cet appareil. Assurez-vous de synchroniser régulièrement pour éviter la perte de données.',\n      'settings.offline.data_title': 'Données hors ligne',\n      'settings.offline.data_desc': 'Gérez vos documents stockés localement et la synchronisation',\n      'settings.offline.documents': 'Documents hors ligne',\n      'settings.offline.documents_desc': 'Documents stockés localement pour l\\'accès hors ligne',\n      'settings.offline.clear_data': 'Effacer les données hors ligne',\n      'settings.storage.usage': 'Stockage utilisé',\n      'settings.storage.limit': 'Jusqu\\'à 10 Mo de stockage local disponible',\n      'settings.sync.queue': 'Synchronisation en attente',\n      'settings.sync.queue_desc': 'Modifications en attente de synchronisation',\n      'settings.sync.sync_now': 'Synchroniser maintenant',\n      'settings.sync.syncing': 'Synchronisation...',\n      'settings.sync.pending_warning': 'Vous avez {{count}} modifications en attente qui doivent être synchronisées lorsque vous serez de nouveau en ligne.',\n      'settings.language.title': 'Langue',\n      'settings.language.description': 'Choisissez votre langue préférée pour AdminIA',\n      'settings.offline_enabled': 'Mode hors ligne activé',\n      'settings.offline_disabled': 'Mode hors ligne désactivé',\n      'settings.offline_enabled_desc': 'Vous pouvez maintenant utiliser AdminIA sans connexion internet',\n      'settings.offline_disabled_desc': 'AdminIA nécessitera une connexion internet',\n      'settings.sync_offline_error': 'Impossible de synchroniser en mode hors ligne',\n      'settings.sync_offline_desc': 'Veuillez vous connecter à internet pour synchroniser vos données',\n      'settings.sync_success': 'Données synchronisées',\n      'settings.sync_success_desc': 'Toutes les modifications hors ligne ont été synchronisées',\n      'settings.sync_error': 'Échec de la synchronisation',\n      'settings.sync_error_desc': 'Impossible de synchroniser les données hors ligne. Veuillez réessayer.',\n      'settings.data_cleared': 'Données hors ligne effacées',\n      'settings.data_cleared_desc': 'Toutes les données hors ligne ont été supprimées',\n    }\n  },\n  en: {\n    translation: {\n      // Header\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Intelligent Manager',\n      'nav.dashboard': 'Dashboard',\n      'nav.documents': 'Documents',\n      'nav.analysis': 'Analysis',\n      'nav.settings': 'Settings',\n      \n      // Welcome section\n      'welcome.greeting': 'Hello, {{name}} 👋',\n      'welcome.subtitle': 'Manage your documents intelligently with AI',\n      'stats.documents': 'Documents',\n      'stats.processedToday': 'Processed today',\n      \n      // Quick actions\n      'actions.scan.title': 'Scan document',\n      'actions.scan.description': 'Use your camera to instantly digitize your documents',\n      'actions.upload.title': 'Upload files',\n      'actions.upload.description': 'Drag & drop or select your files to process',\n      'actions.upload.formats': 'PDF, JPG, PNG, DOCX supported',\n      'actions.ai.title': 'AI Analysis',\n      'actions.ai.description': 'Automatic information extraction with OpenAI',\n      'actions.ai.active': 'AI active',\n      \n      // Categories\n      'categories.title': 'Document categories',\n      'categories.viewAll': 'View all',\n      'categories.thisWeek': 'This week',\n      'categories.factures': 'Invoices',\n      'categories.contrats': 'Contracts',\n      'categories.medical': 'Medical',\n      'categories.legal': 'Legal',\n      'categories.correspondence': 'Correspondence',\n      'categories.financial': 'Financial',\n      'categories.administrative': 'Administrative',\n      'categories.other': 'Other',\n      \n      // Recent documents\n      'documents.recent': 'Recent documents',\n      'documents.viewAll': 'View all',\n      'status.completed': 'Completed',\n      'status.processing': 'Processing',\n      'status.pending': 'Pending',\n      'status.error': 'Error',\n      \n      // Sidebar\n      'storage.title': 'Storage',\n      'storage.local': 'Local',\n      'storage.cloud': 'Cloud',\n      'storage.sync': 'Sync to cloud',\n      'ai.title': 'AI Processing',\n      'ai.pending': 'Pending documents',\n      'ai.processed': 'Processed today',\n      'ai.credits': 'AI credits remaining',\n      'ai.processing': 'Processing...',\n      'links.title': 'Quick links',\n      'links.help': 'Help center',\n      'links.tutorial': 'Interactive tutorial',\n      'links.support': 'Technical support',\n      'links.docs': 'API documentation',\n      \n      // Mobile navigation\n      'mobile.home': 'Home',\n      'mobile.documents': 'Documents',\n      'mobile.analysis': 'Analysis',\n      'mobile.settings': 'Settings',\n      \n      // Common\n      'button.upload': 'Upload',\n      'button.scan': 'Scan',\n      'button.analyze': 'Analyze',\n      'button.delete': 'Delete',\n      'button.download': 'Download',\n      'loading': 'Loading...',\n      'error.generic': 'An error occurred',\n      'error.upload': 'Upload error',\n      'error.analysis': 'Analysis error',\n      \n      // Settings\n      'settings.subtitle': 'Manage your AdminIA preferences and offline functionality',\n      'settings.connection.online': 'Online',\n      'settings.connection.offline': 'Offline',\n      'settings.connection.online_desc': 'Connected to the internet',\n      'settings.connection.offline_desc': 'No internet connection available',\n      'settings.offline.title': 'Offline Mode',\n      'settings.offline.description': 'Use AdminIA without an internet connection',\n      'settings.offline.enable': 'Enable offline mode',\n      'settings.offline.enable_desc': 'Documents and analyses will be stored locally',\n      'settings.offline.warning': 'In offline mode, your data is stored locally on this device. Make sure to sync regularly to avoid data loss.',\n      'settings.offline.data_title': 'Offline Data',\n      'settings.offline.data_desc': 'Manage your locally stored documents and synchronization',\n      'settings.offline.documents': 'Offline documents',\n      'settings.offline.documents_desc': 'Documents stored locally for offline access',\n      'settings.offline.clear_data': 'Clear offline data',\n      'settings.storage.usage': 'Storage used',\n      'settings.storage.limit': 'Up to 10MB of local storage available',\n      'settings.sync.queue': 'Pending sync',\n      'settings.sync.queue_desc': 'Changes waiting to be synchronized',\n      'settings.sync.sync_now': 'Sync now',\n      'settings.sync.syncing': 'Syncing...',\n      'settings.sync.pending_warning': 'You have {{count}} pending changes that need to be synchronized when you\\'re back online.',\n      'settings.language.title': 'Language',\n      'settings.language.description': 'Choose your preferred language for AdminIA',\n      'settings.offline_enabled': 'Offline mode enabled',\n      'settings.offline_disabled': 'Offline mode disabled',\n      'settings.offline_enabled_desc': 'You can now use AdminIA without internet connection',\n      'settings.offline_disabled_desc': 'AdminIA will require internet connection',\n      'settings.sync_offline_error': 'Cannot sync while offline',\n      'settings.sync_offline_desc': 'Please connect to the internet to sync your data',\n      'settings.sync_success': 'Data synchronized',\n      'settings.sync_success_desc': 'All offline changes have been synchronized',\n      'settings.sync_error': 'Synchronization failed',\n      'settings.sync_error_desc': 'Failed to sync offline data. Please try again.',\n      'settings.data_cleared': 'Offline data cleared',\n      'settings.data_cleared_desc': 'All offline data has been removed',\n    }\n  },\n  es: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Gestor Inteligente',\n      'nav.dashboard': 'Panel',\n      'nav.documents': 'Documentos',\n      'nav.analysis': 'Análisis',\n      'nav.settings': 'Configuración',\n      'welcome.greeting': 'Hola, {{name}} 👋',\n      'welcome.subtitle': 'Gestiona tus documentos inteligentemente con IA',\n      'stats.documents': 'Documentos',\n      'stats.processedToday': 'Procesados hoy',\n      'actions.scan.title': 'Escanear documento',\n      'actions.upload.title': 'Subir archivos',\n      'actions.ai.title': 'Análisis IA',\n      'categories.title': 'Categorías de documentos',\n      'documents.recent': 'Documentos recientes',\n      'storage.title': 'Almacenamiento',\n      'ai.title': 'Procesamiento IA',\n      'links.title': 'Enlaces rápidos',\n      'mobile.home': 'Inicio',\n      \n      // Settings\n      'settings.subtitle': 'Gestiona tus preferencias de AdminIA y funcionalidad sin conexión',\n      'settings.connection.online': 'En línea',\n      'settings.connection.offline': 'Sin conexión',\n      'settings.connection.online_desc': 'Conectado a internet',\n      'settings.connection.offline_desc': 'Sin conexión a internet disponible',\n      'settings.offline.title': 'Modo sin conexión',\n      'settings.offline.description': 'Usar AdminIA sin conexión a internet',\n      'settings.offline.enable': 'Habilitar modo sin conexión',\n      'settings.offline.enable_desc': 'Los documentos y análisis se almacenarán localmente',\n      'settings.offline.warning': 'En modo sin conexión, tus datos se almacenan localmente en este dispositivo. Asegúrate de sincronizar regularmente para evitar pérdida de datos.',\n      'settings.offline.data_title': 'Datos sin conexión',\n      'settings.offline.data_desc': 'Gestiona tus documentos almacenados localmente y la sincronización',\n      'settings.offline.documents': 'Documentos sin conexión',\n      'settings.offline.documents_desc': 'Documentos almacenados localmente para acceso sin conexión',\n      'settings.offline.clear_data': 'Limpiar datos sin conexión',\n      'settings.storage.usage': 'Almacenamiento usado',\n      'settings.storage.limit': 'Hasta 10MB de almacenamiento local disponible',\n      'settings.sync.queue': 'Sincronización pendiente',\n      'settings.sync.queue_desc': 'Cambios esperando ser sincronizados',\n      'settings.sync.sync_now': 'Sincronizar ahora',\n      'settings.sync.syncing': 'Sincronizando...',\n      'settings.sync.pending_warning': 'Tienes {{count}} cambios pendientes que necesitan ser sincronizados cuando vuelvas a estar en línea.',\n      'settings.language.title': 'Idioma',\n      'settings.language.description': 'Elige tu idioma preferido para AdminIA',\n      'settings.offline_enabled': 'Modo sin conexión habilitado',\n      'settings.offline_disabled': 'Modo sin conexión deshabilitado',\n      'settings.offline_enabled_desc': 'Ahora puedes usar AdminIA sin conexión a internet',\n      'settings.offline_disabled_desc': 'AdminIA requerirá conexión a internet',\n      'settings.sync_offline_error': 'No se puede sincronizar sin conexión',\n      'settings.sync_offline_desc': 'Por favor conéctate a internet para sincronizar tus datos',\n      'settings.sync_success': 'Datos sincronizados',\n      'settings.sync_success_desc': 'Todos los cambios sin conexión han sido sincronizados',\n      'settings.sync_error': 'Error de sincronización',\n      'settings.sync_error_desc': 'Error al sincronizar datos sin conexión. Por favor inténtalo de nuevo.',\n      'settings.data_cleared': 'Datos sin conexión limpiados',\n      'settings.data_cleared_desc': 'Todos los datos sin conexión han sido eliminados',\n    }\n  },\n  de: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Intelligenter Manager',\n      'nav.dashboard': 'Dashboard',\n      'nav.documents': 'Dokumente',\n      'nav.analysis': 'Analyse',\n      'nav.settings': 'Einstellungen',\n      'welcome.greeting': 'Hallo, {{name}} 👋',\n      'welcome.subtitle': 'Verwalten Sie Ihre Dokumente intelligent mit KI',\n      'stats.documents': 'Dokumente',\n      'stats.processedToday': 'Heute verarbeitet',\n      'actions.scan.title': 'Dokument scannen',\n      'actions.upload.title': 'Dateien hochladen',\n      'actions.ai.title': 'KI-Analyse',\n      'categories.title': 'Dokumentkategorien',\n      'documents.recent': 'Neueste Dokumente',\n      'storage.title': 'Speicher',\n      'ai.title': 'KI-Verarbeitung',\n      'links.title': 'Schnellzugriff',\n      'mobile.home': 'Startseite',\n      \n      // Settings\n      'settings.subtitle': 'Verwalten Sie Ihre AdminIA-Einstellungen und Offline-Funktionalität',\n      'settings.connection.online': 'Online',\n      'settings.connection.offline': 'Offline',\n      'settings.connection.online_desc': 'Mit dem Internet verbunden',\n      'settings.connection.offline_desc': 'Keine Internetverbindung verfügbar',\n      'settings.offline.title': 'Offline-Modus',\n      'settings.offline.description': 'AdminIA ohne Internetverbindung nutzen',\n      'settings.offline.enable': 'Offline-Modus aktivieren',\n      'settings.offline.enable_desc': 'Dokumente und Analysen werden lokal gespeichert',\n      'settings.offline.warning': 'Im Offline-Modus werden Ihre Daten lokal auf diesem Gerät gespeichert. Stellen Sie sicher, dass Sie regelmäßig synchronisieren, um Datenverlust zu vermeiden.',\n      'settings.offline.data_title': 'Offline-Daten',\n      'settings.offline.data_desc': 'Verwalten Sie Ihre lokal gespeicherten Dokumente und Synchronisation',\n      'settings.offline.documents': 'Offline-Dokumente',\n      'settings.offline.documents_desc': 'Lokal gespeicherte Dokumente für Offline-Zugriff',\n      'settings.offline.clear_data': 'Offline-Daten löschen',\n      'settings.storage.usage': 'Verwendeter Speicher',\n      'settings.storage.limit': 'Bis zu 10MB lokaler Speicher verfügbar',\n      'settings.sync.queue': 'Ausstehende Synchronisation',\n      'settings.sync.queue_desc': 'Änderungen warten auf Synchronisation',\n      'settings.sync.sync_now': 'Jetzt synchronisieren',\n      'settings.sync.syncing': 'Synchronisiere...',\n      'settings.sync.pending_warning': 'Sie haben {{count}} ausstehende Änderungen, die synchronisiert werden müssen, wenn Sie wieder online sind.',\n      'settings.language.title': 'Sprache',\n      'settings.language.description': 'Wählen Sie Ihre bevorzugte Sprache für AdminIA',\n      'settings.offline_enabled': 'Offline-Modus aktiviert',\n      'settings.offline_disabled': 'Offline-Modus deaktiviert',\n      'settings.offline_enabled_desc': 'Sie können AdminIA jetzt ohne Internetverbindung nutzen',\n      'settings.offline_disabled_desc': 'AdminIA benötigt eine Internetverbindung',\n      'settings.sync_offline_error': 'Synchronisation offline nicht möglich',\n      'settings.sync_offline_desc': 'Bitte verbinden Sie sich mit dem Internet, um Ihre Daten zu synchronisieren',\n      'settings.sync_success': 'Daten synchronisiert',\n      'settings.sync_success_desc': 'Alle Offline-Änderungen wurden synchronisiert',\n      'settings.sync_error': 'Synchronisation fehlgeschlagen',\n      'settings.sync_error_desc': 'Offline-Daten konnten nicht synchronisiert werden. Bitte versuchen Sie es erneut.',\n      'settings.data_cleared': 'Offline-Daten gelöscht',\n      'settings.data_cleared_desc': 'Alle Offline-Daten wurden entfernt',\n    }\n  },\n  it: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Gestore Intelligente',\n      'nav.dashboard': 'Dashboard',\n      'nav.documents': 'Documenti',\n      'nav.analysis': 'Analisi',\n      'nav.settings': 'Impostazioni',\n      'welcome.greeting': 'Ciao, {{name}} 👋',\n      'welcome.subtitle': 'Gestisci i tuoi documenti intelligentemente con l\\'IA',\n      'stats.documents': 'Documenti',\n      'stats.processedToday': 'Elaborati oggi',\n      'actions.scan.title': 'Scansiona documento',\n      'actions.upload.title': 'Carica file',\n      'actions.ai.title': 'Analisi IA',\n      'categories.title': 'Categorie di documenti',\n      'documents.recent': 'Documenti recenti',\n      'storage.title': 'Archiviazione',\n      'ai.title': 'Elaborazione IA',\n      'links.title': 'Link rapidi',\n      'mobile.home': 'Home',\n      \n      // Settings\n      'settings.subtitle': 'Gestisci le tue preferenze AdminIA e funzionalità offline',\n      'settings.connection.online': 'Online',\n      'settings.connection.offline': 'Offline',\n      'settings.connection.online_desc': 'Connesso a internet',\n      'settings.connection.offline_desc': 'Nessuna connessione internet disponibile',\n      'settings.offline.title': 'Modalità offline',\n      'settings.offline.description': 'Usa AdminIA senza connessione internet',\n      'settings.offline.enable': 'Abilita modalità offline',\n      'settings.offline.enable_desc': 'I documenti e le analisi saranno salvati localmente',\n      'settings.offline.warning': 'In modalità offline, i tuoi dati sono memorizzati localmente su questo dispositivo. Assicurati di sincronizzare regolarmente per evitare perdite di dati.',\n      'settings.offline.data_title': 'Dati offline',\n      'settings.offline.data_desc': 'Gestisci i tuoi documenti salvati localmente e la sincronizzazione',\n      'settings.offline.documents': 'Documenti offline',\n      'settings.offline.documents_desc': 'Documenti salvati localmente per accesso offline',\n      'settings.offline.clear_data': 'Cancella dati offline',\n      'settings.storage.usage': 'Spazio utilizzato',\n      'settings.storage.limit': 'Fino a 10MB di spazio locale disponibile',\n      'settings.sync.queue': 'Sincronizzazione in sospeso',\n      'settings.sync.queue_desc': 'Modifiche in attesa di essere sincronizzate',\n      'settings.sync.sync_now': 'Sincronizza ora',\n      'settings.sync.syncing': 'Sincronizzazione...',\n      'settings.sync.pending_warning': 'Hai {{count}} modifiche in sospeso che devono essere sincronizzate quando torni online.',\n      'settings.language.title': 'Lingua',\n      'settings.language.description': 'Scegli la tua lingua preferita per AdminIA',\n      'settings.offline_enabled': 'Modalità offline abilitata',\n      'settings.offline_disabled': 'Modalità offline disabilitata',\n      'settings.offline_enabled_desc': 'Ora puoi usare AdminIA senza connessione internet',\n      'settings.offline_disabled_desc': 'AdminIA richiederà una connessione internet',\n      'settings.sync_offline_error': 'Impossibile sincronizzare offline',\n      'settings.sync_offline_desc': 'Per favore connettiti a internet per sincronizzare i tuoi dati',\n      'settings.sync_success': 'Dati sincronizzati',\n      'settings.sync_success_desc': 'Tutte le modifiche offline sono state sincronizzate',\n      'settings.sync_error': 'Sincronizzazione fallita',\n      'settings.sync_error_desc': 'Impossibile sincronizzare i dati offline. Riprova.',\n      'settings.data_cleared': 'Dati offline cancellati',\n      'settings.data_cleared_desc': 'Tutti i dati offline sono stati rimossi',\n    }\n  },\n  zh: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': '智能管理器',\n      'nav.dashboard': '仪表板',\n      'nav.documents': '文档',\n      'nav.analysis': '分析',\n      'nav.settings': '设置',\n      'welcome.greeting': '您好，{{name}} 👋',\n      'welcome.subtitle': '使用AI智能管理您的文档',\n      'stats.documents': '文档',\n      'stats.processedToday': '今日处理',\n      'actions.scan.title': '扫描文档',\n      'actions.scan.description': '使用相机即时数字化您的文档',\n      'actions.upload.title': '上传文件',\n      'actions.upload.description': '拖拽或选择要处理的文件',\n      'actions.upload.formats': '支持PDF、JPG、PNG、DOCX',\n      'actions.ai.title': 'AI分析',\n      'actions.ai.description': '使用OpenAI自动提取信息',\n      'actions.ai.active': 'AI活跃',\n      'categories.title': '文档类别',\n      'categories.viewAll': '查看全部',\n      'categories.thisWeek': '本周',\n      'categories.factures': '发票',\n      'categories.contrats': '合同',\n      'categories.medical': '医疗',\n      'categories.legal': '法律',\n      'categories.correspondence': '通信',\n      'categories.financial': '财务',\n      'categories.administrative': '行政',\n      'categories.other': '其他',\n      'documents.recent': '最近文档',\n      'documents.viewAll': '查看全部',\n      'status.completed': '已完成',\n      'status.processing': '处理中',\n      'status.pending': '待处理',\n      'status.error': '错误',\n      'storage.title': '存储',\n      'storage.local': '本地',\n      'storage.cloud': '云端',\n      'storage.sync': '同步到云端',\n      'ai.title': 'AI处理',\n      'ai.pending': '待处理文档',\n      'ai.processed': '今日已处理',\n      'ai.credits': '剩余AI积分',\n      'ai.processing': '处理中...',\n      'links.title': '快速链接',\n      'links.help': '帮助中心',\n      'links.tutorial': '交互式教程',\n      'links.support': '技术支持',\n      'links.docs': 'API文档',\n      'mobile.home': '首页',\n      'mobile.documents': '文档',\n      'mobile.analysis': '分析',\n      'mobile.settings': '设置',\n      'button.upload': '上传',\n      'button.scan': '扫描',\n      'button.analyze': '分析',\n      'button.delete': '删除',\n      'button.download': '下载',\n      'loading': '加载中...',\n      'error.generic': '发生错误',\n      'error.upload': '上传错误',\n      'error.analysis': '分析错误',\n      \n      // Settings\n      'settings.subtitle': '管理您的AdminIA偏好和离线功能',\n      'settings.connection.online': '在线',\n      'settings.connection.offline': '离线',\n      'settings.connection.online_desc': '已连接到互联网',\n      'settings.connection.offline_desc': '无可用的互联网连接',\n      'settings.offline.title': '离线模式',\n      'settings.offline.description': '无需互联网连接即可使用AdminIA',\n      'settings.offline.enable': '启用离线模式',\n      'settings.offline.enable_desc': '文档和分析将在本地存储',\n      'settings.offline.warning': '在离线模式下，您的数据存储在此设备上。请确保定期同步以避免数据丢失。',\n      'settings.offline.data_title': '离线数据',\n      'settings.offline.data_desc': '管理您本地存储的文档和同步',\n      'settings.offline.documents': '离线文档',\n      'settings.offline.documents_desc': '本地存储的文档用于离线访问',\n      'settings.offline.clear_data': '清除离线数据',\n      'settings.storage.usage': '使用的存储空间',\n      'settings.storage.limit': '最多可用10MB本地存储',\n      'settings.sync.queue': '待同步',\n      'settings.sync.queue_desc': '等待同步的更改',\n      'settings.sync.sync_now': '立即同步',\n      'settings.sync.syncing': '同步中...',\n      'settings.sync.pending_warning': '您有{{count}}项待处理的更改需要在重新上线时同步。',\n      'settings.language.title': '语言',\n      'settings.language.description': '选择您的AdminIA首选语言',\n      'settings.offline_enabled': '离线模式已启用',\n      'settings.offline_disabled': '离线模式已禁用',\n      'settings.offline_enabled_desc': '您现在可以无需互联网连接使用AdminIA',\n      'settings.offline_disabled_desc': 'AdminIA将需要互联网连接',\n      'settings.sync_offline_error': '离线时无法同步',\n      'settings.sync_offline_desc': '请连接到互联网以同步您的数据',\n      'settings.sync_success': '数据已同步',\n      'settings.sync_success_desc': '所有离线更改已同步',\n      'settings.sync_error': '同步失败',\n      'settings.sync_error_desc': '无法同步离线数据。请重试。',\n      'settings.data_cleared': '离线数据已清除',\n      'settings.data_cleared_desc': '所有离线数据已被删除',\n    }\n  },\n  ko: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': '지능형 관리자',\n      'nav.dashboard': '대시보드',\n      'nav.documents': '문서',\n      'nav.analysis': '분석',\n      'nav.settings': '설정',\n      'welcome.greeting': '안녕하세요, {{name}} 👋',\n      'welcome.subtitle': 'AI로 문서를 지능적으로 관리하세요',\n      'stats.documents': '문서',\n      'stats.processedToday': '오늘 처리됨',\n      'actions.scan.title': '문서 스캔',\n      'actions.scan.description': '카메라로 문서를 즉시 디지털화하세요',\n      'actions.upload.title': '파일 업로드',\n      'actions.upload.description': '처리할 파일을 드래그하거나 선택하세요',\n      'actions.upload.formats': 'PDF, JPG, PNG, DOCX 지원',\n      'actions.ai.title': 'AI 분석',\n      'actions.ai.description': 'OpenAI로 자동 정보 추출',\n      'actions.ai.active': 'AI 활성',\n      'categories.title': '문서 카테고리',\n      'categories.viewAll': '모두 보기',\n      'categories.thisWeek': '이번 주',\n      'categories.factures': '청구서',\n      'categories.contrats': '계약서',\n      'categories.medical': '의료',\n      'categories.legal': '법률',\n      'categories.correspondence': '서신',\n      'categories.financial': '금융',\n      'categories.administrative': '행정',\n      'categories.other': '기타',\n      'documents.recent': '최근 문서',\n      'documents.viewAll': '모두 보기',\n      'status.completed': '완료됨',\n      'status.processing': '처리 중',\n      'status.pending': '대기 중',\n      'status.error': '오류',\n      'storage.title': '저장소',\n      'storage.local': '로컬',\n      'storage.cloud': '클라우드',\n      'storage.sync': '클라우드 동기화',\n      'ai.title': 'AI 처리',\n      'ai.pending': '대기 중인 문서',\n      'ai.processed': '오늘 처리됨',\n      'ai.credits': '남은 AI 크레딧',\n      'ai.processing': '처리 중...',\n      'links.title': '빠른 링크',\n      'links.help': '도움말 센터',\n      'links.tutorial': '대화형 튜토리얼',\n      'links.support': '기술 지원',\n      'links.docs': 'API 문서',\n      'mobile.home': '홈',\n      'mobile.documents': '문서',\n      'mobile.analysis': '분석',\n      'mobile.settings': '설정',\n      'button.upload': '업로드',\n      'button.scan': '스캔',\n      'button.analyze': '분석',\n      'button.delete': '삭제',\n      'button.download': '다운로드',\n      'loading': '로딩 중...',\n      'error.generic': '오류가 발생했습니다',\n      'error.upload': '업로드 오류',\n      'error.analysis': '분석 오류',\n      \n      // Settings\n      'settings.subtitle': 'AdminIA 설정 및 오프라인 기능을 관리하세요',\n      'settings.connection.online': '온라인',\n      'settings.connection.offline': '오프라인',\n      'settings.connection.online_desc': '인터넷에 연결됨',\n      'settings.connection.offline_desc': '사용 가능한 인터넷 연결이 없음',\n      'settings.offline.title': '오프라인 모드',\n      'settings.offline.description': '인터넷 연결 없이 AdminIA 사용',\n      'settings.offline.enable': '오프라인 모드 활성화',\n      'settings.offline.enable_desc': '문서와 분석이 로컬에 저장됩니다',\n      'settings.offline.warning': '오프라인 모드에서는 데이터가 이 장치에 로컬로 저장됩니다. 데이터 손실을 방지하기 위해 정기적으로 동기화해 주세요.',\n      'settings.offline.data_title': '오프라인 데이터',\n      'settings.offline.data_desc': '로컬에 저장된 문서 및 동기화 관리',\n      'settings.offline.documents': '오프라인 문서',\n      'settings.offline.documents_desc': '오프라인 액세스를 위해 로컬에 저장된 문서',\n      'settings.offline.clear_data': '오프라인 데이터 지우기',\n      'settings.storage.usage': '사용된 저장소',\n      'settings.storage.limit': '최대 10MB의 로컬 저장소 사용 가능',\n      'settings.sync.queue': '동기화 대기 중',\n      'settings.sync.queue_desc': '동기화 대기 중인 변경사항',\n      'settings.sync.sync_now': '지금 동기화',\n      'settings.sync.syncing': '동기화 중...',\n      'settings.sync.pending_warning': '온라인 상태가 되면 동기화해야 할 {{count}}개의 대기 중인 변경사항이 있습니다.',\n      'settings.language.title': '언어',\n      'settings.language.description': 'AdminIA에 사용할 언어를 선택하세요',\n      'settings.offline_enabled': '오프라인 모드 활성화됨',\n      'settings.offline_disabled': '오프라인 모드 비활성화됨',\n      'settings.offline_enabled_desc': '이제 인터넷 연결 없이 AdminIA를 사용할 수 있습니다',\n      'settings.offline_disabled_desc': 'AdminIA에는 인터넷 연결이 필요합니다',\n      'settings.sync_offline_error': '오프라인 상태에서는 동기화할 수 없습니다',\n      'settings.sync_offline_desc': '데이터를 동기화하려면 인터넷에 연결해 주세요',\n      'settings.sync_success': '데이터 동기화됨',\n      'settings.sync_success_desc': '모든 오프라인 변경사항이 동기화되었습니다',\n      'settings.sync_error': '동기화 실패',\n      'settings.sync_error_desc': '오프라인 데이터를 동기화하지 못했습니다. 다시 시도해 주세요.',\n      'settings.data_cleared': '오프라인 데이터 지워짐',\n      'settings.data_cleared_desc': '모든 오프라인 데이터가 제거되었습니다',\n    }\n  },\n  ar: {\n    translation: {\n      'app.title': 'AdminIA',\n      'app.subtitle': 'مدير ذكي',\n      'nav.dashboard': 'لوحة التحكم',\n      'nav.documents': 'المستندات',\n      'nav.analysis': 'التحليل',\n      'nav.settings': 'الإعدادات',\n      'welcome.greeting': 'مرحباً، {{name}} 👋',\n      'welcome.subtitle': 'أدر مستنداتك بذكاء باستخدام الذكاء الاصطناعي',\n      'stats.documents': 'المستندات',\n      'stats.processedToday': 'تمت معالجتها اليوم',\n      'actions.scan.title': 'مسح المستند',\n      'actions.scan.description': 'استخدم الكاميرا لرقمنة مستنداتك فوراً',\n      'actions.upload.title': 'رفع الملفات',\n      'actions.upload.description': 'اسحب وأفلت أو اختر ملفاتك للمعالجة',\n      'actions.upload.formats': 'يدعم PDF, JPG, PNG, DOCX',\n      'actions.ai.title': 'تحليل الذكاء الاصطناعي',\n      'actions.ai.description': 'استخراج المعلومات التلقائي مع OpenAI',\n      'actions.ai.active': 'الذكاء الاصطناعي نشط',\n      'categories.title': 'فئات المستندات',\n      'categories.viewAll': 'عرض الكل',\n      'categories.thisWeek': 'هذا الأسبوع',\n      'categories.factures': 'الفواتير',\n      'categories.contrats': 'العقود',\n      'categories.medical': 'طبي',\n      'categories.legal': 'قانوني',\n      'categories.correspondence': 'المراسلات',\n      'categories.financial': 'مالي',\n      'categories.administrative': 'إداري',\n      'categories.other': 'أخرى',\n      'documents.recent': 'المستندات الحديثة',\n      'documents.viewAll': 'عرض الكل',\n      'status.completed': 'مكتمل',\n      'status.processing': 'قيد المعالجة',\n      'status.pending': 'في الانتظار',\n      'status.error': 'خطأ',\n      'storage.title': 'التخزين',\n      'storage.local': 'محلي',\n      'storage.cloud': 'سحابي',\n      'storage.sync': 'مزامنة مع السحابة',\n      'ai.title': 'معالجة الذكاء الاصطناعي',\n      'ai.pending': 'المستندات في الانتظار',\n      'ai.processed': 'تمت معالجتها اليوم',\n      'ai.credits': 'نقاط الذكاء الاصطناعي المتبقية',\n      'ai.processing': 'جاري المعالجة...',\n      'links.title': 'روابط سريعة',\n      'links.help': 'مركز المساعدة',\n      'links.tutorial': 'دليل تفاعلي',\n      'links.support': 'الدعم الفني',\n      'links.docs': 'وثائق API',\n      'mobile.home': 'الرئيسية',\n      'mobile.documents': 'المستندات',\n      'mobile.analysis': 'التحليل',\n      'mobile.settings': 'الإعدادات',\n      'button.upload': 'رفع',\n      'button.scan': 'مسح',\n      'button.analyze': 'تحليل',\n      'button.delete': 'حذف',\n      'button.download': 'تحميل',\n      'loading': 'جاري التحميل...',\n      'error.generic': 'حدث خطأ',\n      'error.upload': 'خطأ في الرفع',\n      'error.analysis': 'خطأ في التحليل',\n      \n      // Settings\n      'settings.subtitle': 'إدارة تفضيلات AdminIA والوظائف دون اتصال',\n      'settings.connection.online': 'متصل',\n      'settings.connection.offline': 'غير متصل',\n      'settings.connection.online_desc': 'متصل بالإنترنت',\n      'settings.connection.offline_desc': 'لا توجد صلة إنترنت متاحة',\n      'settings.offline.title': 'الوضع دون اتصال',\n      'settings.offline.description': 'استخدم AdminIA بدون اتصال بالإنترنت',\n      'settings.offline.enable': 'تفعيل الوضع دون اتصال',\n      'settings.offline.enable_desc': 'سيتم حفظ المستندات والتحليلات محلياً',\n      'settings.offline.warning': 'في الوضع دون اتصال، يتم تخزين بياناتك محلياً على هذا الجهاز. تأكد من المزامنة بانتظام لتجنب فقدان البيانات.',\n      'settings.offline.data_title': 'البيانات دون اتصال',\n      'settings.offline.data_desc': 'إدارة مستنداتك المخزنة محلياً والمزامنة',\n      'settings.offline.documents': 'المستندات دون اتصال',\n      'settings.offline.documents_desc': 'المستندات المخزنة محلياً للوصول دون اتصال',\n      'settings.offline.clear_data': 'مسح البيانات دون اتصال',\n      'settings.storage.usage': 'التخزين المستخدم',\n      'settings.storage.limit': 'متاح حتى 10 ميجابايت من التخزين المحلي',\n      'settings.sync.queue': 'المزامنة المعلقة',\n      'settings.sync.queue_desc': 'التغييرات في انتظار المزامنة',\n      'settings.sync.sync_now': 'مزامنة الآن',\n      'settings.sync.syncing': 'جاري المزامنة...',\n      'settings.sync.pending_warning': 'لديك {{count}} تغييرات معلقة تحتاج إلى مزامنة عندما تعود للاتصال.',\n      'settings.language.title': 'اللغة',\n      'settings.language.description': 'اختر لغتك المفضلة لـ AdminIA',\n      'settings.offline_enabled': 'تم تفعيل الوضع دون اتصال',\n      'settings.offline_disabled': 'تم إلغاء الوضع دون اتصال',\n      'settings.offline_enabled_desc': 'يمكنك الآن استخدام AdminIA بدون اتصال بالإنترنت',\n      'settings.offline_disabled_desc': 'سيحتاج AdminIA إلى اتصال بالإنترنت',\n      'settings.sync_offline_error': 'لا يمكن المزامنة أثناء عدم الاتصال',\n      'settings.sync_offline_desc': 'يرجى الاتصال بالإنترنت لمزامنة بياناتك',\n      'settings.sync_success': 'تمت مزامنة البيانات',\n      'settings.sync_success_desc': 'تمت مزامنة جميع التغييرات دون اتصال',\n      'settings.sync_error': 'فشل في المزامنة',\n      'settings.sync_error_desc': 'فشل في مزامنة البيانات دون اتصال. يرجى المحاولة مرة أخرى.',\n      'settings.data_cleared': 'تم مسح البيانات دون اتصال',\n      'settings.data_cleared_desc': 'تم إزالة جميع البيانات دون اتصال',\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'fr', // default language\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","size_bytes":39921},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { QuickActions } from \"@/components/QuickActions\";\nimport { DocumentCategories } from \"@/components/DocumentCategories\";\nimport { RecentDocuments } from \"@/components/RecentDocuments\";\nimport { Sidebar } from \"@/components/Sidebar\";\nimport { MobileNavigation } from \"@/components/MobileNavigation\";\nimport { OfflineStatusIndicator } from \"@/components/OfflineStatusIndicator\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n\n  const { data: stats, isLoading } = useQuery<{\n    totalDocuments: number;\n    processedToday: number;\n  }>({\n    queryKey: ['/api/statistics'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-20 md:pb-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-2\">\n                {t('welcome.greeting', { name: 'Jean Dupont' })}\n              </h2>\n              <p className=\"text-muted-foreground\">\n                {t('welcome.subtitle')}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n              <div className=\"text-center\">\n                {isLoading ? (\n                  <Skeleton className=\"h-8 w-16 mx-auto mb-1\" />\n                ) : (\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-documents\">\n                    {stats?.totalDocuments || 0}\n                  </div>\n                )}\n                <div className=\"text-xs text-muted-foreground\">\n                  {t('stats.documents')}\n                </div>\n              </div>\n              <div className=\"text-center\">\n                {isLoading ? (\n                  <Skeleton className=\"h-8 w-16 mx-auto mb-1\" />\n                ) : (\n                  <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-processed-today\">\n                    {stats?.processedToday || 0}\n                  </div>\n                )}\n                <div className=\"text-xs text-muted-foreground\">\n                  {t('stats.processedToday')}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <QuickActions />\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Document Categories and Recent Documents */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            <DocumentCategories />\n            <RecentDocuments />\n          </div>\n\n          {/* Sidebar */}\n          <Sidebar />\n        </div>\n      </main>\n\n      {/* Floating Action Button */}\n      <Button\n        data-testid=\"button-floating-scan\"\n        size=\"lg\"\n        className=\"fixed bottom-6 right-6 w-14 h-14 rounded-full shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-200 z-40 md:bottom-6\"\n      >\n        <i className=\"fas fa-camera text-xl\" />\n      </Button>\n\n      <OfflineStatusIndicator />\n      <MobileNavigation />\n    </div>\n  );\n}\n","size_bytes":3470},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { MobileNavigation } from \"@/components/MobileNavigation\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Document } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function DocumentsPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: ['/api/documents'],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/categories'],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: { name: string; originalName: string; mimeType: string; size: number; objectPath: string }) => {\n      const response = await apiRequest('POST', '/api/documents', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n      toast({\n        title: \"Succès\",\n        description: \"Document téléchargé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: t('error.upload'),\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      await apiRequest('DELETE', `/api/documents/${documentId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n      toast({\n        title: \"Succès\",\n        description: \"Document supprimé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la suppression\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await apiRequest('POST', `/api/documents/${documentId}/analyze`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      toast({\n        title: \"Succès\",\n        description: \"Analyse IA terminée\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: t('error.analysis'),\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getUploadParameters = async () => {\n    const response = await fetch('/api/documents/upload-url', {\n      method: 'POST',\n    });\n    const data = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    result.successful.forEach((file) => {\n      uploadMutation.mutate({\n        name: file.name,\n        originalName: file.name,\n        mimeType: file.type || 'application/octet-stream',\n        size: file.size || 0,\n        objectPath: file.uploadURL || '',\n      });\n    });\n  };\n\n  const filteredDocuments = documents.filter((doc) => {\n    const matchesSearch = doc.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.includes('pdf')) return { icon: 'fas fa-file-pdf', color: 'text-red-600', bg: 'bg-red-500/10' };\n    if (mimeType.includes('word')) return { icon: 'fas fa-file-word', color: 'text-blue-600', bg: 'bg-blue-500/10' };\n    if (mimeType.includes('image')) return { icon: 'fas fa-file-image', color: 'text-green-600', bg: 'bg-green-500/10' };\n    return { icon: 'fas fa-file', color: 'text-gray-600', bg: 'bg-gray-500/10' };\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-20 md:pb-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n              {t('nav.documents')}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Gérez tous vos documents en un seul endroit\n            </p>\n          </div>\n          <ObjectUploader\n            maxNumberOfFiles={5}\n            maxFileSize={50 * 1024 * 1024} // 50MB\n            onGetUploadParameters={getUploadParameters}\n            onComplete={handleUploadComplete}\n            buttonClassName=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <i className=\"fas fa-cloud-upload-alt\" />\n              <span>{t('button.upload')}</span>\n            </div>\n          </ObjectUploader>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  data-testid=\"input-document-search\"\n                  placeholder=\"Rechercher des documents...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-document-category\" className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Toutes les catégories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Toutes les catégories</SelectItem>\n                  {categories.map((category: any) => (\n                    <SelectItem key={category.id} value={category.name}>\n                      {t(`categories.${category.name}`)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Documents Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg flex-shrink-0\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-3 w-3/4\" />\n                      <div className=\"flex justify-between items-center\">\n                        <Skeleton className=\"h-5 w-16\" />\n                        <Skeleton className=\"h-6 w-6\" />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredDocuments.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <i className=\"fas fa-inbox text-4xl text-muted-foreground mb-4 block\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Aucun document trouvé\n              </h3>\n              <p className=\"text-muted-foreground\">\n                {searchQuery || selectedCategory !== 'all' \n                  ? 'Essayez d\\'ajuster vos filtres de recherche.'\n                  : 'Commencez par télécharger votre premier document.'\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredDocuments.map((document) => {\n              const fileIcon = getFileIcon(document.mimeType);\n              \n              return (\n                <Card key={document.id} data-testid={`card-document-${document.id}`} className=\"hover-lift\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`w-12 h-12 ${fileIcon.bg} rounded-lg flex items-center justify-center flex-shrink-0`}>\n                        <i className={`${fileIcon.icon} ${fileIcon.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-medium text-foreground truncate mb-1\">\n                          {document.name}\n                        </h3>\n                        <div className=\"text-sm text-muted-foreground mb-2\">\n                          {document.category && t(`categories.${document.category}`)} • {formatFileSize(document.size)}\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <Badge\n                            variant={document.status === 'completed' ? 'default' : 'secondary'}\n                            className={\n                              document.status === 'completed' ? 'bg-accent/10 text-accent' :\n                              document.status === 'processing' ? 'bg-yellow-500/10 text-yellow-600' :\n                              document.status === 'error' ? 'bg-destructive/10 text-destructive' :\n                              'bg-blue-500/10 text-blue-600'\n                            }\n                          >\n                            {t(`status.${document.status}`)}\n                          </Badge>\n                          <div className=\"flex items-center space-x-1\">\n                            {document.status === 'pending' && (\n                              <Button\n                                data-testid={`button-analyze-${document.id}`}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => analyzeMutation.mutate(document.id)}\n                                disabled={analyzeMutation.isPending}\n                                className=\"p-1 h-6 w-6\"\n                              >\n                                <i className=\"fas fa-brain text-xs\" />\n                              </Button>\n                            )}\n                            <Button\n                              data-testid={`button-download-${document.id}`}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => window.open(document.objectPath, '_blank')}\n                              className=\"p-1 h-6 w-6\"\n                            >\n                              <i className=\"fas fa-download text-xs\" />\n                            </Button>\n                            <Button\n                              data-testid={`button-delete-${document.id}`}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteMutation.mutate(document.id)}\n                              disabled={deleteMutation.isPending}\n                              className=\"p-1 h-6 w-6 text-destructive hover:text-destructive\"\n                            >\n                              <i className=\"fas fa-trash text-xs\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </main>\n\n      <MobileNavigation />\n    </div>\n  );\n}\n","size_bytes":12816},"client/src/pages/landing.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Brain, Cloud, Zap, Shield, Users } from \"lucide-react\";\n\nexport default function LandingPage() {\n  const { t } = useTranslation();\n\n  const features = [\n    {\n      icon: <FileText className=\"w-8 h-8 text-blue-500\" />,\n      title: t(\"landing.features.document_processing.title\", \"Document Processing\"),\n      description: t(\"landing.features.document_processing.desc\", \"Upload and process PDF, images, and text documents with ease\"),\n    },\n    {\n      icon: <Brain className=\"w-8 h-8 text-purple-500\" />,\n      title: t(\"landing.features.ai_analysis.title\", \"AI-Powered Analysis\"),\n      description: t(\"landing.features.ai_analysis.desc\", \"Advanced document analysis and information extraction using OpenAI\"),\n    },\n    {\n      icon: <Cloud className=\"w-8 h-8 text-green-500\" />,\n      title: t(\"landing.features.cloud_storage.title\", \"Cloud Storage\"),\n      description: t(\"landing.features.cloud_storage.desc\", \"Secure cloud storage for all your documents with easy access\"),\n    },\n    {\n      icon: <Zap className=\"w-8 h-8 text-yellow-500\" />,\n      title: t(\"landing.features.fast_processing.title\", \"Fast Processing\"),\n      description: t(\"landing.features.fast_processing.desc\", \"Quick document analysis and categorization in seconds\"),\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-red-500\" />,\n      title: t(\"landing.features.secure.title\", \"Secure & Private\"),\n      description: t(\"landing.features.secure.desc\", \"Enterprise-grade security to protect your sensitive documents\"),\n    },\n    {\n      icon: <Users className=\"w-8 h-8 text-indigo-500\" />,\n      title: t(\"landing.features.collaboration.title\", \"Team Collaboration\"),\n      description: t(\"landing.features.collaboration.desc\", \"Share and collaborate on documents with your team\"),\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: \"Marie Dubois\",\n      role: t(\"landing.testimonials.lawyer\", \"Lawyer\"),\n      content: t(\"landing.testimonials.marie\", \"AdminIA has revolutionized how I manage legal documents. The AI analysis saves me hours every week.\"),\n    },\n    {\n      name: \"Jean Martin\",\n      role: t(\"landing.testimonials.accountant\", \"Accountant\"),\n      content: t(\"landing.testimonials.jean\", \"Perfect for organizing invoices and financial documents. The automatic categorization is incredibly accurate.\"),\n    },\n    {\n      name: \"Sophie Laurent\",\n      role: t(\"landing.testimonials.consultant\", \"Business Consultant\"),\n      content: t(\"landing.testimonials.sophie\", \"The cloud storage and document processing features have streamlined our entire workflow.\"),\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <h1 className=\"text-2xl font-bold text-primary\">AdminIA</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                asChild\n                variant=\"ghost\"\n                data-testid=\"button-login\"\n              >\n                <a href=\"/api/login\">\n                  {t(\"landing.login\", \"Log In\")}\n                </a>\n              </Button>\n              <Button\n                asChild\n                data-testid=\"button-get-started\"\n              >\n                <a href=\"/api/login\">\n                  {t(\"landing.get_started\", \"Get Started Free\")}\n                </a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <Badge className=\"mb-4 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n            {t(\"landing.badge\", \"AI-Powered Document Management\")}\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            {t(\"landing.hero.title\", \"Intelligent Document Management with AdminIA\")}\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            {t(\"landing.hero.subtitle\", \"Transform your document workflow with AI-powered analysis, automatic categorization, and secure cloud storage. Start your free 3-week trial today.\")}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              asChild\n              data-testid=\"button-start-trial\"\n            >\n              <a href=\"/api/login\">\n                {t(\"landing.start_free_trial\", \"Start Free 3-Week Trial\")}\n              </a>\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              asChild\n              data-testid=\"button-view-pricing\"\n            >\n              <a href=\"/pricing\">\n                {t(\"landing.view_pricing\", \"View Pricing\")}\n              </a>\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            {t(\"landing.no_credit_card\", \"No credit card required • Cancel anytime\")}\n          </p>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              {t(\"landing.features.title\", \"Powerful Features for Modern Teams\")}\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              {t(\"landing.features.subtitle\", \"Everything you need to manage documents intelligently\")}\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <div className=\"mb-4\">{feature.icon}</div>\n                  <CardTitle>{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-base\">\n                    {feature.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Preview */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n            {t(\"landing.pricing.title\", \"Simple, Transparent Pricing\")}\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-12\">\n            {t(\"landing.pricing.subtitle\", \"Start free, then choose the plan that fits your needs\")}\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Weekly Plan */}\n            <Card className=\"border-2\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">\n                  {t(\"landing.pricing.weekly.name\", \"Weekly\")}\n                </CardTitle>\n                <div className=\"text-3xl font-bold\">\n                  €3<span className=\"text-sm font-normal text-muted-foreground\">/week</span>\n                </div>\n                <CardDescription>\n                  {t(\"landing.pricing.weekly.desc\", \"Perfect for short-term projects\")}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button variant=\"outline\" className=\"w-full\" asChild>\n                  <a href=\"/api/login\">\n                    {t(\"landing.pricing.get_started\", \"Get Started\")}\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Monthly Plan */}\n            <Card className=\"border-2 border-primary relative scale-105\">\n              <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary\">\n                {t(\"landing.pricing.popular\", \"Most Popular\")}\n              </Badge>\n              <CardHeader>\n                <CardTitle className=\"text-xl\">\n                  {t(\"landing.pricing.monthly.name\", \"Monthly\")}\n                </CardTitle>\n                <div className=\"text-3xl font-bold\">\n                  €10<span className=\"text-sm font-normal text-muted-foreground\">/month</span>\n                </div>\n                <CardDescription>\n                  {t(\"landing.pricing.monthly.desc\", \"Best for professionals\")}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button className=\"w-full\" asChild>\n                  <a href=\"/api/login\">\n                    {t(\"landing.pricing.get_started\", \"Get Started\")}\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Yearly Plan */}\n            <Card className=\"border-2\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">\n                  {t(\"landing.pricing.yearly.name\", \"Yearly\")}\n                </CardTitle>\n                <div className=\"text-3xl font-bold\">\n                  €100<span className=\"text-sm font-normal text-muted-foreground\">/year</span>\n                </div>\n                <CardDescription>\n                  {t(\"landing.pricing.yearly.desc\", \"Best value for teams\")}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button variant=\"outline\" className=\"w-full\" asChild>\n                  <a href=\"/api/login\">\n                    {t(\"landing.pricing.get_started\", \"Get Started\")}\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              {t(\"landing.testimonials.title\", \"Trusted by Professionals\")}\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              {t(\"landing.testimonials.subtitle\", \"See what our users say about AdminIA\")}\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"border-0 shadow-lg\">\n                <CardContent className=\"pt-6\">\n                  <p className=\"text-muted-foreground mb-4 italic\">\n                    \"{testimonial.content}\"\n                  </p>\n                  <div>\n                    <p className=\"font-semibold\">{testimonial.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n            {t(\"landing.cta.title\", \"Ready to Transform Your Document Management?\")}\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            {t(\"landing.cta.subtitle\", \"Join thousands of professionals using AdminIA to streamline their workflow\")}\n          </p>\n          <Button\n            size=\"lg\"\n            asChild\n            data-testid=\"button-cta-start\"\n          >\n            <a href=\"/api/login\">\n              {t(\"landing.cta.button\", \"Start Your Free Trial Now\")}\n            </a>\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            {t(\"landing.cta.guarantee\", \"3 weeks free • No commitment • Cancel anytime\")}\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <p className=\"text-muted-foreground\">\n            © 2024 AdminIA. {t(\"landing.footer.rights\", \"All rights reserved.\")}\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":12902},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Header } from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Star, Zap, Crown, AlertTriangle, Shield, FileText, ExternalLink, CreditCard } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport type { User, Subscription } from \"@shared/schema\";\n\n// Type definitions for API responses\ninterface SubscriptionStatusResponse {\n  user: {\n    subscriptionStatus: string;\n    subscriptionType?: string;\n    trialEndsAt?: string;\n  };\n  subscription?: Subscription;\n}\n\ninterface CreateSubscriptionResponse {\n  clientSecret: string;\n}\n\n// Initialize Stripe only if key is available\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY) \n  : null;\n\ninterface SubscriptionFormProps {\n  priceType: string;\n  onSuccess: () => void;\n}\n\nfunction SubscriptionForm({ priceType, onSuccess }: SubscriptionFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: window.location.origin + \"/subscription/success\",\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Payment Successful\",\n          description: \"Your subscription is now active!\",\n        });\n        onSuccess();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full\"\n        data-testid=\"button-confirm-payment\"\n      >\n        {isProcessing ? \"Processing...\" : `Subscribe to ${priceType}`}\n      </Button>\n    </form>\n  );\n}\n\nexport default function PricingPage() {\n  const { t } = useTranslation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n  const [clientSecret, setClientSecret] = useState<string>(\"\");\n\n  // Get subscription status\n  const { data: subscriptionStatus, isLoading: statusLoading } = useQuery<SubscriptionStatusResponse>({\n    queryKey: [\"/api/subscription/status\"],\n    enabled: isAuthenticated,\n  });\n\n  // Create subscription mutation\n  const createSubscriptionMutation = useMutation<CreateSubscriptionResponse, any, string>({\n    mutationFn: async (priceType: string) => {\n      const response = await apiRequest(\"POST\", \"/api/subscription/create\", {\n        priceType,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create subscription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const plans = [\n    {\n      id: \"weekly\",\n      name: t(\"pricing.plans.weekly.name\", \"Weekly\"),\n      price: \"2.99\",\n      period: t(\"pricing.plans.weekly.period\", \"/week\"),\n      description: t(\"pricing.plans.weekly.description\", \"Perfect for short-term projects\"),\n      icon: <Zap className=\"w-6 h-6 text-yellow-500\" />,\n      features: [\n        t(\"pricing.features.unlimited_docs\", \"Unlimited document processing\"),\n        t(\"pricing.features.ai_analysis\", \"AI-powered analysis\"),\n        t(\"pricing.features.cloud_storage\", \"Cloud storage\"),\n        t(\"pricing.features.email_support\", \"Email support\"),\n      ],\n      popular: false,\n    },\n    {\n      id: \"monthly\",\n      name: t(\"pricing.plans.monthly.name\", \"Monthly\"),\n      price: \"9.98\",\n      period: t(\"pricing.plans.monthly.period\", \"/month\"),\n      description: t(\"pricing.plans.monthly.description\", \"Most popular choice for professionals\"),\n      icon: <Star className=\"w-6 h-6 text-blue-500\" />,\n      features: [\n        t(\"pricing.features.unlimited_docs\", \"Unlimited document processing\"),\n        t(\"pricing.features.ai_analysis\", \"AI-powered analysis\"),\n        t(\"pricing.features.cloud_storage\", \"Cloud storage\"),\n        t(\"pricing.features.priority_support\", \"Priority support\"),\n        t(\"pricing.features.advanced_analytics\", \"Advanced analytics\"),\n      ],\n      popular: true,\n    },\n    {\n      id: \"yearly\",\n      name: t(\"pricing.plans.yearly.name\", \"Yearly\"),\n      price: \"99.97\",\n      period: t(\"pricing.plans.yearly.period\", \"/year\"),\n      description: t(\"pricing.plans.yearly.description\", \"Best value for long-term users\"),\n      icon: <Crown className=\"w-6 h-6 text-purple-500\" />,\n      features: [\n        t(\"pricing.features.unlimited_docs\", \"Unlimited document processing\"),\n        t(\"pricing.features.ai_analysis\", \"AI-powered analysis\"),\n        t(\"pricing.features.cloud_storage\", \"Cloud storage\"),\n        t(\"pricing.features.priority_support\", \"Priority support\"),\n        t(\"pricing.features.advanced_analytics\", \"Advanced analytics\"),\n        t(\"pricing.features.api_access\", \"API access\"),\n        t(\"pricing.features.custom_integrations\", \"Custom integrations\"),\n      ],\n      popular: false,\n      savings: t(\"pricing.plans.yearly.savings\", \"Save 17%\"),\n    },\n  ];\n\n  const handlePlanSelect = (planId: string) => {\n    if (!isAuthenticated) {\n      window.location.href = \"/api/login\";\n      return;\n    }\n    \n    setSelectedPlan(planId);\n    createSubscriptionMutation.mutate(planId);\n  };\n\n  const handleSubscriptionSuccess = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/subscription/status\"] });\n    setSelectedPlan(null);\n    setClientSecret(\"\");\n    toast({\n      title: \"Success!\",\n      description: \"Your subscription has been activated.\",\n    });\n  };\n\n  if (authLoading || statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            {t(\"pricing.title\", \"Choose Your Plan\")}\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            {t(\"pricing.subtitle\", \"Start with a free 3-week trial, then choose the plan that fits your needs\")}\n          </p>\n\n          {/* Important Policy Notice */}\n          <div className=\"max-w-2xl mx-auto mb-8\">\n            <Alert className=\"border-destructive bg-destructive/10\">\n              <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n              <AlertDescription className=\"text-destructive font-medium\">\n                {t(\"pricing.no_refund_alert\", \"Important: All subscriptions are NON-REFUNDABLE. Please use the free trial period to evaluate the service.\")}\n              </AlertDescription>\n            </Alert>\n          </div>\n          \n          {/* Trial info */}\n          {subscriptionStatus?.user?.subscriptionStatus === \"trial\" && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 max-w-md mx-auto\">\n              <p className=\"text-blue-800 dark:text-blue-200\">\n                {t(\"pricing.trial_active\", \"Trial active until\")} {\" \"}\n                <span className=\"font-semibold\">\n                  {subscriptionStatus.user.trialEndsAt && \n                    new Date(subscriptionStatus.user.trialEndsAt).toLocaleDateString()\n                  }\n                </span>\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Security & Trust */}\n        <div className=\"flex justify-center items-center gap-6 mb-12 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"w-4 h-4 text-green-500\" />\n            {t(\"pricing.secure_payments\", \"Secure payments with Stripe\")}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n            {t(\"pricing.no_refunds\", \"No refunds policy\")}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-blue-500\" />\n            <Link href=\"/terms\" className=\"hover:underline\">\n              {t(\"pricing.view_terms\", \"View terms\")}\n            </Link>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {plans.map((plan) => (\n            <Card\n              key={plan.id}\n              className={`relative ${\n                plan.popular ? \"border-primary shadow-lg scale-105\" : \"\"\n              } ${\n                subscriptionStatus?.user?.subscriptionType === plan.id\n                  ? \"border-green-500 bg-green-50 dark:bg-green-900/20\"\n                  : \"\"\n              }`}\n            >\n              {plan.popular && (\n                <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary\">\n                  {t(\"pricing.popular\", \"Most Popular\")}\n                </Badge>\n              )}\n              \n              {plan.savings && (\n                <Badge className=\"absolute -top-3 right-4 bg-green-500\">\n                  {plan.savings}\n                </Badge>\n              )}\n\n              <CardHeader>\n                <div className=\"flex items-center justify-center mb-4\">\n                  {plan.icon}\n                </div>\n                <CardTitle className=\"text-2xl text-center\">{plan.name}</CardTitle>\n                <CardDescription className=\"text-center\">{plan.description}</CardDescription>\n                <div className=\"text-center mt-4\">\n                  <span className=\"text-4xl font-bold\">€{plan.price}</span>\n                  <span className=\"text-muted-foreground\">{plan.period}</span>\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center\">\n                      <Check className=\"w-5 h-5 text-green-500 mr-3 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n\n              <CardFooter>\n                {subscriptionStatus?.user?.subscriptionType === plan.id ? (\n                  <Button\n                    disabled\n                    className=\"w-full\"\n                    data-testid={`button-current-${plan.id}`}\n                  >\n                    {t(\"pricing.current_plan\", \"Current Plan\")}\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={() => handlePlanSelect(plan.id)}\n                    disabled={createSubscriptionMutation.isPending}\n                    className=\"w-full\"\n                    variant={plan.popular ? \"default\" : \"outline\"}\n                    data-testid={`button-select-${plan.id}`}\n                  >\n                    {createSubscriptionMutation.isPending && selectedPlan === plan.id\n                      ? t(\"pricing.processing\", \"Processing...\")\n                      : subscriptionStatus?.user?.subscriptionStatus === \"trial\"\n                      ? t(\"pricing.upgrade_from_trial\", \"Upgrade from Trial\")\n                      : t(\"pricing.select_plan\", \"Select Plan\")\n                    }\n                  </Button>\n                )}\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n\n        {/* Payment Form */}\n        {clientSecret && selectedPlan && (\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>{t(\"pricing.complete_payment\", \"Complete Your Payment\")}</CardTitle>\n              <CardDescription>\n                {!stripePromise \n                  ? t(\"pricing.stripe_not_configured\", \"Payment processing is not yet configured. Please contact support.\")\n                  : t(\"pricing.payment_description\", \"Enter your payment details to activate your subscription\")\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {stripePromise ? (\n                <Elements stripe={stripePromise} options={{ clientSecret }}>\n                  <SubscriptionForm\n                    priceType={selectedPlan}\n                    onSuccess={handleSubscriptionSuccess}\n                  />\n                </Elements>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground mb-4\">\n                    {t(\"pricing.stripe_setup_required\", \"Stripe configuration is required for payments.\")}\n                  </p>\n                  <Button onClick={() => setSelectedPlan(null)} variant=\"outline\">\n                    {t(\"pricing.back_to_plans\", \"Back to Plans\")}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Policies and Terms Section */}\n        <div className=\"mt-16 bg-muted/30 rounded-lg p-8\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold mb-4 flex items-center justify-center gap-2\">\n              <Shield className=\"w-6 h-6 text-blue-500\" />\n              {t(\"pricing.policies_title\", \"Payment Policies & Terms\")}\n            </h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              {t(\"pricing.policies_subtitle\", \"Important information about payments, cancellations, and refunds. Please read carefully before subscribing.\")}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {/* No Refund Policy */}\n            <Card className=\"border-destructive/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-destructive\">\n                  <AlertTriangle className=\"w-5 h-5\" />\n                  {t(\"pricing.no_refund_title\", \"No Refund Policy\")}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n                  <p className=\"font-semibold text-destructive text-sm mb-2\">\n                    {t(\"pricing.no_refund_main\", \"ALL PAYMENTS ARE NON-REFUNDABLE\")}\n                  </p>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• {t(\"pricing.no_refund_point1\", \"No refunds for any reason\")}</li>\n                    <li>• {t(\"pricing.no_refund_point2\", \"No partial refunds for unused time\")}</li>\n                    <li>• {t(\"pricing.no_refund_point3\", \"Trial period is provided for evaluation\")}</li>\n                  </ul>\n                </div>\n                <Button asChild variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <Link href=\"/terms\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    {t(\"pricing.read_full_terms\", \"Read Full Terms\")}\n                    <ExternalLink className=\"w-3 h-3 ml-2\" />\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Cancellation Policy */}\n            <Card className=\"border-blue-200 dark:border-blue-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-blue-600 dark:text-blue-400\">\n                  <Shield className=\"w-5 h-5\" />\n                  {t(\"pricing.cancellation_title\", \"Cancellation Policy\")}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                  <p className=\"font-semibold text-blue-800 dark:text-blue-200 text-sm mb-2\">\n                    {t(\"pricing.cancellation_main\", \"Cancel anytime, access until period ends\")}\n                  </p>\n                  <ul className=\"text-xs text-blue-700 dark:text-blue-300 space-y-1\">\n                    <li>• {t(\"pricing.cancellation_point1\", \"Cancel from your account settings\")}</li>\n                    <li>• {t(\"pricing.cancellation_point2\", \"Access continues until billing period ends\")}</li>\n                    <li>• {t(\"pricing.cancellation_point3\", \"No charges after cancellation\")}</li>\n                    <li>• {t(\"pricing.cancellation_point4\", \"Resubscribe anytime\")}</li>\n                  </ul>\n                </div>\n                {isAuthenticated && (\n                  <Button asChild variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    <Link href=\"/subscription\">\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      {t(\"pricing.manage_subscription\", \"Manage Subscription\")}\n                    </Link>\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Separator className=\"my-8\" />\n\n          {/* Security Information */}\n          <div className=\"text-center\">\n            <div className=\"flex justify-center items-center gap-8 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"w-4 h-4 text-green-500\" />\n                {t(\"pricing.ssl_encrypted\", \"SSL Encrypted\")}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-4 h-4 text-blue-500\" />\n                {t(\"pricing.stripe_powered\", \"Powered by Stripe\")}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"w-4 h-4 text-purple-500\" />\n                {t(\"pricing.gdpr_compliant\", \"GDPR Compliant\")}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"text-center mt-16\">\n          <h3 className=\"text-2xl font-bold mb-8\">{t(\"pricing.faq_title\", \"Frequently Asked Questions\")}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold mb-2\">{t(\"pricing.faq.trial_q\", \"What's included in the free trial?\")}</h4>\n              <p className=\"text-muted-foreground\">\n                {t(\"pricing.faq.trial_a\", \"Full access to all features for 3 weeks, no credit card required.\")}\n              </p>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold mb-2\">{t(\"pricing.faq.cancel_q\", \"Can I cancel anytime?\")}</h4>\n              <p className=\"text-muted-foreground\">\n                {t(\"pricing.faq.cancel_a\", \"Yes, you can cancel your subscription at any time from your account settings. Access continues until the end of your billing period.\")}\n              </p>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold mb-2 text-destructive\">{t(\"pricing.faq.refund_q\", \"Can I get a refund?\")}</h4>\n              <p className=\"text-muted-foreground\">\n                {t(\"pricing.faq.refund_a\", \"No, all payments are final and non-refundable. We offer a 3-week free trial to evaluate the service before payment.\")}\n              </p>\n            </div>\n            <div className=\"text-left\">\n              <h4 className=\"font-semibold mb-2\">{t(\"pricing.faq.secure_q\", \"Is my payment information secure?\")}</h4>\n              <p className=\"text-muted-foreground\">\n                {t(\"pricing.faq.secure_a\", \"Yes, all payments are processed securely through Stripe. We never store your credit card information.\")}\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":21513},"client/src/pages/scan.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { MobileNavigation } from \"@/components/MobileNavigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ScanPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: { name: string; originalName: string; mimeType: string; size: number; objectPath: string }) => {\n      const response = await apiRequest('POST', '/api/documents', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n      toast({\n        title: \"Succès\",\n        description: \"Document scanné et sauvegardé avec succès\",\n      });\n      setCapturedImage(null);\n      stopCamera();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la sauvegarde du document\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const startCamera = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({ \n        video: { \n          facingMode: 'environment', // Use back camera on mobile\n          width: { ideal: 1920 },\n          height: { ideal: 1080 }\n        } \n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n        setStream(mediaStream);\n        setIsScanning(true);\n      }\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'accéder à la caméra. Vérifiez les autorisations.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  const capturePhoto = () => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      \n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      \n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.drawImage(video, 0, 0);\n        const imageData = canvas.toDataURL('image/jpeg', 0.9);\n        setCapturedImage(imageData);\n        stopCamera();\n      }\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const saveDocument = async () => {\n    if (!capturedImage) return;\n\n    try {\n      // Get upload URL\n      const uploadResponse = await fetch('/api/documents/upload-url', {\n        method: 'POST',\n      });\n      const { uploadURL } = await uploadResponse.json();\n\n      // Convert base64 to blob\n      const base64Response = await fetch(capturedImage);\n      const blob = await base64Response.blob();\n\n      // Upload to object storage\n      await fetch(uploadURL, {\n        method: 'PUT',\n        body: blob,\n        headers: {\n          'Content-Type': 'image/jpeg',\n        },\n      });\n\n      // Save document metadata\n      await uploadMutation.mutateAsync({\n        name: `Document_Scanne_${new Date().toISOString().split('T')[0]}.jpg`,\n        originalName: `Document_Scanne_${Date.now()}.jpg`,\n        mimeType: 'image/jpeg',\n        size: blob.size,\n        objectPath: uploadURL,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la sauvegarde\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    startCamera();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-20 md:pb-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            {t('actions.scan.title')}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {t('actions.scan.description')}\n          </p>\n        </div>\n\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            {!isScanning && !capturedImage && (\n              <div className=\"text-center space-y-6\">\n                <div className=\"w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                  <i className=\"fas fa-camera text-primary text-3xl\" />\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <Button\n                    data-testid=\"button-start-camera\"\n                    onClick={startCamera}\n                    size=\"lg\"\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <i className=\"fas fa-camera mr-2\" />\n                    Démarrer la caméra\n                  </Button>\n                  \n                  <div className=\"text-muted-foreground\">ou</div>\n                  \n                  <Button\n                    data-testid=\"button-upload-file\"\n                    variant=\"outline\"\n                    onClick={() => fileInputRef.current?.click()}\n                    size=\"lg\"\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <i className=\"fas fa-upload mr-2\" />\n                    Choisir un fichier\n                  </Button>\n                  \n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n            )}\n\n            {isScanning && (\n              <div className=\"space-y-4\">\n                <div className=\"relative bg-black rounded-lg overflow-hidden\">\n                  <video\n                    ref={videoRef}\n                    autoPlay\n                    playsInline\n                    className=\"w-full h-auto max-h-96 object-contain\"\n                  />\n                  \n                  {/* Scan overlay */}\n                  <div className=\"absolute inset-0 border-2 border-primary/30 rounded-lg\">\n                    <div className=\"absolute top-4 left-4 w-6 h-6 border-l-2 border-t-2 border-primary\" />\n                    <div className=\"absolute top-4 right-4 w-6 h-6 border-r-2 border-t-2 border-primary\" />\n                    <div className=\"absolute bottom-4 left-4 w-6 h-6 border-l-2 border-b-2 border-primary\" />\n                    <div className=\"absolute bottom-4 right-4 w-6 h-6 border-r-2 border-b-2 border-primary\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-center space-x-4\">\n                  <Button\n                    data-testid=\"button-capture-photo\"\n                    onClick={capturePhoto}\n                    size=\"lg\"\n                  >\n                    <i className=\"fas fa-camera mr-2\" />\n                    Capturer\n                  </Button>\n                  <Button\n                    data-testid=\"button-stop-camera\"\n                    variant=\"outline\"\n                    onClick={stopCamera}\n                    size=\"lg\"\n                  >\n                    <i className=\"fas fa-times mr-2\" />\n                    Annuler\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {capturedImage && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-black rounded-lg overflow-hidden\">\n                  <img\n                    src={capturedImage}\n                    alt=\"Document scanné\"\n                    className=\"w-full h-auto max-h-96 object-contain\"\n                  />\n                </div>\n                \n                <div className=\"flex justify-center space-x-4\">\n                  <Button\n                    data-testid=\"button-save-document\"\n                    onClick={saveDocument}\n                    disabled={uploadMutation.isPending}\n                    size=\"lg\"\n                  >\n                    {uploadMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\" />\n                        Sauvegarde...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-save mr-2\" />\n                        Sauvegarder\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    data-testid=\"button-retake-photo\"\n                    variant=\"outline\"\n                    onClick={retakePhoto}\n                    size=\"lg\"\n                  >\n                    <i className=\"fas fa-redo mr-2\" />\n                    Reprendre\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Hidden canvas for photo capture */}\n        <canvas ref={canvasRef} className=\"hidden\" />\n\n        {/* Tips */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-foreground mb-4\">\n              <i className=\"fas fa-lightbulb mr-2\" />\n              Conseils pour un scan optimal\n            </h3>\n            <ul className=\"text-sm text-muted-foreground space-y-2\">\n              <li className=\"flex items-start\">\n                <i className=\"fas fa-check text-accent mr-2 mt-0.5 text-xs\" />\n                Assurez-vous que le document est bien éclairé\n              </li>\n              <li className=\"flex items-start\">\n                <i className=\"fas fa-check text-accent mr-2 mt-0.5 text-xs\" />\n                Placez le document sur une surface plane\n              </li>\n              <li className=\"flex items-start\">\n                <i className=\"fas fa-check text-accent mr-2 mt-0.5 text-xs\" />\n                Évitez les ombres et les reflets\n              </li>\n              <li className=\"flex items-start\">\n                <i className=\"fas fa-check text-accent mr-2 mt-0.5 text-xs\" />\n                Centrez le document dans le cadre\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n      </main>\n\n      <MobileNavigation />\n    </div>\n  );\n}\n","size_bytes":11248},"client/src/pages/subscription-success.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function SubscriptionSuccessPage() {\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    // Invalidate subscription status to refresh data\n    queryClient.invalidateQueries({ queryKey: [\"/api/subscription/status\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md text-center\">\n        <CardHeader>\n          <div className=\"flex justify-center mb-4\">\n            <CheckCircle className=\"w-16 h-16 text-green-500\" />\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {t(\"subscription_success.title\", \"Payment Successful!\")}\n          </CardTitle>\n          <CardDescription>\n            {t(\"subscription_success.subtitle\", \"Your subscription has been activated\")}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">\n            {t(\"subscription_success.description\", \"Thank you for subscribing to AdminIA. You now have full access to all premium features.\")}\n          </p>\n          <div className=\"flex flex-col gap-3\">\n            <Button asChild className=\"w-full\" data-testid=\"button-dashboard\">\n              <Link href=\"/\">\n                {t(\"subscription_success.go_to_dashboard\", \"Go to Dashboard\")}\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"w-full\" data-testid=\"button-subscription\">\n              <Link href=\"/subscription\">\n                {t(\"subscription_success.manage_subscription\", \"Manage Subscription\")}\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2159},"client/src/pages/subscription.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, CreditCard, AlertCircle, CheckCircle, XCircle, ExternalLink, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { User, Subscription } from \"@shared/schema\";\nimport { useState } from \"react\";\n\n// Type definitions for API responses\ninterface SubscriptionStatusResponse {\n  user: {\n    subscriptionStatus: string;\n    subscriptionType?: string;\n    trialEndsAt?: string;\n    email?: string;\n    firstName?: string;\n    lastName?: string;\n    createdAt?: string;\n  };\n  subscription?: Subscription;\n}\n\nexport default function SubscriptionPage() {\n  const { t } = useTranslation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n\n  // Get subscription status\n  const { data: subscriptionData, isLoading: statusLoading, refetch } = useQuery<SubscriptionStatusResponse>({\n    queryKey: [\"/api/subscription/status\"],\n    enabled: isAuthenticated,\n  });\n\n  // Cancel subscription mutation\n  const cancelSubscriptionMutation = useMutation<{ message: string }, any>({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/subscription/cancel\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"subscription.cancel_success_title\", \"Subscription Canceled\"),\n        description: t(\"subscription.cancel_success_desc\", \"Your subscription has been canceled successfully.\"),\n      });\n      refetch();\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"subscription.cancel_error_title\", \"Error\"),\n        description: error.message || t(\"subscription.cancel_error_desc\", \"Failed to cancel subscription\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCancelSubscription = () => {\n    setShowCancelDialog(false);\n    cancelSubscriptionMutation.mutate();\n  };\n\n  if (authLoading || statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <Card className=\"w-96\">\n            <CardHeader>\n              <CardTitle>{t(\"subscription.auth_required\", \"Authentication Required\")}</CardTitle>\n              <CardDescription>\n                {t(\"subscription.auth_desc\", \"Please log in to view your subscription details.\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button asChild className=\"w-full\">\n                <a href=\"/api/login\">{t(\"subscription.login\", \"Log In\")}</a>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const { user: subscriptionUser, subscription } = subscriptionData || {};\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"trial\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"canceled\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"trial\":\n        return <Calendar className=\"w-4 h-4\" />;\n      case \"canceled\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string | Date) => {\n    return new Date(dateString).toLocaleDateString(undefined, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const isTrialExpiring = subscriptionUser?.subscriptionStatus === \"trial\" && \n    subscriptionUser?.trialEndsAt && \n    new Date(subscriptionUser.trialEndsAt).getTime() - new Date().getTime() < 7 * 24 * 60 * 60 * 1000; // 7 days\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            {t(\"subscription.title\", \"Subscription Management\")}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {t(\"subscription.subtitle\", \"Manage your AdminIA subscription and billing details\")}\n          </p>\n        </div>\n\n        {/* Trial expiring warning */}\n        {isTrialExpiring && (\n          <Alert className=\"mb-6 border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20\">\n            <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n            <AlertDescription className=\"text-yellow-800 dark:text-yellow-200\">\n              {t(\"subscription.trial_expiring\", \"Your trial expires on\")} {\" \"}\n              {subscriptionUser?.trialEndsAt && formatDate(subscriptionUser.trialEndsAt)}.{\" \"}\n              <Link href=\"/pricing\" className=\"font-semibold underline\">\n                {t(\"subscription.upgrade_now\", \"Upgrade now\")}\n              </Link>{\" \"}\n              {t(\"subscription.trial_expiring_desc\", \"to continue using AdminIA.\")}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Current Plan */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  {t(\"subscription.current_plan\", \"Current Plan\")}\n                </CardTitle>\n                <Badge className={getStatusColor(subscriptionUser?.subscriptionStatus || \"inactive\")}>\n                  <div className=\"flex items-center gap-1\">\n                    {getStatusIcon(subscriptionUser?.subscriptionStatus || \"inactive\")}\n                    <span className=\"capitalize\">\n                      {t(`subscription.status.${subscriptionUser?.subscriptionStatus || \"inactive\"}`, subscriptionUser?.subscriptionStatus || \"inactive\")}\n                    </span>\n                  </div>\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {subscriptionUser?.subscriptionStatus === \"trial\" ? (\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {t(\"subscription.free_trial\", \"Free Trial\")}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {t(\"subscription.trial_description\", \"Full access to all features\")}\n                  </p>\n                  {subscriptionUser?.trialEndsAt && (\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      {t(\"subscription.expires\", \"Expires\")}: {formatDate(subscriptionUser.trialEndsAt)}\n                    </p>\n                  )}\n                </div>\n              ) : subscriptionUser?.subscriptionType ? (\n                <div>\n                  <h3 className=\"font-semibold text-lg capitalize\">\n                    {t(`pricing.plans.${subscriptionUser.subscriptionType}.name`, subscriptionUser.subscriptionType)}\n                  </h3>\n                  <p className=\"text-2xl font-bold\">\n                    €{subscriptionUser.subscriptionType === \"weekly\" ? \"3\" : subscriptionUser.subscriptionType === \"monthly\" ? \"10\" : \"100\"}\n                    <span className=\"text-sm font-normal text-muted-foreground\">\n                      {subscriptionUser.subscriptionType === \"weekly\" ? \"/week\" : subscriptionUser.subscriptionType === \"monthly\" ? \"/month\" : \"/year\"}\n                    </span>\n                  </p>\n                  {subscription?.currentPeriodEnd && (\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      {subscription.status === \"canceled\" \n                        ? t(\"subscription.ends\", \"Ends\")\n                        : t(\"subscription.renews\", \"Renews\")\n                      }: {formatDate(subscription.currentPeriodEnd)}\n                    </p>\n                  )}\n                </div>\n              ) : (\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {t(\"subscription.no_subscription\", \"No Active Subscription\")}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {t(\"subscription.no_subscription_desc\", \"Choose a plan to get started\")}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                {subscriptionUser?.subscriptionStatus === \"trial\" || !subscriptionUser?.subscriptionType ? (\n                  <Button asChild className=\"flex-1\" data-testid=\"button-upgrade\">\n                    <Link href=\"/pricing\">\n                      {t(\"subscription.choose_plan\", \"Choose a Plan\")}\n                    </Link>\n                  </Button>\n                ) : (\n                  <>\n                    <Button asChild variant=\"outline\" className=\"flex-1\" data-testid=\"button-change-plan\">\n                      <Link href=\"/pricing\">\n                        {t(\"subscription.change_plan\", \"Change Plan\")}\n                      </Link>\n                    </Button>\n                    {subscriptionUser?.subscriptionStatus === \"active\" && (\n                      <AlertDialog open={showCancelDialog} onOpenChange={setShowCancelDialog}>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"destructive\"\n                            disabled={cancelSubscriptionMutation.isPending}\n                            data-testid=\"button-cancel\"\n                          >\n                            {cancelSubscriptionMutation.isPending\n                              ? t(\"subscription.canceling\", \"Canceling...\")\n                              : t(\"subscription.cancel\", \"Cancel\")\n                            }\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent className=\"max-w-md\">\n                          <AlertDialogHeader>\n                            <AlertDialogTitle className=\"flex items-center gap-2\">\n                              <AlertCircle className=\"w-5 h-5 text-destructive\" />\n                              {t(\"subscription.cancel_title\", \"Cancel Subscription?\")}\n                            </AlertDialogTitle>\n                            <AlertDialogDescription className=\"space-y-3\">\n                              <p>\n                                {t(\"subscription.cancel_warning\", \"Are you sure you want to cancel your subscription? This action cannot be undone.\")}\n                              </p>\n                              \n                              <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-3\">\n                                <h4 className=\"font-semibold text-destructive text-sm mb-1\">\n                                  {t(\"subscription.cancel_effects_title\", \"What happens when you cancel:\")}\n                                </h4>\n                                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                                  <li>• {t(\"subscription.cancel_effect1\", \"Your access continues until the end of the current billing period\")}</li>\n                                  <li>• {t(\"subscription.cancel_effect2\", \"No refund will be provided for the remaining period\")}</li>\n                                  <li>• {t(\"subscription.cancel_effect3\", \"You can resubscribe at any time\")}</li>\n                                </ul>\n                              </div>\n                              \n                              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                                <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                                  {t(\"subscription.cancel_policy\", \"By canceling, you acknowledge our\")}{\" \"}\n                                  <Link href=\"/terms\" className=\"font-semibold underline\">\n                                    {t(\"subscription.no_refund_policy\", \"no-refund policy\")}\n                                  </Link>\n                                  {t(\"subscription.cancel_policy_end\", \". All payments are final and non-refundable.\")}\n                                </p>\n                              </div>\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel data-testid=\"button-cancel-keep\">\n                              {t(\"subscription.keep_subscription\", \"Keep Subscription\")}\n                            </AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={handleCancelSubscription}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              data-testid=\"button-cancel-confirm\"\n                            >\n                              {t(\"subscription.confirm_cancel\", \"Yes, Cancel\")}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"subscription.account_info\", \"Account Information\")}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">\n                  {t(\"subscription.email\", \"Email\")}\n                </label>\n                <p className=\"text-foreground\" data-testid=\"text-user-email\">\n                  {subscriptionData?.user?.email || t(\"subscription.no_email\", \"No email provided\")}\n                </p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">\n                  {t(\"subscription.name\", \"Name\")}\n                </label>\n                <p className=\"text-foreground\" data-testid=\"text-user-name\">\n                  {subscriptionData?.user?.firstName || subscriptionData?.user?.lastName \n                    ? `${subscriptionData.user.firstName || \"\"} ${subscriptionData.user.lastName || \"\"}`.trim()\n                    : t(\"subscription.no_name\", \"No name provided\")\n                  }\n                </p>\n              </div>\n\n              {subscriptionData?.user?.createdAt && (\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">\n                    {t(\"subscription.member_since\", \"Member since\")}\n                  </label>\n                  <p className=\"text-foreground\" data-testid=\"text-user-created\">\n                    {formatDate(subscriptionData.user.createdAt)}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Usage Statistics */}\n        {subscriptionUser?.subscriptionStatus === \"active\" && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle>{t(\"subscription.usage_stats\", \"Usage Statistics\")}</CardTitle>\n              <CardDescription>\n                {t(\"subscription.usage_desc\", \"Your document processing activity\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">∞</div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"subscription.unlimited_docs\", \"Unlimited Documents\")}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">✓</div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"subscription.ai_analysis\", \"AI Analysis\")}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">☁</div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"subscription.cloud_storage\", \"Cloud Storage\")}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Terms and Policies */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5\" />\n              {t(\"subscription.terms_policies\", \"Terms & Policies\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t(\"subscription.no_refund_notice\", \"Important: All subscriptions are non-refundable. Please review our terms before making any changes.\")}\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Button variant=\"outline\" asChild className=\"h-auto p-4 justify-start\" data-testid=\"button-terms\">\n                  <Link href=\"/terms\">\n                    <div className=\"text-left\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <FileText className=\"w-4 h-4\" />\n                        {t(\"subscription.view_terms\", \"Terms of Service\")}\n                        <ExternalLink className=\"w-3 h-3\" />\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {t(\"subscription.terms_desc\", \"View our complete terms and conditions\")}\n                      </p>\n                    </div>\n                  </Link>\n                </Button>\n                \n                <Button variant=\"outline\" asChild className=\"h-auto p-4 justify-start\" data-testid=\"button-privacy\">\n                  <Link href=\"/privacy\">\n                    <div className=\"text-left\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        {t(\"subscription.privacy_policy\", \"Privacy Policy\")}\n                        <ExternalLink className=\"w-3 h-3\" />\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {t(\"subscription.privacy_desc\", \"How we protect your data\")}\n                      </p>\n                    </div>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Help Section */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>{t(\"subscription.help\", \"Need Help?\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              {t(\"subscription.help_desc\", \"If you have any questions about your subscription, please don't hesitate to contact us.\")}\n            </p>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" asChild data-testid=\"button-support\">\n                <a href=\"mailto:support@adminia.app\">\n                  {t(\"subscription.contact_support\", \"Contact Support\")}\n                </a>\n              </Button>\n              <Button variant=\"outline\" asChild data-testid=\"button-docs\">\n                <Link href=\"/terms\">\n                  {t(\"subscription.view_docs\", \"View Documentation\")}\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":21863},"mobile/src/constants/api.ts":{"content":"// API configuration for mobile app\nexport const API_CONFIG = {\n  // Use localhost for development - this will need to be updated for production\n  BASE_URL: __DEV__ ? 'http://localhost:3000' : 'https://your-production-url.com',\n  TIMEOUT: 10000,\n};\n\nexport const API_ENDPOINTS = {\n  // Auth endpoints\n  AUTH: '/api/auth/user',\n  LOGIN: '/api/login',\n  LOGOUT: '/api/logout',\n  \n  // Documents endpoints\n  DOCUMENTS: '/api/documents',\n  DOCUMENTS_UPLOAD_URL: '/api/documents/upload-url',\n  DOCUMENTS_ANALYZE: (id: string) => `/api/documents/${id}/analyze`,\n  \n  // Categories endpoints\n  CATEGORIES: '/api/categories',\n  \n  // Statistics endpoints\n  STATISTICS: '/api/statistics',\n  AI_QUEUE: '/api/ai-queue',\n  \n  // Subscription endpoints\n  SUBSCRIPTION_STATUS: '/api/subscription/status',\n  SUBSCRIPTION_CREATE: '/api/subscription/create',\n  SUBSCRIPTION_CANCEL: '/api/subscription/cancel',\n} as const;","size_bytes":904},"mobile/src/constants/theme.ts":{"content":"// Theme constants for React Native Paper and consistent styling\nexport const colors = {\n  primary: '#3b82f6',\n  primaryContainer: '#dbeafe',\n  secondary: '#6b7280',\n  secondaryContainer: '#f3f4f6',\n  tertiary: '#10b981',\n  tertiaryContainer: '#d1fae5',\n  surface: '#ffffff',\n  surfaceVariant: '#f8fafc',\n  background: '#ffffff',\n  error: '#ef4444',\n  errorContainer: '#fee2e2',\n  onPrimary: '#ffffff',\n  onPrimaryContainer: '#1e40af',\n  onSecondary: '#ffffff',\n  onSecondaryContainer: '#374151',\n  onTertiary: '#ffffff',\n  onTertiaryContainer: '#065f46',\n  onSurface: '#111827',\n  onSurfaceVariant: '#64748b',\n  onBackground: '#111827',\n  onError: '#ffffff',\n  onErrorContainer: '#991b1b',\n  outline: '#d1d5db',\n  outlineVariant: '#e5e7eb',\n  shadow: '#000000',\n  scrim: '#000000',\n  inverseSurface: '#1f2937',\n  inverseOnSurface: '#f9fafb',\n  inversePrimary: '#93c5fd',\n  elevation: {\n    level0: 'transparent',\n    level1: '#ffffff',\n    level2: '#ffffff',\n    level3: '#ffffff',\n    level4: '#ffffff',\n    level5: '#ffffff',\n  },\n};\n\nexport const spacing = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  xxl: 48,\n};\n\nexport const borderRadius = {\n  sm: 4,\n  md: 8,\n  lg: 12,\n  xl: 16,\n  xxl: 24,\n  full: 9999,\n};\n\nexport const typography = {\n  headlineLarge: {\n    fontSize: 32,\n    lineHeight: 40,\n    fontWeight: 'bold' as 'bold',\n  },\n  headlineMedium: {\n    fontSize: 28,\n    lineHeight: 36,\n    fontWeight: 'bold' as 'bold',\n  },\n  headlineSmall: {\n    fontSize: 24,\n    lineHeight: 32,\n    fontWeight: '600' as '600',\n  },\n  titleLarge: {\n    fontSize: 20,\n    lineHeight: 28,\n    fontWeight: '600' as '600',\n  },\n  titleMedium: {\n    fontSize: 18,\n    lineHeight: 24,\n    fontWeight: '600' as '600',\n  },\n  titleSmall: {\n    fontSize: 16,\n    lineHeight: 24,\n    fontWeight: '500' as '500',\n  },\n  labelLarge: {\n    fontSize: 14,\n    lineHeight: 20,\n    fontWeight: '500' as '500',\n  },\n  labelMedium: {\n    fontSize: 12,\n    lineHeight: 16,\n    fontWeight: '500' as '500',\n  },\n  labelSmall: {\n    fontSize: 10,\n    lineHeight: 16,\n    fontWeight: '500' as '500',\n  },\n  bodyLarge: {\n    fontSize: 16,\n    lineHeight: 24,\n    fontWeight: 'normal' as 'normal',\n  },\n  bodyMedium: {\n    fontSize: 14,\n    lineHeight: 20,\n    fontWeight: 'normal' as 'normal',\n  },\n  bodySmall: {\n    fontSize: 12,\n    lineHeight: 16,\n    fontWeight: 'normal' as 'normal',\n  },\n};\n\nexport const theme = {\n  colors,\n  spacing,\n  borderRadius,\n  typography,\n} as const;","size_bytes":2464},"mobile/src/hooks/useApi.ts":{"content":"import { useQuery, useMutation, useQueryClient, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';\nimport { apiClient, ApiError } from '@/services/apiClient';\n\n// Custom hook for GET requests\nexport function useApiQuery<TData = unknown, TError = ApiError>(\n  queryKey: (string | number)[],\n  endpoint: string,\n  options?: Omit<UseQueryOptions<TData, TError>, 'queryKey' | 'queryFn'>\n) {\n  return useQuery<TData, TError>({\n    queryKey,\n    queryFn: () => apiClient.get<TData>(endpoint),\n    ...options,\n  });\n}\n\n// Custom hook for POST/PUT/DELETE requests\nexport function useApiMutation<TData = unknown, TVariables = unknown, TError = ApiError>(\n  mutationFn: (variables: TVariables) => Promise<TData>,\n  options?: UseMutationOptions<TData, TError, TVariables>\n) {\n  const queryClient = useQueryClient();\n  \n  return useMutation<TData, TError, TVariables>({\n    mutationFn,\n    ...options,\n    onSuccess: (data, variables, context) => {\n      // Call the original onSuccess if provided\n      options?.onSuccess?.(data, variables, context);\n      \n      // You can add global success handling here\n    },\n    onError: (error, variables, context) => {\n      // Call the original onError if provided\n      options?.onError?.(error, variables, context);\n      \n      // You can add global error handling here\n      console.error('API Mutation Error:', error);\n    },\n  });\n}\n\n// Convenience hooks for common operations\nexport function useCreateMutation<TData = unknown, TVariables = unknown>(\n  endpoint: string,\n  options?: UseMutationOptions<TData, ApiError, TVariables>\n) {\n  return useApiMutation(\n    (data: TVariables) => apiClient.post<TData>(endpoint, data),\n    options\n  );\n}\n\nexport function useUpdateMutation<TData = unknown, TVariables = unknown>(\n  endpoint: string,\n  options?: UseMutationOptions<TData, ApiError, TVariables>\n) {\n  return useApiMutation(\n    (data: TVariables) => apiClient.put<TData>(endpoint, data),\n    options\n  );\n}\n\nexport function useDeleteMutation<TData = unknown>(\n  endpoint: string,\n  options?: UseMutationOptions<TData, ApiError, void>\n) {\n  return useApiMutation(\n    () => apiClient.delete<TData>(endpoint),\n    options\n  );\n}","size_bytes":2185},"mobile/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useApiQuery, useApiMutation } from '@/hooks/useApi';\nimport { API_ENDPOINTS } from '@/constants/api';\nimport { authService } from '@/services/authService';\nimport type { User } from '@shared/schema';\n\ninterface AuthUser extends User {\n  isAuthenticated: boolean;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  // Get current user\n  const {\n    data: user,\n    isLoading,\n    error,\n    refetch,\n  } = useApiQuery<User>(['auth', 'user'], API_ENDPOINTS.AUTH, {\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n  });\n\n  // Login mutation using the auth service\n  const loginMutation = useApiMutation<boolean, void>(\n    async () => {\n      const success = await authService.login();\n      if (success) {\n        // Refresh user data after successful login\n        await refetch();\n      }\n      return success;\n    },\n    {\n      onSuccess: (success) => {\n        if (success) {\n          queryClient.invalidateQueries({ queryKey: ['auth'] });\n        }\n      },\n      onError: (error) => {\n        console.error('Login failed:', error);\n      },\n    }\n  );\n\n  // Logout mutation using the auth service\n  const logoutMutation = useApiMutation<void, void>(\n    async () => {\n      await authService.logout();\n    },\n    {\n      onSuccess: () => {\n        queryClient.clear(); // Clear all cached data\n      },\n      onError: (error) => {\n        console.error('Logout failed:', error);\n        // Clear cache anyway\n        queryClient.clear();\n      },\n    }\n  );\n\n  // Check authentication status\n  const checkAuthStatus = async () => {\n    try {\n      const isAuth = await authService.isAuthenticated();\n      if (!isAuth) {\n        queryClient.clear();\n      }\n      return isAuth;\n    } catch (error) {\n      console.error('Auth status check failed:', error);\n      return false;\n    }\n  };\n\n  const isAuthenticated = !!user && !error;\n\n  return {\n    user: user as AuthUser | undefined,\n    isAuthenticated,\n    isLoading,\n    error,\n    login: loginMutation.mutate,\n    logout: logoutMutation.mutate,\n    isLoggingIn: loginMutation.isPending,\n    isLoggingOut: logoutMutation.isPending,\n    checkAuthStatus,\n    refetch,\n  };\n}","size_bytes":2313},"mobile/src/navigation/AuthStack.tsx":{"content":"import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { LandingScreen } from '@/screens/LandingScreen';\nimport { LoginScreen } from '@/screens/LoginScreen';\nimport type { AuthStackParamList } from './types';\n\nconst Stack = createNativeStackNavigator<AuthStackParamList>();\n\nexport function AuthStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        animation: 'slide_from_right',\n      }}\n    >\n      <Stack.Screen name=\"Landing\" component={LandingScreen} />\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n    </Stack.Navigator>\n  );\n}","size_bytes":651},"mobile/src/navigation/CameraStack.tsx":{"content":"import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { CameraScreen } from '@/screens/CameraScreen';\nimport { CameraPreviewScreen } from '@/screens/CameraPreviewScreen';\nimport type { CameraStackParamList } from './types';\n\nconst Stack = createNativeStackNavigator<CameraStackParamList>();\n\nexport function CameraStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        animation: 'slide_from_bottom',\n        presentation: 'fullScreenModal',\n      }}\n    >\n      <Stack.Screen name=\"CameraView\" component={CameraScreen} />\n      <Stack.Screen \n        name=\"CameraPreview\" \n        component={CameraPreviewScreen}\n        options={{\n          animation: 'slide_from_right',\n        }}\n      />\n    </Stack.Navigator>\n  );\n}","size_bytes":826},"mobile/src/navigation/MainTabNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardScreen } from '@/screens/DashboardScreen';\nimport { DocumentsScreen } from '@/screens/DocumentsScreen';\nimport { ScanScreen } from '@/screens/ScanScreen';\nimport { SettingsScreen } from '@/screens/SettingsScreen';\nimport { colors } from '@/constants/theme';\nimport type { MainTabParamList } from './types';\n\nconst Tab = createBottomTabNavigator<MainTabParamList>();\n\nexport function MainTabNavigator() {\n  const { t } = useTranslation();\n\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        headerShown: false,\n        tabBarActiveTintColor: colors.primary,\n        tabBarInactiveTintColor: colors.secondary,\n        tabBarStyle: {\n          backgroundColor: colors.surface,\n          borderTopColor: colors.outline,\n          borderTopWidth: 1,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500',\n        },\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName: keyof typeof MaterialIcons.glyphMap;\n\n          switch (route.name) {\n            case 'Dashboard':\n              iconName = 'dashboard';\n              break;\n            case 'Documents':\n              iconName = 'folder';\n              break;\n            case 'Scan':\n              iconName = 'camera-alt';\n              break;\n            case 'Settings':\n              iconName = 'settings';\n              break;\n            default:\n              iconName = 'help';\n          }\n\n          return <MaterialIcons name={iconName} size={size} color={color} />;\n        },\n      })}\n    >\n      <Tab.Screen \n        name=\"Dashboard\" \n        component={DashboardScreen}\n        options={{\n          tabBarLabel: t('mobile.home'),\n        }}\n      />\n      <Tab.Screen \n        name=\"Documents\" \n        component={DocumentsScreen}\n        options={{\n          tabBarLabel: t('mobile.documents'),\n        }}\n      />\n      <Tab.Screen \n        name=\"Scan\" \n        component={ScanScreen}\n        options={{\n          tabBarLabel: t('mobile.scan'),\n        }}\n      />\n      <Tab.Screen \n        name=\"Settings\" \n        component={SettingsScreen}\n        options={{\n          tabBarLabel: t('mobile.settings'),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}","size_bytes":2501},"mobile/src/navigation/RootNavigator.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useAuth } from '@/hooks/useAuth';\nimport { AuthStack } from './AuthStack';\nimport { MainTabNavigator } from './MainTabNavigator';\nimport { CameraStack } from './CameraStack';\nimport { DocumentDetailScreen } from '@/screens/DocumentDetailScreen';\nimport { PricingScreen } from '@/screens/PricingScreen';\nimport { SubscriptionScreen } from '@/screens/SubscriptionScreen';\nimport { LoadingScreen } from '@/screens/LoadingScreen';\nimport type { RootStackParamList } from './types';\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nexport function RootNavigator() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerShown: false,\n          animation: 'slide_from_right',\n        }}\n      >\n        {!isAuthenticated ? (\n          // Auth stack for non-authenticated users\n          <Stack.Screen name=\"AuthStack\" component={AuthStack} />\n        ) : (\n          // Main app stack for authenticated users\n          <>\n            <Stack.Screen name=\"MainTab\" component={MainTabNavigator} />\n            <Stack.Screen \n              name=\"DocumentDetail\" \n              component={DocumentDetailScreen}\n              options={{\n                presentation: 'modal',\n                animation: 'slide_from_bottom',\n              }}\n            />\n            <Stack.Screen \n              name=\"CameraStack\" \n              component={CameraStack}\n              options={{\n                presentation: 'fullScreenModal',\n                animation: 'slide_from_bottom',\n              }}\n            />\n            <Stack.Screen \n              name=\"PricingStack\" \n              component={PricingScreen}\n              options={{\n                presentation: 'modal',\n                animation: 'slide_from_bottom',\n              }}\n            />\n            <Stack.Screen \n              name=\"SubscriptionStack\" \n              component={SubscriptionScreen}\n              options={{\n                presentation: 'modal',\n                animation: 'slide_from_bottom',\n              }}\n            />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}","size_bytes":2430},"mobile/src/navigation/index.ts":{"content":"export { RootNavigator } from './RootNavigator';\nexport { AuthStack } from './AuthStack';\nexport { MainTabNavigator } from './MainTabNavigator';\nexport { CameraStack } from './CameraStack';\nexport * from './types';","size_bytes":214},"mobile/src/navigation/types.ts":{"content":"import type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';\nimport type { CompositeScreenProps } from '@react-navigation/native';\n\n// Define navigation param lists\nexport type RootStackParamList = {\n  AuthStack: undefined;\n  MainTab: undefined;\n  DocumentDetail: { documentId: string };\n  CameraStack: undefined;\n  PricingStack: undefined;\n  SubscriptionStack: undefined;\n};\n\nexport type AuthStackParamList = {\n  Landing: undefined;\n  Login: undefined;\n};\n\nexport type MainTabParamList = {\n  Dashboard: undefined;\n  Documents: undefined;\n  Scan: undefined;\n  Settings: undefined;\n};\n\nexport type CameraStackParamList = {\n  CameraView: undefined;\n  CameraPreview: { imageUri: string };\n};\n\nexport type PricingStackParamList = {\n  Pricing: undefined;\n  SubscriptionSuccess: undefined;\n};\n\nexport type SubscriptionStackParamList = {\n  Subscription: undefined;\n  SubscriptionManagement: undefined;\n};\n\n// Screen props types\nexport type RootStackScreenProps<T extends keyof RootStackParamList> = \n  NativeStackScreenProps<RootStackParamList, T>;\n\nexport type AuthStackScreenProps<T extends keyof AuthStackParamList> = \n  CompositeScreenProps<\n    NativeStackScreenProps<AuthStackParamList, T>,\n    RootStackScreenProps<keyof RootStackParamList>\n  >;\n\nexport type MainTabScreenProps<T extends keyof MainTabParamList> = \n  CompositeScreenProps<\n    BottomTabScreenProps<MainTabParamList, T>,\n    RootStackScreenProps<keyof RootStackParamList>\n  >;\n\nexport type CameraStackScreenProps<T extends keyof CameraStackParamList> = \n  CompositeScreenProps<\n    NativeStackScreenProps<CameraStackParamList, T>,\n    RootStackScreenProps<keyof RootStackParamList>\n  >;\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}","size_bytes":1855},"mobile/src/screens/CameraPreviewScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, StyleSheet, Image, Dimensions } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { \n  Button, \n  Header, \n  Text, \n  Card, \n  LoadingSpinner, \n  Toast \n} from '@/components/ui';\nimport { cameraService } from '@/services/cameraService';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { CameraStackScreenProps } from '@/navigation/types';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\nexport function CameraPreviewScreen({ navigation, route }: CameraStackScreenProps<'CameraPreview'>) {\n  const { t } = useTranslation();\n  const { imageUri } = route.params;\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showError, setShowError] = useState(false);\n\n  const handleSave = async () => {\n    try {\n      setIsProcessing(true);\n      setError(null);\n      \n      // Copy image to app directory\n      const localUri = await cameraService.copyToAppDirectory(imageUri);\n      \n      // Validate the image\n      const validation = await cameraService.validateImageFile(localUri);\n      if (!validation.valid) {\n        throw new Error(validation.error || 'Invalid image file');\n      }\n\n      // Here you would typically:\n      // 1. Upload to object storage\n      // 2. Create document record in database\n      // 3. Queue for AI processing\n      console.log('Document saved:', localUri);\n      \n      // Navigate back to documents or show success\n      navigation.navigate('MainTab', { screen: 'Documents' });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to save document';\n      setError(errorMessage);\n      setShowError(true);\n      console.error('Save error:', err);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRetake = () => {\n    navigation.goBack();\n  };\n\n  const handleClose = () => {\n    navigation.navigate('MainTab', { screen: 'Scan' });\n  };\n\n  if (isProcessing) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Header \n          title=\"Processing Document\" \n          showBack \n          onBack={handleClose}\n        />\n        <LoadingSpinner text=\"Saving document...\" />\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header \n        title=\"Preview Document\" \n        showBack \n        onBack={handleClose}\n      />\n      \n      <View style={styles.content}>\n        <Card style={styles.imageCard}>\n          <Image \n            source={{ uri: imageUri }} \n            style={styles.image}\n            resizeMode=\"contain\"\n          />\n        </Card>\n        \n        <View style={styles.info}>\n          <Text style={styles.infoTitle}>Document Preview</Text>\n          <Text style={styles.infoText}>\n            Review your scanned document. Make sure the text is clear and readable.\n          </Text>\n        </View>\n        \n        <View style={styles.actions}>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            fullWidth\n            onPress={handleRetake}\n            disabled={isProcessing}\n            style={styles.actionButton}\n          >\n            Retake Photo\n          </Button>\n          \n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            fullWidth\n            onPress={handleSave}\n            disabled={isProcessing}\n            style={styles.actionButton}\n          >\n            {t('button.save')} Document\n          </Button>\n        </View>\n      </View>\n\n      <Toast\n        visible={showError}\n        message={error || 'An error occurred'}\n        type=\"error\"\n        onDismiss={() => setShowError(false)}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n  },\n  imageCard: {\n    flex: 1,\n    backgroundColor: colors.surface,\n    marginBottom: spacing.lg,\n    padding: spacing.sm,\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n    borderRadius: 8,\n  },\n  info: {\n    marginBottom: spacing.lg,\n    alignItems: 'center',\n  },\n  infoTitle: {\n    ...typography.titleLarge,\n    color: colors.onSurface,\n    marginBottom: spacing.sm,\n    textAlign: 'center',\n  },\n  infoText: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  actions: {\n    gap: spacing.md,\n  },\n  actionButton: {\n    minHeight: 48,\n  },\n});","size_bytes":4661},"mobile/src/screens/CameraScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { CameraStackScreenProps } from '@/navigation/types';\n\nexport function CameraScreen({ navigation }: CameraStackScreenProps<'CameraView'>) {\n  const { t } = useTranslation();\n\n  const handleClose = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Camera</Text>\n        <Text style={styles.subtitle}>Camera functionality coming soon...</Text>\n        \n        <Button \n          mode=\"outlined\" \n          onPress={handleClose}\n          style={styles.closeButton}\n        >\n          {t('button.cancel')}\n        </Button>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.xl,\n  },\n  closeButton: {\n    borderColor: colors.outline,\n  },\n});","size_bytes":1496},"mobile/src/screens/DashboardScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet, ScrollView, RefreshControl } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useApiQuery } from '@/hooks/useApi';\nimport { \n  Header, \n  Card, \n  Text, \n  Button, \n  Badge, \n  LoadingSpinner, \n  Skeleton,\n  FloatingActionButton \n} from '@/components/ui';\nimport { API_ENDPOINTS } from '@/constants/api';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { MainTabScreenProps } from '@/navigation/types';\n\ninterface DashboardStats {\n  totalDocuments: number;\n  processingDocuments: number;\n  completedDocuments: number;\n  recentActivity: {\n    id: string;\n    title: string;\n    status: string;\n    timestamp: string;\n  }[];\n}\n\nexport function DashboardScreen({ navigation }: MainTabScreenProps<'Dashboard'>) {\n  const { t } = useTranslation();\n  const { user, isAuthenticated } = useAuth();\n  \n  const {\n    data: stats,\n    isLoading,\n    error,\n    refetch,\n    isRefetching,\n  } = useApiQuery<DashboardStats>(\n    ['dashboard', 'stats'],\n    API_ENDPOINTS.DASHBOARD_STATS,\n    {\n      enabled: isAuthenticated,\n      staleTime: 2 * 60 * 1000, // 2 minutes\n    }\n  );\n\n  const handleQuickScan = () => {\n    navigation.navigate('Scan');\n  };\n\n  const handleViewAllDocuments = () => {\n    navigation.navigate('Documents');\n  };\n\n  const handleUploadFiles = () => {\n    navigation.navigate('Upload');\n  };\n\n  const renderQuickActions = () => (\n    <View style={styles.section}>\n      <Text style={styles.sectionTitle}>Quick Actions</Text>\n      <View style={styles.actionsGrid}>\n        <Card style={styles.actionCard}>\n          <View style={styles.actionContent}>\n            <Text style={styles.actionIcon}>📷</Text>\n            <Text style={styles.actionTitle}>Scan Document</Text>\n            <Text style={styles.actionDescription}>\n              Use camera to capture\n            </Text>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              fullWidth\n              onPress={handleQuickScan}\n            >\n              Scan\n            </Button>\n          </View>\n        </Card>\n\n        <Card style={styles.actionCard}>\n          <View style={styles.actionContent}>\n            <Text style={styles.actionIcon}>📁</Text>\n            <Text style={styles.actionTitle}>Upload Files</Text>\n            <Text style={styles.actionDescription}>\n              Select from gallery\n            </Text>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              fullWidth\n              onPress={handleUploadFiles}\n            >\n              Upload\n            </Button>\n          </View>\n        </Card>\n      </View>\n    </View>\n  );\n\n  const renderStats = () => {\n    if (!stats) return null;\n\n    return (\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Overview</Text>\n        <View style={styles.statsGrid}>\n          <Card style={styles.statCard}>\n            <View style={styles.statContent}>\n              <Text style={styles.statNumber}>{stats.totalDocuments}</Text>\n              <Text style={styles.statLabel}>Total Documents</Text>\n            </View>\n          </Card>\n\n          <Card style={styles.statCard}>\n            <View style={styles.statContent}>\n              <Text style={styles.statNumber}>{stats.processingDocuments}</Text>\n              <Text style={styles.statLabel}>Processing</Text>\n              <Badge variant=\"warning\" size=\"sm\">\n                In Progress\n              </Badge>\n            </View>\n          </Card>\n\n          <Card style={styles.statCard}>\n            <View style={styles.statContent}>\n              <Text style={styles.statNumber}>{stats.completedDocuments}</Text>\n              <Text style={styles.statLabel}>Completed</Text>\n              <Badge variant=\"success\" size=\"sm\">\n                Done\n              </Badge>\n            </View>\n          </Card>\n        </View>\n      </View>\n    );\n  };\n\n  const renderRecentActivity = () => {\n    if (!stats?.recentActivity?.length) return null;\n\n    return (\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={styles.sectionTitle}>Recent Activity</Text>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onPress={handleViewAllDocuments}\n          >\n            View All\n          </Button>\n        </View>\n\n        <View style={styles.activityList}>\n          {stats.recentActivity.slice(0, 5).map((activity) => (\n            <Card key={activity.id} style={styles.activityCard}>\n              <View style={styles.activityContent}>\n                <View style={styles.activityDetails}>\n                  <Text style={styles.activityTitle} numberOfLines={1}>\n                    {activity.title}\n                  </Text>\n                  <Text style={styles.activityTimestamp}>\n                    {new Date(activity.timestamp).toLocaleDateString()}\n                  </Text>\n                </View>\n                <Badge\n                  variant={\n                    activity.status === 'completed' ? 'success' :\n                    activity.status === 'processing' ? 'warning' : 'default'\n                  }\n                  size=\"sm\"\n                >\n                  {activity.status}\n                </Badge>\n              </View>\n            </Card>\n          ))}\n        </View>\n      </View>\n    );\n  };\n\n  const renderWelcome = () => (\n    <View style={styles.welcomeSection}>\n      <Text style={styles.welcomeTitle}>\n        Welcome back{user?.firstName ? `, ${user.firstName}` : ''}!\n      </Text>\n      <Text style={styles.welcomeSubtitle}>\n        Manage your documents with AI-powered processing\n      </Text>\n    </View>\n  );\n\n  if (isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Header title={t('nav.dashboard')} />\n        <ScrollView style={styles.scrollView} contentContainerStyle={styles.content}>\n          <Skeleton height={60} style={{ marginBottom: spacing.lg }} />\n          <Skeleton height={120} style={{ marginBottom: spacing.lg }} />\n          <Skeleton height={200} style={{ marginBottom: spacing.lg }} />\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title={t('nav.dashboard')} />\n      \n      <ScrollView \n        style={styles.scrollView}\n        contentContainerStyle={styles.content}\n        refreshControl={\n          <RefreshControl\n            refreshing={isRefetching}\n            onRefresh={refetch}\n            colors={[colors.primary]}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n      >\n        {renderWelcome()}\n        {renderQuickActions()}\n        {renderStats()}\n        {renderRecentActivity()}\n      </ScrollView>\n\n      <FloatingActionButton\n        icon=\"plus\"\n        onPress={handleQuickScan}\n        position=\"bottom-right\"\n        variant=\"primary\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    padding: spacing.lg,\n    paddingBottom: spacing.xl + 60, // Account for FAB\n  },\n  welcomeSection: {\n    marginBottom: spacing.xl,\n    alignItems: 'center',\n  },\n  welcomeTitle: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    textAlign: 'center',\n    marginBottom: spacing.sm,\n  },\n  welcomeSubtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  section: {\n    marginBottom: spacing.xl,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: spacing.md,\n  },\n  sectionTitle: {\n    ...typography.titleLarge,\n    color: colors.onSurface,\n    fontWeight: '600',\n  },\n  actionsGrid: {\n    flexDirection: 'row',\n    gap: spacing.md,\n  },\n  actionCard: {\n    flex: 1,\n    backgroundColor: colors.surface,\n  },\n  actionContent: {\n    padding: spacing.md,\n    alignItems: 'center',\n    gap: spacing.sm,\n  },\n  actionIcon: {\n    fontSize: 32,\n    marginBottom: spacing.xs,\n  },\n  actionTitle: {\n    ...typography.labelLarge,\n    color: colors.onSurface,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  actionDescription: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    marginBottom: spacing.sm,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    gap: spacing.sm,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: colors.surface,\n  },\n  statContent: {\n    padding: spacing.md,\n    alignItems: 'center',\n    gap: spacing.xs,\n  },\n  statNumber: {\n    ...typography.headlineSmall,\n    color: colors.primary,\n    fontWeight: 'bold',\n  },\n  statLabel: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n  },\n  activityList: {\n    gap: spacing.sm,\n  },\n  activityCard: {\n    backgroundColor: colors.surface,\n  },\n  activityContent: {\n    padding: spacing.md,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  activityDetails: {\n    flex: 1,\n    marginRight: spacing.md,\n  },\n  activityTitle: {\n    ...typography.bodyMedium,\n    color: colors.onSurface,\n    fontWeight: '500',\n    marginBottom: spacing.xs,\n  },\n  activityTimestamp: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n  },\n});","size_bytes":9553},"mobile/src/screens/DocumentDetailScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { RootStackScreenProps } from '@/navigation/types';\n\nexport function DocumentDetailScreen({ navigation, route }: RootStackScreenProps<'DocumentDetail'>) {\n  const { t } = useTranslation();\n  const { documentId } = route.params;\n\n  const handleClose = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Document Detail</Text>\n        <Text style={styles.subtitle}>Document ID: {documentId}</Text>\n        <Text style={styles.description}>Document details coming soon...</Text>\n        \n        <Button \n          mode=\"outlined\" \n          onPress={handleClose}\n          style={styles.closeButton}\n        >\n          {t('button.cancel')}\n        </Button>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.primary,\n    marginBottom: spacing.md,\n  },\n  description: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.xl,\n  },\n  closeButton: {\n    borderColor: colors.outline,\n  },\n});","size_bytes":1738},"mobile/src/screens/DocumentsScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { useApiQuery } from '@/hooks/useApi';\nimport { \n  Header, \n  Card, \n  Text, \n  Button, \n  Badge, \n  LoadingSpinner, \n  Skeleton,\n  FloatingActionButton,\n  StatusChip\n} from '@/components/ui';\nimport { API_ENDPOINTS } from '@/constants/api';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { MainTabScreenProps } from '@/navigation/types';\nimport type { Document } from '@shared/schema';\n\nexport function DocumentsScreen({ navigation }: MainTabScreenProps<'Documents'>) {\n  const { t } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const {\n    data: documents,\n    isLoading,\n    error,\n    refetch,\n    isRefetching,\n  } = useApiQuery<Document[]>(\n    ['documents'],\n    API_ENDPOINTS.DOCUMENTS,\n    {\n      staleTime: 30 * 1000, // 30 seconds\n    }\n  );\n\n  const handleDocumentPress = (documentId: string) => {\n    navigation.navigate('DocumentDetail', { documentId });\n  };\n\n  const handleAddDocument = () => {\n    navigation.navigate('Scan');\n  };\n\n  const filteredDocuments = documents?.filter(doc => {\n    const matchesSearch = !searchQuery || \n      doc.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      doc.filename.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = !selectedCategory || doc.category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  const categories = documents?.reduce((acc, doc) => {\n    if (doc.category && !acc.includes(doc.category)) {\n      acc.push(doc.category);\n    }\n    return acc;\n  }, [] as string[]) || [];\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  const renderDocument = ({ item }: { item: Document }) => (\n    <Card style={styles.documentCard}>\n      <View style={styles.documentContent}>\n        <View style={styles.documentHeader}>\n          <View style={styles.documentInfo}>\n            <Text style={styles.documentTitle} numberOfLines={2}>\n              {item.title || item.filename}\n            </Text>\n            <Text style={styles.documentFilename} numberOfLines={1}>\n              {item.filename}\n            </Text>\n          </View>\n          <StatusChip status={item.status as any} />\n        </View>\n\n        <View style={styles.documentMetadata}>\n          <View style={styles.metadataRow}>\n            <Text style={styles.metadataLabel}>\n              📅 {formatDate(item.createdAt)}\n            </Text>\n            {item.fileSize && (\n              <Text style={styles.metadataLabel}>\n                📁 {formatFileSize(item.fileSize)}\n              </Text>\n            )}\n          </View>\n          \n          {item.category && (\n            <View style={styles.categoryRow}>\n              <Badge variant=\"info\" size=\"sm\">\n                {item.category}\n              </Badge>\n            </View>\n          )}\n        </View>\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          fullWidth\n          onPress={() => handleDocumentPress(item.id)}\n          style={styles.viewButton}\n        >\n          View Details\n        </Button>\n      </View>\n    </Card>\n  );\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <Text style={styles.emptyIcon}>📄</Text>\n      <Text style={styles.emptyTitle}>No Documents</Text>\n      <Text style={styles.emptySubtitle}>\n        Start by scanning or uploading your first document\n      </Text>\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        onPress={handleAddDocument}\n        style={styles.emptyButton}\n      >\n        📷 Scan Document\n      </Button>\n    </View>\n  );\n\n  const renderCategoryFilter = () => {\n    if (categories.length === 0) return null;\n\n    return (\n      <View style={styles.filterSection}>\n        <FlatList\n          horizontal\n          data={[null, ...categories]}\n          keyExtractor={(item) => item || 'all'}\n          contentContainerStyle={styles.categoryList}\n          showsHorizontalScrollIndicator={false}\n          renderItem={({ item }) => (\n            <Button\n              variant={selectedCategory === item ? 'primary' : 'outline'}\n              size=\"sm\"\n              onPress={() => setSelectedCategory(item)}\n              style={styles.categoryButton}\n            >\n              {item || 'All'}\n            </Button>\n          )}\n        />\n      </View>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Header title={t('nav.documents')} />\n        <View style={styles.content}>\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Card key={index} style={styles.skeletonCard}>\n              <Skeleton height={120} style={{ margin: spacing.md }} />\n            </Card>\n          ))}\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title={t('nav.documents')} />\n      \n      {renderCategoryFilter()}\n\n      <FlatList\n        data={filteredDocuments}\n        keyExtractor={(item) => item.id}\n        renderItem={renderDocument}\n        contentContainerStyle={[\n          styles.listContent,\n          filteredDocuments.length === 0 && styles.emptyListContent\n        ]}\n        refreshControl={\n          <RefreshControl\n            refreshing={isRefetching}\n            onRefresh={refetch}\n            colors={[colors.primary]}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={renderEmptyState}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n\n      <FloatingActionButton\n        icon=\"plus\"\n        onPress={handleAddDocument}\n        position=\"bottom-right\"\n        variant=\"primary\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    padding: spacing.lg,\n  },\n  filterSection: {\n    backgroundColor: colors.surface,\n    paddingVertical: spacing.md,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.outline,\n  },\n  categoryList: {\n    paddingHorizontal: spacing.lg,\n    gap: spacing.sm,\n  },\n  categoryButton: {\n    marginRight: spacing.sm,\n  },\n  listContent: {\n    padding: spacing.lg,\n    paddingBottom: spacing.xl + 60, // Account for FAB\n  },\n  emptyListContent: {\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  documentCard: {\n    backgroundColor: colors.surface,\n    marginBottom: spacing.md,\n  },\n  documentContent: {\n    padding: spacing.lg,\n    gap: spacing.md,\n  },\n  documentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    gap: spacing.md,\n  },\n  documentInfo: {\n    flex: 1,\n    gap: spacing.xs,\n  },\n  documentTitle: {\n    ...typography.titleMedium,\n    color: colors.onSurface,\n    fontWeight: '600',\n  },\n  documentFilename: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n  },\n  documentMetadata: {\n    gap: spacing.sm,\n  },\n  metadataRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  metadataLabel: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n  },\n  categoryRow: {\n    alignItems: 'flex-start',\n  },\n  viewButton: {\n    marginTop: spacing.sm,\n  },\n  separator: {\n    height: spacing.sm,\n  },\n  emptyState: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: spacing.xl,\n    gap: spacing.lg,\n  },\n  emptyIcon: {\n    fontSize: 64,\n    marginBottom: spacing.lg,\n  },\n  emptyTitle: {\n    ...typography.titleLarge,\n    color: colors.onSurface,\n    textAlign: 'center',\n  },\n  emptySubtitle: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  emptyButton: {\n    marginTop: spacing.md,\n  },\n  skeletonCard: {\n    backgroundColor: colors.surface,\n    marginBottom: spacing.md,\n  },\n});","size_bytes":8595},"mobile/src/screens/LandingScreen.tsx":{"content":"import React, { useEffect } from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button, Card, Text, LoadingSpinner, Toast } from '@/components/ui';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { AuthStackScreenProps } from '@/navigation/types';\n\nexport function LandingScreen({ navigation }: AuthStackScreenProps<'Landing'>) {\n  const { t } = useTranslation();\n  const { login, isLoggingIn, error } = useAuth();\n  const [showError, setShowError] = React.useState(false);\n\n  useEffect(() => {\n    if (error) {\n      setShowError(true);\n    }\n  }, [error]);\n\n  const handleLogin = async () => {\n    try {\n      await login();\n    } catch (error) {\n      console.error('Login error:', error);\n      setShowError(true);\n    }\n  };\n\n  const features = [\n    {\n      title: t('actions.scan.title'),\n      description: t('actions.scan.description'),\n      icon: '📱',\n    },\n    {\n      title: t('actions.ai.title'),\n      description: t('actions.ai.description'),\n      icon: '🤖',\n    },\n    {\n      title: t('storage.title'),\n      description: t('storage.sync'),\n      icon: '☁️',\n    },\n  ];\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>{t('app.title')}</Text>\n          <Text style={styles.subtitle}>{t('app.subtitle')}</Text>\n        </View>\n\n        <View style={styles.features}>\n          {features.map((feature, index) => (\n            <Card key={index} style={styles.featureCard}>\n              <Card.Content style={styles.cardContent}>\n                <Text style={styles.featureIcon}>{feature.icon}</Text>\n                <Text style={styles.featureTitle}>{feature.title}</Text>\n                <Text style={styles.featureDescription}>{feature.description}</Text>\n              </Card.Content>\n            </Card>\n          ))}\n        </View>\n\n        <View style={styles.actions}>\n          {isLoggingIn ? (\n            <LoadingSpinner \n              text=\"Connecting to Replit...\"\n              centered={false}\n            />\n          ) : (\n            <Button\n              variant=\"primary\"\n              size=\"lg\"\n              fullWidth\n              onPress={handleLogin}\n              disabled={isLoggingIn}\n            >\n              {t('button.login')}\n            </Button>\n          )}\n        </View>\n      </ScrollView>\n      \n      <Toast\n        visible={showError}\n        message={error?.message || 'Authentication failed. Please try again.'}\n        type=\"error\"\n        onDismiss={() => setShowError(false)}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    padding: spacing.lg,\n  },\n  header: {\n    alignItems: 'center',\n    marginVertical: spacing.xxl,\n  },\n  title: {\n    ...typography.headlineLarge,\n    color: colors.primary,\n    marginBottom: spacing.sm,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n  },\n  features: {\n    flex: 1,\n    gap: spacing.md,\n    marginBottom: spacing.xxl,\n  },\n  featureCard: {\n    backgroundColor: colors.surface,\n    borderRadius: 12,\n  },\n  cardContent: {\n    alignItems: 'center',\n    padding: spacing.lg,\n  },\n  featureIcon: {\n    fontSize: 32,\n    marginBottom: spacing.sm,\n  },\n  featureTitle: {\n    ...typography.titleMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.sm,\n    textAlign: 'center',\n  },\n  featureDescription: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n  },\n  actions: {\n    gap: spacing.md,\n  },\n  loginButton: {\n    backgroundColor: colors.primary,\n    borderRadius: 8,\n  },\n  loginButtonText: {\n    ...typography.labelLarge,\n    color: colors.onPrimary,\n  },\n});","size_bytes":4089},"mobile/src/screens/LoadingScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { ActivityIndicator, Text } from 'react-native-paper';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing } from '@/constants/theme';\n\nexport function LoadingScreen() {\n  const { t } = useTranslation();\n\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size=\"large\" color={colors.primary} />\n      <Text style={styles.text}>\n        {t('app.title')}\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.background,\n    gap: spacing.lg,\n  },\n  text: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: colors.onBackground,\n  },\n});","size_bytes":788},"mobile/src/screens/LoginScreen.tsx":{"content":"import React, { useEffect } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button, Text, LoadingSpinner, Toast } from '@/components/ui';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { AuthStackScreenProps } from '@/navigation/types';\n\nexport function LoginScreen({ navigation }: AuthStackScreenProps<'Login'>) {\n  const { t } = useTranslation();\n  const { login, isLoggingIn, error } = useAuth();\n  const [showError, setShowError] = React.useState(false);\n\n  useEffect(() => {\n    if (error) {\n      setShowError(true);\n    }\n  }, [error]);\n\n  const handleLogin = async () => {\n    try {\n      await login();\n    } catch (error) {\n      console.error('Login error:', error);\n      setShowError(true);\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <View style={styles.header}>\n          <Text style={styles.title}>{t('button.login')}</Text>\n          <Text style={styles.subtitle}>\n            Connect with your Replit account to continue\n          </Text>\n        </View>\n\n        <View style={styles.actions}>\n          {isLoggingIn ? (\n            <LoadingSpinner \n              text=\"Connecting to Replit...\"\n              centered={false}\n            />\n          ) : (\n            <>\n              <Button\n                variant=\"primary\"\n                size=\"lg\"\n                fullWidth\n                onPress={handleLogin}\n                disabled={isLoggingIn}\n              >\n                Continue with Replit\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                fullWidth\n                onPress={handleBack}\n              >\n                {t('button.cancel')}\n              </Button>\n            </>\n          )}\n        </View>\n      </View>\n      \n      <Toast\n        visible={showError}\n        message={error?.message || 'Authentication failed. Please try again.'}\n        type=\"error\"\n        onDismiss={() => setShowError(false)}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: spacing.xxl,\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n  },\n  actions: {\n    gap: spacing.md,\n  },\n  loginButton: {\n    backgroundColor: colors.primary,\n    borderRadius: 8,\n  },\n  loginButtonText: {\n    ...typography.labelLarge,\n    color: colors.onPrimary,\n  },\n  backButton: {\n    borderColor: colors.outline,\n    borderRadius: 8,\n  },\n  backButtonText: {\n    ...typography.labelLarge,\n    color: colors.onSurface,\n  },\n  loadingContainer: {\n    alignItems: 'center',\n    gap: spacing.md,\n  },\n  loadingText: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n  },\n});","size_bytes":3313},"mobile/src/screens/PricingScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { RootStackScreenProps } from '@/navigation/types';\n\nexport function PricingScreen({ navigation }: RootStackScreenProps<'PricingStack'>) {\n  const { t } = useTranslation();\n\n  const handleClose = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Pricing</Text>\n        <Text style={styles.subtitle}>Subscription plans coming soon...</Text>\n        \n        <Button \n          mode=\"outlined\" \n          onPress={handleClose}\n          style={styles.closeButton}\n        >\n          {t('button.cancel')}\n        </Button>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.xl,\n  },\n  closeButton: {\n    borderColor: colors.outline,\n  },\n});","size_bytes":1494},"mobile/src/screens/ScanScreen.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Alert } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { \n  Button, \n  Card, \n  Text, \n  Header, \n  LoadingSpinner, \n  Toast \n} from '@/components/ui';\nimport { cameraService } from '@/services/cameraService';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { MainTabScreenProps } from '@/navigation/types';\nimport type { DocumentScanResult } from '@/services/cameraService';\n\nexport function ScanScreen({ navigation }: MainTabScreenProps<'Scan'>) {\n  const { t } = useTranslation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showError, setShowError] = useState(false);\n\n  useEffect(() => {\n    if (error) {\n      setShowError(true);\n    }\n  }, [error]);\n\n  const handleTakePhoto = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const result = await cameraService.takePicture({\n        quality: 0.8,\n        allowsEditing: true,\n      });\n\n      // Navigate to camera preview with the captured image\n      navigation.navigate('CameraStack', {\n        screen: 'CameraPreview',\n        params: { imageUri: result.uri },\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to take photo';\n      setError(errorMessage);\n      console.error('Camera error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChooseFromGallery = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const result = await cameraService.pickFromGallery({\n        quality: 0.8,\n        allowsEditing: true,\n      });\n\n      // Navigate to camera preview with the selected image\n      navigation.navigate('CameraStack', {\n        screen: 'CameraPreview',\n        params: { imageUri: result.uri },\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to select image';\n      setError(errorMessage);\n      console.error('Gallery error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const showPermissionInfo = () => {\n    Alert.alert(\n      'Permissions Required',\n      'To scan documents, AdminIA needs access to your camera and photo library. You can grant these permissions in the next step.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Continue', onPress: handleTakePhoto },\n      ]\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Header title={t('mobile.scan')} />\n        <LoadingSpinner text=\"Preparing camera...\" />\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title={t('mobile.scan')} />\n      \n      <View style={styles.content}>\n        <View style={styles.header}>\n          <Text style={styles.title}>{t('actions.scan.title')}</Text>\n          <Text style={styles.subtitle}>{t('actions.scan.description')}</Text>\n        </View>\n\n        <View style={styles.options}>\n          <Card style={styles.optionCard}>\n            <View style={styles.cardContent}>\n              <Text style={styles.optionIcon}>📷</Text>\n              <Text style={styles.optionTitle}>Take Photo</Text>\n              <Text style={styles.optionDescription}>\n                Use your camera to capture a document\n              </Text>\n              <Button\n                variant=\"primary\"\n                size=\"lg\"\n                fullWidth\n                onPress={handleTakePhoto}\n                disabled={isLoading}\n                style={styles.optionButton}\n              >\n                Open Camera\n              </Button>\n            </View>\n          </Card>\n\n          <Card style={styles.optionCard}>\n            <View style={styles.cardContent}>\n              <Text style={styles.optionIcon}>🖼️</Text>\n              <Text style={styles.optionTitle}>Choose from Gallery</Text>\n              <Text style={styles.optionDescription}>\n                Select an existing photo from your gallery\n              </Text>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                fullWidth\n                onPress={handleChooseFromGallery}\n                disabled={isLoading}\n                style={styles.optionButton}\n              >\n                Browse Gallery\n              </Button>\n            </View>\n          </Card>\n        </View>\n\n        <View style={styles.tips}>\n          <Text style={styles.tipsTitle}>📋 Scanning Tips</Text>\n          <Text style={styles.tip}>• Ensure good lighting</Text>\n          <Text style={styles.tip}>• Keep the document flat</Text>\n          <Text style={styles.tip}>• Fill the frame with the document</Text>\n          <Text style={styles.tip}>• Avoid shadows and glare</Text>\n        </View>\n      </View>\n\n      <Toast\n        visible={showError}\n        message={error || 'An error occurred'}\n        type=\"error\"\n        onDismiss={() => setShowError(false)}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: spacing.xl,\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.sm,\n    textAlign: 'center',\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  options: {\n    flex: 1,\n    gap: spacing.lg,\n    marginBottom: spacing.xl,\n  },\n  optionCard: {\n    flex: 1,\n    backgroundColor: colors.surface,\n  },\n  cardContent: {\n    alignItems: 'center',\n    padding: spacing.lg,\n    gap: spacing.md,\n  },\n  optionIcon: {\n    fontSize: 48,\n    marginBottom: spacing.sm,\n  },\n  optionTitle: {\n    ...typography.titleLarge,\n    color: colors.onSurface,\n    textAlign: 'center',\n  },\n  optionDescription: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  optionButton: {\n    marginTop: spacing.sm,\n  },\n  tips: {\n    backgroundColor: colors.surfaceVariant,\n    padding: spacing.md,\n    borderRadius: 12,\n  },\n  tipsTitle: {\n    ...typography.labelLarge,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.sm,\n    fontWeight: '600',\n  },\n  tip: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.xs,\n    lineHeight: 18,\n  },\n});","size_bytes":6670},"mobile/src/screens/SettingsScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { MainTabScreenProps } from '@/navigation/types';\n\nexport function SettingsScreen({ navigation }: MainTabScreenProps<'Settings'>) {\n  const { t } = useTranslation();\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>{t('nav.settings')}</Text>\n        <Text style={styles.subtitle}>Settings coming soon...</Text>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n  },\n});","size_bytes":1154},"mobile/src/screens/SubscriptionScreen.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { RootStackScreenProps } from '@/navigation/types';\n\nexport function SubscriptionScreen({ navigation }: RootStackScreenProps<'SubscriptionStack'>) {\n  const { t } = useTranslation();\n\n  const handleClose = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Subscription</Text>\n        <Text style={styles.subtitle}>Subscription management coming soon...</Text>\n        \n        <Button \n          mode=\"outlined\" \n          onPress={handleClose}\n          style={styles.closeButton}\n        >\n          {t('button.cancel')}\n        </Button>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: spacing.lg,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    ...typography.headlineMedium,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n  },\n  subtitle: {\n    ...typography.bodyLarge,\n    color: colors.onSurfaceVariant,\n    marginBottom: spacing.xl,\n  },\n  closeButton: {\n    borderColor: colors.outline,\n  },\n});","size_bytes":1514},"mobile/src/screens/UploadScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTranslation } from 'react-i18next';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { \n  Header, \n  Toast,\n  FloatingActionButton\n} from '@/components/ui';\nimport { FileUploader } from '@/components/upload/FileUploader';\nimport { colors, spacing } from '@/constants/theme';\nimport type { MainTabScreenProps } from '@/navigation/types';\n\nexport function UploadScreen({ navigation }: MainTabScreenProps<'Upload'>) {\n  const { t } = useTranslation();\n  const queryClient = useQueryClient();\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const handleUploadComplete = (documentId: string) => {\n    console.log('Upload completed:', documentId);\n    setMessage('Document uploaded successfully!');\n    setShowSuccess(true);\n    \n    // Invalidate documents query to refresh the list\n    queryClient.invalidateQueries({ queryKey: ['documents'] });\n    \n    // Navigate to documents screen after a delay\n    setTimeout(() => {\n      navigation.navigate('Documents');\n    }, 2000);\n  };\n\n  const handleUploadError = (error: string) => {\n    console.error('Upload error:', error);\n    setMessage(error);\n    setShowError(true);\n  };\n\n  const handleQuickScan = () => {\n    navigation.navigate('Scan');\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Header title={t('mobile.upload')} />\n      \n      <ScrollView \n        style={styles.scrollView}\n        contentContainerStyle={styles.content}\n        showsVerticalScrollIndicator={false}\n      >\n        <FileUploader\n          onUploadComplete={handleUploadComplete}\n          onUploadError={handleUploadError}\n          multiple={true}\n        />\n      </ScrollView>\n\n      <FloatingActionButton\n        icon=\"camera\"\n        label=\"Quick Scan\"\n        onPress={handleQuickScan}\n        position=\"bottom-right\"\n        variant=\"primary\"\n      />\n\n      <Toast\n        visible={showSuccess}\n        message={message}\n        type=\"success\"\n        onDismiss={() => setShowSuccess(false)}\n        duration={3000}\n      />\n\n      <Toast\n        visible={showError}\n        message={message}\n        type=\"error\"\n        onDismiss={() => setShowError(false)}\n        duration={5000}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    padding: spacing.lg,\n    paddingBottom: spacing.xl + 60, // Account for FAB\n  },\n});","size_bytes":2724},"mobile/src/screens/index.ts":{"content":"// Auth screens\nexport { LoadingScreen } from './LoadingScreen';\nexport { LandingScreen } from './LandingScreen';\nexport { LoginScreen } from './LoginScreen';\n\n// Main app screens - placeholders for now\nexport { DashboardScreen } from './DashboardScreen';\nexport { DocumentsScreen } from './DocumentsScreen';\nexport { ScanScreen } from './ScanScreen';\nexport { SettingsScreen } from './SettingsScreen';\nexport { DocumentDetailScreen } from './DocumentDetailScreen';\nexport { CameraScreen } from './CameraScreen';\nexport { CameraPreviewScreen } from './CameraPreviewScreen';\nexport { PricingScreen } from './PricingScreen';\nexport { SubscriptionScreen } from './SubscriptionScreen';","size_bytes":681},"mobile/src/services/apiClient.ts":{"content":"import { API_CONFIG } from '@/constants/api';\n\nexport class ApiError extends Error {\n  constructor(public status: number, message: string, public data?: any) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport class ApiClient {\n  private baseURL: string;\n  private timeout: number;\n\n  constructor() {\n    this.baseURL = API_CONFIG.BASE_URL;\n    this.timeout = API_CONFIG.TIMEOUT;\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config: RequestInit = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include', // Important for cookie-based auth\n    };\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n      \n      const response = await fetch(url, {\n        ...config,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new ApiError(response.status, errorData.message || 'Request failed', errorData);\n      }\n\n      // Handle empty responses\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      \n      return {} as T;\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error;\n      }\n      \n      if (error.name === 'AbortError') {\n        throw new ApiError(408, 'Request timeout');\n      }\n      \n      throw new ApiError(0, 'Network error');\n    }\n  }\n\n  get<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'GET' });\n  }\n\n  post<T>(endpoint: string, data?: any, options?: RequestInit): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  put<T>(endpoint: string, data?: any, options?: RequestInit): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  delete<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'DELETE' });\n  }\n}\n\nexport const apiClient = new ApiClient();","size_bytes":2521},"mobile/src/services/authService.ts":{"content":"import * as WebBrowser from 'expo-web-browser';\nimport * as Linking from 'expo-linking';\nimport { AuthStorage } from '@/utils/storage';\nimport { apiClient } from './apiClient';\nimport { API_ENDPOINTS } from '@/constants/api';\n\n// Complete the auth session when the app is reopened\nWebBrowser.maybeCompleteAuthSession();\n\nexport class AuthService {\n  private static instance: AuthService;\n  \n  public static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  private constructor() {\n    // Set up deep link handling for auth callbacks\n    this.setupDeepLinkHandling();\n  }\n\n  private setupDeepLinkHandling() {\n    // Handle incoming links when app is already running\n    Linking.addEventListener('url', this.handleDeepLink);\n  }\n\n  private handleDeepLink = (event: { url: string }) => {\n    console.log('Deep link received:', event.url);\n    // Handle auth callback from deep link\n    // This would typically parse auth tokens from the URL\n  };\n\n  async login(): Promise<boolean> {\n    try {\n      // Create redirect URI for the app\n      const redirectUri = Linking.createURL('auth');\n      \n      // Build login URL with redirect\n      const loginUrl = `${API_ENDPOINTS.LOGIN}?redirect_uri=${encodeURIComponent(redirectUri)}`;\n      \n      console.log('Opening auth session:', loginUrl);\n      console.log('Redirect URI:', redirectUri);\n      \n      // Open browser-based auth session\n      const result = await WebBrowser.openAuthSessionAsync(\n        loginUrl,\n        redirectUri,\n        {\n          showInRecents: true,\n          createTask: true,\n        }\n      );\n      \n      console.log('Auth session result:', result);\n      \n      if (result.type === 'success' && result.url) {\n        // Parse the callback URL for auth tokens\n        const success = await this.handleAuthCallback(result.url);\n        return success;\n      } else if (result.type === 'cancel') {\n        throw new Error('Authentication was cancelled');\n      } else {\n        throw new Error('Authentication failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  private async handleAuthCallback(url: string): Promise<boolean> {\n    try {\n      // Parse URL parameters to extract auth tokens\n      const urlParams = new URLSearchParams(url.split('?')[1]);\n      const token = urlParams.get('token');\n      const error = urlParams.get('error');\n      \n      if (error) {\n        throw new Error(`Authentication error: ${error}`);\n      }\n      \n      if (token) {\n        // Store the auth token\n        await AuthStorage.setToken(token);\n        return true;\n      }\n      \n      // If no token in URL, the auth might be cookie-based\n      // Try to verify authentication status with the server\n      return await this.verifyAuthStatus();\n    } catch (error) {\n      console.error('Auth callback error:', error);\n      return false;\n    }\n  }\n\n  async verifyAuthStatus(): Promise<boolean> {\n    try {\n      // Try to fetch user data to verify auth status\n      await apiClient.get(API_ENDPOINTS.AUTH);\n      return true;\n    } catch (error) {\n      console.error('Auth verification failed:', error);\n      return false;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      // Call logout endpoint\n      await apiClient.post(API_ENDPOINTS.LOGOUT);\n      \n      // Clear stored token\n      await AuthStorage.removeToken();\n      \n      console.log('Logout successful');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Clear local storage even if server call fails\n      await AuthStorage.removeToken();\n      throw error;\n    }\n  }\n\n  async getStoredToken(): Promise<string | null> {\n    return await AuthStorage.getToken();\n  }\n\n  async isAuthenticated(): Promise<boolean> {\n    try {\n      // Check if we have a stored token\n      const token = await this.getStoredToken();\n      if (!token) {\n        return false;\n      }\n      \n      // Verify the token is still valid\n      return await this.verifyAuthStatus();\n    } catch (error) {\n      console.error('Auth check error:', error);\n      return false;\n    }\n  }\n}\n\nexport const authService = AuthService.getInstance();","size_bytes":4256},"mobile/src/services/cameraService.ts":{"content":"import * as Camera from 'expo-camera';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as FileSystem from 'expo-file-system';\nimport * as MediaLibrary from 'expo-media-library';\nimport { PermissionManager } from '@/utils/permissions';\nimport { platformConfig } from '@/utils/platform';\nimport type { CameraResult, DocumentPickerResult } from '@/types/api';\n\nexport interface CameraOptions {\n  quality?: number;\n  allowsEditing?: boolean;\n  aspect?: [number, number];\n  base64?: boolean;\n}\n\nexport interface DocumentScanResult {\n  uri: string;\n  width: number;\n  height: number;\n  size: number;\n  base64?: string;\n  filename: string;\n}\n\nexport class CameraService {\n  private static instance: CameraService;\n\n  public static getInstance(): CameraService {\n    if (!CameraService.instance) {\n      CameraService.instance = new CameraService();\n    }\n    return CameraService.instance;\n  }\n\n  async checkPermissions(): Promise<{\n    camera: boolean;\n    mediaLibrary: boolean;\n    allGranted: boolean;\n  }> {\n    return await PermissionManager.checkAllPermissions();\n  }\n\n  async requestPermissions(): Promise<{\n    camera: boolean;\n    mediaLibrary: boolean;\n    allGranted: boolean;\n  }> {\n    const permissions = await PermissionManager.requestAllPermissions();\n    return {\n      ...permissions,\n      allGranted: permissions.camera && permissions.mediaLibrary,\n    };\n  }\n\n  async takePicture(options: CameraOptions = {}): Promise<DocumentScanResult> {\n    // Check permissions first\n    const permissions = await this.checkPermissions();\n    if (!permissions.camera) {\n      const requested = await this.requestPermissions();\n      if (!requested.camera) {\n        throw new Error('Camera permission is required to take pictures');\n      }\n    }\n\n    const result = await ImagePicker.launchCameraAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      quality: options.quality || platformConfig.camera.quality,\n      allowsEditing: options.allowsEditing || platformConfig.camera.allowsEditing,\n      aspect: options.aspect || platformConfig.camera.aspect,\n      base64: options.base64 || false,\n    });\n\n    if (result.canceled || !result.assets || result.assets.length === 0) {\n      throw new Error('Camera capture was cancelled');\n    }\n\n    const asset = result.assets[0];\n    const fileInfo = await FileSystem.getInfoAsync(asset.uri);\n    \n    if (!fileInfo.exists) {\n      throw new Error('Captured image file not found');\n    }\n\n    return {\n      uri: asset.uri,\n      width: asset.width || 0,\n      height: asset.height || 0,\n      size: fileInfo.size || 0,\n      base64: asset.base64,\n      filename: this.generateFilename(),\n    };\n  }\n\n  async pickFromGallery(options: CameraOptions = {}): Promise<DocumentScanResult> {\n    // Check permissions first\n    const permissions = await this.checkPermissions();\n    if (!permissions.mediaLibrary) {\n      const requested = await this.requestPermissions();\n      if (!requested.mediaLibrary) {\n        throw new Error('Media library permission is required to select images');\n      }\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      quality: options.quality || platformConfig.camera.quality,\n      allowsEditing: options.allowsEditing || platformConfig.camera.allowsEditing,\n      aspect: options.aspect || platformConfig.camera.aspect,\n      base64: options.base64 || false,\n    });\n\n    if (result.canceled || !result.assets || result.assets.length === 0) {\n      throw new Error('Image selection was cancelled');\n    }\n\n    const asset = result.assets[0];\n    const fileInfo = await FileSystem.getInfoAsync(asset.uri);\n    \n    if (!fileInfo.exists) {\n      throw new Error('Selected image file not found');\n    }\n\n    return {\n      uri: asset.uri,\n      width: asset.width || 0,\n      height: asset.height || 0,\n      size: fileInfo.size || 0,\n      base64: asset.base64,\n      filename: this.generateFilename(),\n    };\n  }\n\n  async saveToDeviceGallery(uri: string): Promise<string> {\n    // Check media library permission\n    const hasPermission = await PermissionManager.checkMediaLibraryPermission();\n    if (!hasPermission) {\n      const granted = await PermissionManager.requestMediaLibraryPermission();\n      if (!granted) {\n        throw new Error('Media library permission is required to save images');\n      }\n    }\n\n    try {\n      const asset = await MediaLibrary.createAssetAsync(uri);\n      return asset.uri;\n    } catch (error) {\n      console.error('Failed to save to gallery:', error);\n      throw new Error('Failed to save image to gallery');\n    }\n  }\n\n  async copyToAppDirectory(uri: string, filename?: string): Promise<string> {\n    const documentsDir = FileSystem.documentDirectory + 'documents/';\n    \n    // Ensure documents directory exists\n    const dirInfo = await FileSystem.getInfoAsync(documentsDir);\n    if (!dirInfo.exists) {\n      await FileSystem.makeDirectoryAsync(documentsDir, { intermediates: true });\n    }\n\n    const finalFilename = filename || this.generateFilename();\n    const destUri = documentsDir + finalFilename;\n\n    try {\n      await FileSystem.copyAsync({\n        from: uri,\n        to: destUri,\n      });\n      return destUri;\n    } catch (error) {\n      console.error('Failed to copy file:', error);\n      throw new Error('Failed to copy image to app directory');\n    }\n  }\n\n  async getFileInfo(uri: string): Promise<FileSystem.FileInfo> {\n    return await FileSystem.getInfoAsync(uri);\n  }\n\n  async deleteFile(uri: string): Promise<void> {\n    try {\n      await FileSystem.deleteAsync(uri);\n    } catch (error) {\n      console.error('Failed to delete file:', error);\n      throw new Error('Failed to delete file');\n    }\n  }\n\n  async convertToBase64(uri: string): Promise<string> {\n    try {\n      return await FileSystem.readAsStringAsync(uri, {\n        encoding: FileSystem.EncodingType.Base64,\n      });\n    } catch (error) {\n      console.error('Failed to convert to base64:', error);\n      throw new Error('Failed to convert image to base64');\n    }\n  }\n\n  private generateFilename(): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    return `document_${timestamp}.jpg`;\n  }\n\n  async validateImageFile(uri: string, maxSize?: number): Promise<{\n    valid: boolean;\n    error?: string;\n    size?: number;\n  }> {\n    try {\n      const fileInfo = await FileSystem.getInfoAsync(uri);\n      \n      if (!fileInfo.exists) {\n        return { valid: false, error: 'File does not exist' };\n      }\n\n      const size = fileInfo.size || 0;\n      const maxAllowedSize = maxSize || platformConfig.storage.maxFileSize;\n\n      if (size > maxAllowedSize) {\n        return { \n          valid: false, \n          error: `File size (${Math.round(size / 1024 / 1024)}MB) exceeds maximum allowed size (${Math.round(maxAllowedSize / 1024 / 1024)}MB)`,\n          size \n        };\n      }\n\n      return { valid: true, size };\n    } catch (error) {\n      console.error('File validation error:', error);\n      return { valid: false, error: 'Failed to validate file' };\n    }\n  }\n}\n\nexport const cameraService = CameraService.getInstance();","size_bytes":7169},"mobile/src/services/fileUploadService.ts":{"content":"import * as DocumentPicker from 'expo-document-picker';\nimport * as FileSystem from 'expo-file-system';\nimport { apiClient } from './apiClient';\nimport { API_ENDPOINTS } from '@/constants/api';\nimport { platformConfig } from '@/utils/platform';\n\nexport interface FileUploadResult {\n  uri: string;\n  name: string;\n  size: number;\n  mimeType: string;\n  localUri?: string;\n}\n\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface DocumentUploadRequest {\n  file: FileUploadResult;\n  title?: string;\n  category?: string;\n  description?: string;\n}\n\nexport interface DocumentUploadResponse {\n  id: string;\n  url: string;\n  filename: string;\n  size: number;\n  uploadUrl?: string;\n  fields?: Record<string, string>;\n}\n\nexport class FileUploadService {\n  private static instance: FileUploadService;\n\n  public static getInstance(): FileUploadService {\n    if (!FileUploadService.instance) {\n      FileUploadService.instance = new FileUploadService();\n    }\n    return FileUploadService.instance;\n  }\n\n  async pickDocument(options?: {\n    type?: string | string[];\n    multiple?: boolean;\n    copyToCacheDirectory?: boolean;\n  }): Promise<FileUploadResult[]> {\n    try {\n      const result = await DocumentPicker.getDocumentAsync({\n        type: options?.type || ['image/*', 'application/pdf', 'text/*'],\n        multiple: options?.multiple || false,\n        copyToCacheDirectory: options?.copyToCacheDirectory ?? true,\n      });\n\n      if (result.canceled || !result.assets) {\n        throw new Error('Document selection was cancelled');\n      }\n\n      const files: FileUploadResult[] = [];\n\n      for (const asset of result.assets) {\n        // Validate file size\n        if (asset.size && asset.size > platformConfig.storage.maxFileSize) {\n          throw new Error(`File \"${asset.name}\" is too large. Maximum size is ${Math.round(platformConfig.storage.maxFileSize / 1024 / 1024)}MB`);\n        }\n\n        // Validate file type\n        const isValidType = this.validateFileType(asset.mimeType || '', asset.name);\n        if (!isValidType) {\n          throw new Error(`File type \"${asset.mimeType}\" is not supported`);\n        }\n\n        files.push({\n          uri: asset.uri,\n          name: asset.name,\n          size: asset.size || 0,\n          mimeType: asset.mimeType || 'application/octet-stream',\n        });\n      }\n\n      return files;\n    } catch (error) {\n      console.error('Document picker error:', error);\n      throw error;\n    }\n  }\n\n  async uploadDocument(\n    request: DocumentUploadRequest,\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<DocumentUploadResponse> {\n    try {\n      // Step 1: Get upload URL from backend\n      const uploadResponse = await apiClient.post<DocumentUploadResponse>(\n        API_ENDPOINTS.DOCUMENTS_UPLOAD,\n        {\n          filename: request.file.name,\n          mimeType: request.file.mimeType,\n          size: request.file.size,\n          title: request.title,\n          category: request.category,\n          description: request.description,\n        }\n      );\n\n      // Step 2: Upload file to object storage\n      if (uploadResponse.uploadUrl && uploadResponse.fields) {\n        await this.uploadToObjectStorage(\n          request.file,\n          uploadResponse.uploadUrl,\n          uploadResponse.fields,\n          onProgress\n        );\n      }\n\n      return uploadResponse;\n    } catch (error) {\n      console.error('Document upload error:', error);\n      throw error;\n    }\n  }\n\n  private async uploadToObjectStorage(\n    file: FileUploadResult,\n    uploadUrl: string,\n    fields: Record<string, string>,\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<void> {\n    const formData = new FormData();\n\n    // Add fields first\n    Object.entries(fields).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n\n    // Add file last\n    formData.append('file', {\n      uri: file.uri,\n      type: file.mimeType,\n      name: file.name,\n    } as any);\n\n    try {\n      await this.uploadWithProgress(uploadUrl, formData, onProgress);\n    } catch (error) {\n      console.error('Object storage upload error:', error);\n      throw new Error('Failed to upload file to storage');\n    }\n  }\n\n  private async uploadWithProgress(\n    url: string,\n    formData: FormData,\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      if (onProgress) {\n        xhr.upload.addEventListener('progress', (event) => {\n          if (event.lengthComputable) {\n            const progress: UploadProgress = {\n              loaded: event.loaded,\n              total: event.total,\n              percentage: Math.round((event.loaded / event.total) * 100),\n            };\n            onProgress(progress);\n          }\n        });\n      }\n\n      xhr.addEventListener('load', () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve();\n        } else {\n          reject(new Error(`Upload failed with status ${xhr.status}`));\n        }\n      });\n\n      xhr.addEventListener('error', () => {\n        reject(new Error('Upload failed'));\n      });\n\n      xhr.addEventListener('abort', () => {\n        reject(new Error('Upload was aborted'));\n      });\n\n      xhr.open('POST', url);\n      xhr.send(formData);\n    });\n  }\n\n  async copyToLocalDirectory(uri: string, filename?: string): Promise<string> {\n    const documentsDir = FileSystem.documentDirectory + 'uploads/';\n    \n    // Ensure uploads directory exists\n    const dirInfo = await FileSystem.getInfoAsync(documentsDir);\n    if (!dirInfo.exists) {\n      await FileSystem.makeDirectoryAsync(documentsDir, { intermediates: true });\n    }\n\n    const finalFilename = filename || `upload_${Date.now()}`;\n    const destUri = documentsDir + finalFilename;\n\n    try {\n      await FileSystem.copyAsync({\n        from: uri,\n        to: destUri,\n      });\n      return destUri;\n    } catch (error) {\n      console.error('Failed to copy file:', error);\n      throw new Error('Failed to copy file to local directory');\n    }\n  }\n\n  async getFileInfo(uri: string): Promise<FileSystem.FileInfo> {\n    return await FileSystem.getInfoAsync(uri);\n  }\n\n  async deleteLocalFile(uri: string): Promise<void> {\n    try {\n      await FileSystem.deleteAsync(uri);\n    } catch (error) {\n      console.error('Failed to delete local file:', error);\n    }\n  }\n\n  private validateFileType(mimeType: string, filename: string): boolean {\n    const allowedTypes = [\n      // Images\n      'image/jpeg',\n      'image/jpg', \n      'image/png',\n      'image/webp',\n      'image/gif',\n      // Documents\n      'application/pdf',\n      'text/plain',\n      'text/csv',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      // Text files\n      'text/xml',\n      'application/json',\n    ];\n\n    // Check by MIME type first\n    if (allowedTypes.includes(mimeType.toLowerCase())) {\n      return true;\n    }\n\n    // Fallback to file extension\n    const extension = filename.toLowerCase().split('.').pop();\n    const allowedExtensions = [\n      'jpg', 'jpeg', 'png', 'webp', 'gif',\n      'pdf', 'txt', 'csv', 'doc', 'docx', 'xls', 'xlsx',\n      'xml', 'json'\n    ];\n\n    return allowedExtensions.includes(extension || '');\n  }\n\n  getSupportedFileTypes(): string[] {\n    return [\n      'image/*',\n      'application/pdf',\n      'text/plain',\n      'text/csv',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    ];\n  }\n\n  getMaxFileSize(): number {\n    return platformConfig.storage.maxFileSize;\n  }\n\n  formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n}\n\nexport const fileUploadService = FileUploadService.getInstance();","size_bytes":8258},"mobile/src/types/api.ts":{"content":"// Re-export shared types with mobile-specific extensions\nexport * from '@shared/schema';\n\n// Mobile-specific API types\nexport interface UploadProgressEvent {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface CameraResult {\n  uri: string;\n  width: number;\n  height: number;\n  base64?: string;\n  type: 'image';\n}\n\nexport interface DocumentPickerResult {\n  uri: string;\n  name: string;\n  size: number;\n  mimeType: string;\n}\n\n// Extend the base Document type with mobile-specific properties\nexport interface MobileDocument extends Document {\n  localUri?: string; // Local file URI for offline access\n  uploadProgress?: number; // Upload progress for pending uploads\n  isLocalOnly?: boolean; // Whether the document exists only locally\n}\n\n// Mobile app configuration\nexport interface AppConfig {\n  apiBaseUrl: string;\n  stripePublishableKey: string;\n  maxFileSize: number;\n  supportedFileTypes: string[];\n  cameraSettings: {\n    quality: number;\n    allowsEditing: boolean;\n    aspect: [number, number];\n  };\n}\n\n// Error types for mobile-specific errors\nexport interface MobileError extends Error {\n  code?: string;\n  userInfo?: Record<string, any>;\n}\n\nexport class CameraError extends Error implements MobileError {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'CameraError';\n  }\n}\n\nexport class StorageError extends Error implements MobileError {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'StorageError';\n  }\n}\n\nexport class NetworkError extends Error implements MobileError {\n  constructor(message: string, public code?: string, public status?: number) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}","size_bytes":1733},"mobile/src/utils/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport * as Localization from 'expo-localization';\n\n// Import translations from the web app (we'll share the same translations)\nconst resources = {\n  fr: {\n    translation: {\n      // Header\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Gestionnaire Intelligent',\n      'nav.dashboard': 'Tableau de bord',\n      'nav.documents': 'Documents',\n      'nav.analysis': 'Analyses',\n      'nav.settings': 'Paramètres',\n      \n      // Welcome section\n      'welcome.greeting': 'Bonjour, {{name}} 👋',\n      'welcome.subtitle': 'Gérez vos documents intelligemment avec l\\'IA',\n      'stats.documents': 'Documents',\n      'stats.processedToday': 'Traités aujourd\\'hui',\n      \n      // Quick actions\n      'actions.scan.title': 'Scanner un document',\n      'actions.scan.description': 'Utilisez votre caméra pour numériser instantanément vos documents',\n      'actions.upload.title': 'Importer des fichiers',\n      'actions.upload.description': 'Sélectionnez vos fichiers à traiter',\n      'actions.upload.formats': 'PDF, JPG, PNG, DOCX supportés',\n      'actions.ai.title': 'Analyse IA',\n      'actions.ai.description': 'Extraction automatique d\\'informations avec OpenAI',\n      'actions.ai.active': 'IA active',\n      \n      // Categories\n      'categories.title': 'Catégories de documents',\n      'categories.viewAll': 'Voir tout',\n      'categories.thisWeek': 'Cette semaine',\n      'categories.factures': 'Factures',\n      'categories.contrats': 'Contrats',\n      'categories.medical': 'Médical',\n      'categories.legal': 'Légal',\n      'categories.correspondence': 'Correspondance',\n      'categories.financial': 'Financier',\n      'categories.administrative': 'Administratif',\n      'categories.other': 'Autres',\n      \n      // Recent documents\n      'documents.recent': 'Documents récents',\n      'documents.viewAll': 'Voir tout',\n      'status.completed': 'Traité',\n      'status.processing': 'En cours',\n      'status.pending': 'En attente',\n      'status.error': 'Erreur',\n      \n      // Sidebar\n      'storage.title': 'Stockage',\n      'storage.local': 'Local',\n      'storage.cloud': 'Cloud',\n      'storage.sync': 'Synchroniser vers le cloud',\n      'ai.title': 'Traitement IA',\n      'ai.pending': 'Documents en attente',\n      'ai.processed': 'Traités aujourd\\'hui',\n      'ai.credits': 'Crédits IA restants',\n      'ai.processing': 'Traitement en cours...',\n      \n      // Mobile specific\n      'mobile.home': 'Accueil',\n      'mobile.documents': 'Documents',\n      'mobile.scan': 'Scanner',\n      'mobile.settings': 'Réglages',\n      \n      // Common\n      'button.upload': 'Télécharger',\n      'button.scan': 'Scanner',\n      'button.analyze': 'Analyser',\n      'button.delete': 'Supprimer',\n      'button.cancel': 'Annuler',\n      'button.save': 'Sauvegarder',\n      'button.continue': 'Continuer',\n      'button.login': 'Se connecter',\n      'button.logout': 'Se déconnecter',\n      \n      // Error messages\n      'error.upload': 'Erreur lors du téléchargement',\n      'error.analysis': 'Erreur lors de l\\'analyse IA',\n      'error.network': 'Erreur de connexion',\n      'error.permissions': 'Permissions requises',\n      'error.camera': 'Impossible d\\'accéder à la caméra',\n      \n      // Success messages\n      'success.upload': 'Fichier téléchargé avec succès',\n      'success.analysis': 'Analyse terminée',\n      'success.scan': 'Document scanné avec succès',\n    }\n  },\n  en: {\n    translation: {\n      // Header\n      'app.title': 'AdminIA',\n      'app.subtitle': 'Smart Manager',\n      'nav.dashboard': 'Dashboard',\n      'nav.documents': 'Documents',\n      'nav.analysis': 'Analysis',\n      'nav.settings': 'Settings',\n      \n      // Welcome section\n      'welcome.greeting': 'Hello, {{name}} 👋',\n      'welcome.subtitle': 'Manage your documents intelligently with AI',\n      'stats.documents': 'Documents',\n      'stats.processedToday': 'Processed today',\n      \n      // Quick actions\n      'actions.scan.title': 'Scan a document',\n      'actions.scan.description': 'Use your camera to instantly digitize your documents',\n      'actions.upload.title': 'Upload files',\n      'actions.upload.description': 'Select your files to process',\n      'actions.upload.formats': 'PDF, JPG, PNG, DOCX supported',\n      'actions.ai.title': 'AI Analysis',\n      'actions.ai.description': 'Automatic information extraction with OpenAI',\n      'actions.ai.active': 'AI active',\n      \n      // Categories\n      'categories.title': 'Document categories',\n      'categories.viewAll': 'View all',\n      'categories.thisWeek': 'This week',\n      'categories.factures': 'Invoices',\n      'categories.contrats': 'Contracts',\n      'categories.medical': 'Medical',\n      'categories.legal': 'Legal',\n      'categories.correspondence': 'Correspondence',\n      'categories.financial': 'Financial',\n      'categories.administrative': 'Administrative',\n      'categories.other': 'Other',\n      \n      // Recent documents\n      'documents.recent': 'Recent documents',\n      'documents.viewAll': 'View all',\n      'status.completed': 'Completed',\n      'status.processing': 'Processing',\n      'status.pending': 'Pending',\n      'status.error': 'Error',\n      \n      // Mobile specific\n      'mobile.home': 'Home',\n      'mobile.documents': 'Documents',\n      'mobile.scan': 'Scan',\n      'mobile.settings': 'Settings',\n      \n      // Common\n      'button.upload': 'Upload',\n      'button.scan': 'Scan',\n      'button.analyze': 'Analyze',\n      'button.delete': 'Delete',\n      'button.cancel': 'Cancel',\n      'button.save': 'Save',\n      'button.continue': 'Continue',\n      'button.login': 'Login',\n      'button.logout': 'Logout',\n      \n      // Error messages\n      'error.upload': 'Upload error',\n      'error.analysis': 'AI analysis error',\n      'error.network': 'Network error',\n      'error.permissions': 'Permissions required',\n      'error.camera': 'Unable to access camera',\n      \n      // Success messages\n      'success.upload': 'File uploaded successfully',\n      'success.analysis': 'Analysis completed',\n      'success.scan': 'Document scanned successfully',\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    compatibilityJSON: 'v3', // For React Native compatibility\n    resources,\n    lng: Localization.locale.split('-')[0] || 'en', // Use device locale\n    fallbackLng: 'en',\n    \n    interpolation: {\n      escapeValue: false, // React already escapes\n    },\n    \n    react: {\n      useSuspense: false, // Avoid suspense for React Native\n    },\n  });\n\nexport default i18n;","size_bytes":6627},"mobile/src/utils/permissions.ts":{"content":"import * as Camera from 'expo-camera';\nimport * as MediaLibrary from 'expo-media-library';\nimport { Alert } from 'react-native';\n\n// Permission management utilities\nexport class PermissionManager {\n  // Camera permissions\n  static async requestCameraPermission(): Promise<boolean> {\n    try {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      return status === 'granted';\n    } catch (error) {\n      console.error('Error requesting camera permission:', error);\n      return false;\n    }\n  }\n\n  static async checkCameraPermission(): Promise<boolean> {\n    try {\n      const { status } = await Camera.getCameraPermissionsAsync();\n      return status === 'granted';\n    } catch (error) {\n      console.error('Error checking camera permission:', error);\n      return false;\n    }\n  }\n\n  // Media library permissions\n  static async requestMediaLibraryPermission(): Promise<boolean> {\n    try {\n      const { status } = await MediaLibrary.requestPermissionsAsync();\n      return status === 'granted';\n    } catch (error) {\n      console.error('Error requesting media library permission:', error);\n      return false;\n    }\n  }\n\n  static async checkMediaLibraryPermission(): Promise<boolean> {\n    try {\n      const { status } = await MediaLibrary.getPermissionsAsync();\n      return status === 'granted';\n    } catch (error) {\n      console.error('Error checking media library permission:', error);\n      return false;\n    }\n  }\n\n  // Show permission denied alert\n  static showPermissionDeniedAlert(permissionType: string, onRetry?: () => void) {\n    Alert.alert(\n      'Permission Required',\n      `${permissionType} permission is required to use this feature. Please enable it in your device settings.`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Retry', onPress: onRetry },\n      ]\n    );\n  }\n\n  // Request all required permissions\n  static async requestAllPermissions(): Promise<{\n    camera: boolean;\n    mediaLibrary: boolean;\n  }> {\n    const [camera, mediaLibrary] = await Promise.all([\n      this.requestCameraPermission(),\n      this.requestMediaLibraryPermission(),\n    ]);\n\n    return { camera, mediaLibrary };\n  }\n\n  // Check if all required permissions are granted\n  static async checkAllPermissions(): Promise<{\n    camera: boolean;\n    mediaLibrary: boolean;\n    allGranted: boolean;\n  }> {\n    const [camera, mediaLibrary] = await Promise.all([\n      this.checkCameraPermission(),\n      this.checkMediaLibraryPermission(),\n    ]);\n\n    return {\n      camera,\n      mediaLibrary,\n      allGranted: camera && mediaLibrary,\n    };\n  }\n}","size_bytes":2598},"mobile/src/utils/platform.ts":{"content":"import { Platform, Dimensions } from 'react-native';\n\n// Platform and device utilities\nexport const isIOS = Platform.OS === 'ios';\nexport const isAndroid = Platform.OS === 'android';\nexport const isWeb = Platform.OS === 'web';\n\n// Get device dimensions\nexport const getScreenDimensions = () => {\n  const { width, height } = Dimensions.get('window');\n  return { width, height };\n};\n\nexport const getScreenSize = () => {\n  const { width } = getScreenDimensions();\n  \n  if (width < 480) return 'small';\n  if (width < 768) return 'medium';\n  return 'large';\n};\n\n// Safe area utilities\nexport const getStatusBarHeight = () => {\n  if (isIOS) {\n    return 44; // Standard iOS status bar height\n  }\n  return 24; // Standard Android status bar height\n};\n\n// Platform-specific configurations\nexport const platformConfig = {\n  camera: {\n    quality: isIOS ? 0.8 : 0.7, // iOS can handle higher quality\n    allowsEditing: true,\n    aspect: [4, 3] as [number, number],\n  },\n  \n  navigation: {\n    gestureEnabled: isIOS, // iOS has better gesture support\n    animationEnabled: true,\n  },\n  \n  storage: {\n    maxFileSize: isIOS ? 50 * 1024 * 1024 : 30 * 1024 * 1024, // 50MB on iOS, 30MB on Android\n  },\n  \n  ui: {\n    hapticFeedback: isIOS, // iOS has better haptic feedback\n    statusBarStyle: isIOS ? 'dark-content' : 'light-content',\n  },\n} as const;\n\n// Version checking utilities\nexport const getAppVersion = () => {\n  // This would typically come from app.json or package.json\n  return '1.0.0';\n};\n\nexport const getPlatformVersion = () => {\n  return Platform.Version;\n};","size_bytes":1562},"mobile/src/utils/queryClient.ts":{"content":"import { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)\n      retry: (failureCount, error: any) => {\n        // Don't retry on 4xx errors except 408 (timeout)\n        if (error?.status >= 400 && error?.status < 500 && error?.status !== 408) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n      refetchOnWindowFocus: false, // Mobile doesn't have window focus\n      refetchOnMount: true,\n      refetchOnReconnect: true,\n    },\n    mutations: {\n      retry: (failureCount, error: any) => {\n        // Don't retry mutations on client errors\n        if (error?.status >= 400 && error?.status < 500) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n    },\n  },\n});","size_bytes":907},"mobile/src/utils/storage.ts":{"content":"import * as SecureStore from 'expo-secure-store';\n\n// Secure storage utilities for mobile\nexport class MobileStorage {\n  static async setItem(key: string, value: string): Promise<void> {\n    try {\n      await SecureStore.setItemAsync(key, value);\n    } catch (error) {\n      console.error('Failed to store item:', error);\n      throw error;\n    }\n  }\n\n  static async getItem(key: string): Promise<string | null> {\n    try {\n      return await SecureStore.getItemAsync(key);\n    } catch (error) {\n      console.error('Failed to retrieve item:', error);\n      return null;\n    }\n  }\n\n  static async removeItem(key: string): Promise<void> {\n    try {\n      await SecureStore.deleteItemAsync(key);\n    } catch (error) {\n      console.error('Failed to remove item:', error);\n      throw error;\n    }\n  }\n\n  static async clear(): Promise<void> {\n    // Note: SecureStore doesn't have a clear all method\n    // You would need to track keys if you want to clear everything\n    console.warn('SecureStore clear not implemented - remove items individually');\n  }\n}\n\n// Authentication token storage\nexport const AuthStorage = {\n  TOKEN_KEY: 'auth_token',\n  \n  async setToken(token: string): Promise<void> {\n    await MobileStorage.setItem(this.TOKEN_KEY, token);\n  },\n  \n  async getToken(): Promise<string | null> {\n    return await MobileStorage.getItem(this.TOKEN_KEY);\n  },\n  \n  async removeToken(): Promise<void> {\n    await MobileStorage.removeItem(this.TOKEN_KEY);\n  },\n};\n\n// User preferences storage\nexport const PreferencesStorage = {\n  LANGUAGE_KEY: 'user_language',\n  THEME_KEY: 'user_theme',\n  \n  async setLanguage(language: string): Promise<void> {\n    await MobileStorage.setItem(this.LANGUAGE_KEY, language);\n  },\n  \n  async getLanguage(): Promise<string | null> {\n    return await MobileStorage.getItem(this.LANGUAGE_KEY);\n  },\n  \n  async setTheme(theme: string): Promise<void> {\n    await MobileStorage.setItem(this.THEME_KEY, theme);\n  },\n  \n  async getTheme(): Promise<string | null> {\n    return await MobileStorage.getItem(this.THEME_KEY);\n  },\n};","size_bytes":2056},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"mobile/src/components/auth/AuthProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authService } from '@/services/authService';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: Error | null;\n  login: () => Promise<void>;\n  logout: () => Promise<void>;\n  checkAuthStatus: () => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const isAuthenticated = !!user;\n\n  const checkAuthStatus = async (): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const isAuth = await authService.isAuthenticated();\n      \n      if (isAuth) {\n        // Fetch user data if authenticated\n        // This would be a call to your user endpoint\n        // For now, we'll just mark as authenticated\n        setUser({ id: 'temp', email: 'user@example.com' } as User);\n      } else {\n        setUser(null);\n      }\n      \n      return isAuth;\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Auth check failed'));\n      setUser(null);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const success = await authService.login();\n      \n      if (success) {\n        await checkAuthStatus();\n      } else {\n        throw new Error('Login failed');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Login failed'));\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      await authService.logout();\n      setUser(null);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Logout failed'));\n      // Clear user data anyway\n      setUser(null);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Check authentication status on app start\n    checkAuthStatus();\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuthContext(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2909},"mobile/src/components/common/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Button } from 'react-native-paper';\nimport { colors, spacing, typography } from '@/constants/theme';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Log error to crash reporting service\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <View style={styles.container}>\n          <Text style={styles.title}>Oops! Something went wrong</Text>\n          <Text style={styles.message}>\n            We're sorry, but something unexpected happened. Please try again.\n          </Text>\n          \n          {__DEV__ && this.state.error && (\n            <View style={styles.errorDetails}>\n              <Text style={styles.errorTitle}>Error Details (Development):</Text>\n              <Text style={styles.errorText}>{this.state.error.toString()}</Text>\n              {this.state.errorInfo && (\n                <Text style={styles.errorText}>{this.state.errorInfo.componentStack}</Text>\n              )}\n            </View>\n          )}\n          \n          <Button mode=\"contained\" onPress={this.handleRetry} style={styles.retryButton}>\n            Try Again\n          </Button>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing.lg,\n    backgroundColor: colors.background,\n  },\n  title: {\n    ...typography.headlineSmall,\n    color: colors.onSurface,\n    marginBottom: spacing.md,\n    textAlign: 'center',\n  },\n  message: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    marginBottom: spacing.xl,\n    lineHeight: 22,\n  },\n  errorDetails: {\n    backgroundColor: colors.errorContainer,\n    padding: spacing.md,\n    borderRadius: 8,\n    marginBottom: spacing.lg,\n    maxHeight: 200,\n  },\n  errorTitle: {\n    ...typography.labelLarge,\n    color: colors.onErrorContainer,\n    marginBottom: spacing.sm,\n  },\n  errorText: {\n    ...typography.bodySmall,\n    color: colors.onErrorContainer,\n    fontFamily: 'monospace',\n  },\n  retryButton: {\n    backgroundColor: colors.primary,\n  },\n});","size_bytes":2965},"mobile/src/components/ui/Badge.tsx":{"content":"import React from 'react';\nimport { StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport { View, Text } from 'react-native';\nimport { colors, spacing, borderRadius, typography } from '@/constants/theme';\n\ninterface BadgeProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'success' | 'warning' | 'error' | 'info';\n  size?: 'sm' | 'md' | 'lg';\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\nexport function Badge({\n  children,\n  variant = 'default',\n  size = 'md',\n  style,\n  textStyle,\n}: BadgeProps) {\n  const getBadgeStyle = (): ViewStyle => {\n    const sizeStyles: Record<string, ViewStyle> = {\n      sm: { \n        paddingVertical: spacing.xs / 2, \n        paddingHorizontal: spacing.xs,\n        borderRadius: borderRadius.sm,\n      },\n      md: { \n        paddingVertical: spacing.xs, \n        paddingHorizontal: spacing.sm,\n        borderRadius: borderRadius.md,\n      },\n      lg: { \n        paddingVertical: spacing.sm, \n        paddingHorizontal: spacing.md,\n        borderRadius: borderRadius.lg,\n      },\n    };\n\n    const variantStyles: Record<string, ViewStyle> = {\n      default: { backgroundColor: colors.surfaceVariant },\n      success: { backgroundColor: colors.tertiary },\n      warning: { backgroundColor: '#f59e0b' },\n      error: { backgroundColor: colors.error },\n      info: { backgroundColor: colors.primary },\n    };\n\n    return {\n      alignSelf: 'flex-start',\n      ...sizeStyles[size],\n      ...variantStyles[variant],\n    };\n  };\n\n  const getTextStyle = (): TextStyle => {\n    const sizeStyles: Record<string, TextStyle> = {\n      sm: typography.labelSmall,\n      md: typography.labelMedium,\n      lg: typography.labelLarge,\n    };\n\n    const variantStyles: Record<string, TextStyle> = {\n      default: { color: colors.onSurfaceVariant },\n      success: { color: colors.onTertiary },\n      warning: { color: '#ffffff' },\n      error: { color: colors.onError },\n      info: { color: colors.onPrimary },\n    };\n\n    return {\n      fontWeight: '500',\n      ...sizeStyles[size],\n      ...variantStyles[variant],\n    };\n  };\n\n  return (\n    <View style={[getBadgeStyle(), style]}>\n      <Text style={[getTextStyle(), textStyle]}>{children}</Text>\n    </View>\n  );\n}","size_bytes":2210},"mobile/src/components/ui/Button.tsx":{"content":"import React from 'react';\nimport { StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport { Button as PaperButton, ButtonProps as PaperButtonProps } from 'react-native-paper';\nimport { colors, spacing, borderRadius, typography } from '@/constants/theme';\n\ninterface ButtonProps extends Omit<PaperButtonProps, 'mode'> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n}\n\nexport function Button({\n  variant = 'primary',\n  size = 'md',\n  fullWidth = false,\n  style,\n  labelStyle,\n  children,\n  ...props\n}: ButtonProps) {\n  const getButtonStyle = (): ViewStyle => {\n    const baseStyle: ViewStyle = {\n      borderRadius: borderRadius.md,\n      ...(fullWidth && { width: '100%' }),\n    };\n\n    const sizeStyles: Record<string, ViewStyle> = {\n      sm: { paddingVertical: spacing.xs, paddingHorizontal: spacing.sm },\n      md: { paddingVertical: spacing.sm, paddingHorizontal: spacing.md },\n      lg: { paddingVertical: spacing.md, paddingHorizontal: spacing.lg },\n    };\n\n    const variantStyles: Record<string, ViewStyle> = {\n      primary: { backgroundColor: colors.primary },\n      secondary: { backgroundColor: colors.secondary },\n      outline: { \n        backgroundColor: 'transparent', \n        borderWidth: 1, \n        borderColor: colors.outline \n      },\n      ghost: { backgroundColor: 'transparent' },\n      destructive: { backgroundColor: colors.error },\n    };\n\n    return {\n      ...baseStyle,\n      ...sizeStyles[size],\n      ...variantStyles[variant],\n    };\n  };\n\n  const getLabelStyle = (): TextStyle => {\n    const sizeStyles: Record<string, TextStyle> = {\n      sm: typography.labelMedium,\n      md: typography.labelLarge,\n      lg: typography.titleSmall,\n    };\n\n    const variantStyles: Record<string, TextStyle> = {\n      primary: { color: colors.onPrimary },\n      secondary: { color: colors.onSecondary },\n      outline: { color: colors.onSurface },\n      ghost: { color: colors.primary },\n      destructive: { color: colors.onError },\n    };\n\n    return {\n      ...sizeStyles[size],\n      ...variantStyles[variant],\n    };\n  };\n\n  const mode = variant === 'outline' ? 'outlined' : \n               variant === 'ghost' ? 'text' : 'contained';\n\n  return (\n    <PaperButton\n      mode={mode}\n      style={[getButtonStyle(), style]}\n      labelStyle={[getLabelStyle(), labelStyle]}\n      {...props}\n    >\n      {children}\n    </PaperButton>\n  );\n}","size_bytes":2452},"mobile/src/components/ui/Card.tsx":{"content":"import React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport { Card as PaperCard, CardProps as PaperCardProps } from 'react-native-paper';\nimport { colors, spacing, borderRadius } from '@/constants/theme';\n\ninterface CardProps extends PaperCardProps {\n  variant?: 'default' | 'outlined' | 'elevated';\n  padding?: keyof typeof spacing;\n}\n\nexport function Card({\n  variant = 'default',\n  padding = 'md',\n  style,\n  children,\n  ...props\n}: CardProps) {\n  const getCardStyle = (): ViewStyle => {\n    const baseStyle: ViewStyle = {\n      backgroundColor: colors.surface,\n      borderRadius: borderRadius.lg,\n      padding: spacing[padding],\n    };\n\n    const variantStyles: Record<string, ViewStyle> = {\n      default: {\n        elevation: 2,\n        shadowColor: colors.shadow,\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.1,\n        shadowRadius: 2,\n      },\n      outlined: {\n        borderWidth: 1,\n        borderColor: colors.outline,\n        elevation: 0,\n      },\n      elevated: {\n        elevation: 8,\n        shadowColor: colors.shadow,\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.15,\n        shadowRadius: 8,\n      },\n    };\n\n    return {\n      ...baseStyle,\n      ...variantStyles[variant],\n    };\n  };\n\n  return (\n    <PaperCard style={[getCardStyle(), style]} {...props}>\n      {children}\n    </PaperCard>\n  );\n}\n\nexport const CardContent = PaperCard.Content;\nexport const CardActions = PaperCard.Actions;\nexport const CardCover = PaperCard.Cover;","size_bytes":1538},"mobile/src/components/ui/FloatingActionButton.tsx":{"content":"import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { FAB, FABProps } from 'react-native-paper';\nimport { colors, spacing } from '@/constants/theme';\n\ninterface FloatingActionButtonProps extends Omit<FABProps, 'style'> {\n  position?: 'bottom-right' | 'bottom-left' | 'bottom-center';\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'primary' | 'secondary' | 'surface';\n}\n\nexport function FloatingActionButton({\n  position = 'bottom-right',\n  size = 'medium',\n  variant = 'primary',\n  ...props\n}: FloatingActionButtonProps) {\n  const getPositionStyle = () => {\n    const baseStyle = {\n      position: 'absolute' as const,\n      bottom: spacing.lg + 60, // Account for tab bar\n      zIndex: 1000,\n    };\n\n    switch (position) {\n      case 'bottom-right':\n        return { ...baseStyle, right: spacing.lg };\n      case 'bottom-left':\n        return { ...baseStyle, left: spacing.lg };\n      case 'bottom-center':\n        return { ...baseStyle, alignSelf: 'center' };\n      default:\n        return { ...baseStyle, right: spacing.lg };\n    }\n  };\n\n  const getVariantStyle = () => {\n    switch (variant) {\n      case 'primary':\n        return {\n          backgroundColor: colors.primary,\n          color: colors.onPrimary,\n        };\n      case 'secondary':\n        return {\n          backgroundColor: colors.secondary,\n          color: colors.onSecondary,\n        };\n      case 'surface':\n        return {\n          backgroundColor: colors.surface,\n          color: colors.onSurface,\n        };\n      default:\n        return {\n          backgroundColor: colors.primary,\n          color: colors.onPrimary,\n        };\n    }\n  };\n\n  const getSizeStyle = () => {\n    switch (size) {\n      case 'small':\n        return { width: 40, height: 40 };\n      case 'medium':\n        return { width: 56, height: 56 };\n      case 'large':\n        return { width: 72, height: 72 };\n      default:\n        return { width: 56, height: 56 };\n    }\n  };\n\n  return (\n    <FAB\n      size={size}\n      style={[\n        getPositionStyle(),\n        getSizeStyle(),\n        getVariantStyle(),\n        styles.fab,\n      ]}\n      {...props}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  fab: {\n    elevation: 6,\n    shadowColor: colors.shadow,\n    shadowOffset: { width: 0, height: 3 },\n    shadowOpacity: 0.2,\n    shadowRadius: 6,\n  },\n});","size_bytes":2342},"mobile/src/components/ui/Header.tsx":{"content":"import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Appbar, AppbarProps } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { colors, spacing } from '@/constants/theme';\n\ninterface HeaderProps extends Omit<AppbarProps, 'children'> {\n  title?: string;\n  subtitle?: string;\n  showBack?: boolean;\n  onBack?: () => void;\n  actions?: React.ReactNode;\n  centered?: boolean;\n}\n\nexport function Header({\n  title,\n  subtitle,\n  showBack = false,\n  onBack,\n  actions,\n  centered = false,\n  style,\n  ...props\n}: HeaderProps) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Appbar.Header\n      style={[\n        styles.header,\n        { paddingTop: insets.top },\n        style,\n      ]}\n      {...props}\n    >\n      {showBack && (\n        <Appbar.BackAction onPress={onBack} />\n      )}\n      \n      <Appbar.Content\n        title={title}\n        subtitle={subtitle}\n        titleStyle={[\n          styles.title,\n          centered && styles.centeredTitle,\n        ]}\n        subtitleStyle={styles.subtitle}\n      />\n      \n      {actions && (\n        <View style={styles.actions}>\n          {actions}\n        </View>\n      )}\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: colors.surface,\n    elevation: 2,\n    shadowColor: colors.shadow,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  title: {\n    color: colors.onSurface,\n    fontSize: 20,\n    fontWeight: '600',\n  },\n  centeredTitle: {\n    textAlign: 'center',\n  },\n  subtitle: {\n    color: colors.onSurfaceVariant,\n    fontSize: 14,\n  },\n  actions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: spacing.xs,\n  },\n});","size_bytes":1765},"mobile/src/components/ui/Input.tsx":{"content":"import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, TextInputProps, HelperText } from 'react-native-paper';\nimport { colors, spacing, borderRadius, typography } from '@/constants/theme';\n\ninterface InputProps extends TextInputProps {\n  error?: string;\n  helperText?: string;\n  variant?: 'outlined' | 'flat';\n}\n\nexport function Input({\n  error,\n  helperText,\n  variant = 'outlined',\n  style,\n  ...props\n}: InputProps) {\n  return (\n    <>\n      <TextInput\n        mode={variant}\n        error={!!error}\n        style={[styles.input, style]}\n        theme={{\n          colors: {\n            primary: colors.primary,\n            outline: error ? colors.error : colors.outline,\n            outlineVariant: colors.outlineVariant,\n            surface: colors.surface,\n            surfaceVariant: colors.surfaceVariant,\n            onSurface: colors.onSurface,\n            onSurfaceVariant: colors.onSurfaceVariant,\n          },\n        }}\n        {...props}\n      />\n      {(error || helperText) && (\n        <HelperText type={error ? 'error' : 'info'} visible>\n          {error || helperText}\n        </HelperText>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    backgroundColor: colors.surface,\n    fontSize: typography.bodyMedium.fontSize,\n    marginBottom: spacing.xs,\n  },\n});","size_bytes":1339},"mobile/src/components/ui/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet, ViewStyle } from 'react-native';\nimport { ActivityIndicator, Text } from 'react-native-paper';\nimport { colors, spacing, typography } from '@/constants/theme';\n\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'large';\n  color?: string;\n  text?: string;\n  style?: ViewStyle;\n  centered?: boolean;\n}\n\nexport function LoadingSpinner({\n  size = 'large',\n  color = colors.primary,\n  text,\n  style,\n  centered = true,\n}: LoadingSpinnerProps) {\n  const containerStyle = [\n    centered && styles.centered,\n    style,\n  ];\n\n  return (\n    <View style={containerStyle}>\n      <ActivityIndicator size={size} color={color} />\n      {text && (\n        <Text style={styles.text}>{text}</Text>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: spacing.md,\n  },\n  text: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    marginTop: spacing.sm,\n  },\n});","size_bytes":1045},"mobile/src/components/ui/Modal.tsx":{"content":"import React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport { Modal as RNModal, Portal, Surface, IconButton } from 'react-native-paper';\nimport { colors, spacing, borderRadius } from '@/constants/theme';\n\ninterface ModalProps {\n  visible: boolean;\n  onDismiss: () => void;\n  children: React.ReactNode;\n  title?: string;\n  showCloseButton?: boolean;\n  dismissable?: boolean;\n  contentContainerStyle?: ViewStyle;\n}\n\nexport function Modal({\n  visible,\n  onDismiss,\n  children,\n  showCloseButton = true,\n  dismissable = true,\n  contentContainerStyle,\n}: ModalProps) {\n  return (\n    <Portal>\n      <RNModal\n        visible={visible}\n        onDismiss={dismissable ? onDismiss : undefined}\n        contentContainerStyle={[styles.container, contentContainerStyle]}\n        dismissable={dismissable}\n      >\n        <Surface style={styles.surface} elevation={5}>\n          {showCloseButton && (\n            <IconButton\n              icon=\"close\"\n              size={24}\n              onPress={onDismiss}\n              style={styles.closeButton}\n              iconColor={colors.onSurface}\n            />\n          )}\n          {children}\n        </Surface>\n      </RNModal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing.lg,\n  },\n  surface: {\n    backgroundColor: colors.surface,\n    borderRadius: borderRadius.lg,\n    padding: spacing.lg,\n    maxWidth: '100%',\n    maxHeight: '90%',\n    minWidth: 280,\n    position: 'relative',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: spacing.xs,\n    top: spacing.xs,\n    zIndex: 1,\n  },\n});","size_bytes":1679},"mobile/src/components/ui/Skeleton.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { View, Animated, ViewStyle } from 'react-native';\nimport { colors, borderRadius } from '@/constants/theme';\n\ninterface SkeletonProps {\n  width?: number | string;\n  height?: number | string;\n  borderRadius?: number;\n  style?: ViewStyle;\n}\n\nexport function Skeleton({\n  width = '100%',\n  height = 20,\n  borderRadius: radius = borderRadius.sm,\n  style,\n}: SkeletonProps) {\n  const animatedValue = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    const animation = Animated.loop(\n      Animated.sequence([\n        Animated.timing(animatedValue, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: false,\n        }),\n        Animated.timing(animatedValue, {\n          toValue: 0,\n          duration: 1000,\n          useNativeDriver: false,\n        }),\n      ])\n    );\n\n    animation.start();\n\n    return () => animation.stop();\n  }, [animatedValue]);\n\n  const backgroundColor = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [colors.surfaceVariant, colors.outline],\n  });\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width,\n          height,\n          borderRadius: radius,\n          backgroundColor,\n        },\n        style,\n      ]}\n    />\n  );\n}\n\n// Common skeleton layouts\nexport function SkeletonCard() {\n  return (\n    <View style={{ padding: 16, gap: 8 }}>\n      <Skeleton height={24} width=\"60%\" />\n      <Skeleton height={16} width=\"100%\" />\n      <Skeleton height={16} width=\"80%\" />\n      <View style={{ flexDirection: 'row', gap: 8, marginTop: 8 }}>\n        <Skeleton height={32} width={80} borderRadius={borderRadius.md} />\n        <Skeleton height={32} width={80} borderRadius={borderRadius.md} />\n      </View>\n    </View>\n  );\n}\n\nexport function SkeletonList({ count = 5 }: { count?: number }) {\n  return (\n    <View style={{ gap: 12 }}>\n      {Array.from({ length: count }).map((_, index) => (\n        <View key={index} style={{ flexDirection: 'row', gap: 12, alignItems: 'center' }}>\n          <Skeleton width={48} height={48} borderRadius={borderRadius.full} />\n          <View style={{ flex: 1, gap: 6 }}>\n            <Skeleton height={16} width=\"70%\" />\n            <Skeleton height={14} width=\"50%\" />\n          </View>\n        </View>\n      ))}\n    </View>\n  );\n}","size_bytes":2323},"mobile/src/components/ui/StatusChip.tsx":{"content":"import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Chip, ChipProps } from 'react-native-paper';\nimport { colors, spacing } from '@/constants/theme';\n\ninterface StatusChipProps extends Omit<ChipProps, 'mode'> {\n  status: 'pending' | 'processing' | 'completed' | 'error';\n}\n\nexport function StatusChip({ status, style, ...props }: StatusChipProps) {\n  const getStatusConfig = () => {\n    const configs = {\n      pending: {\n        color: '#f59e0b',\n        backgroundColor: '#fef3c7',\n        textColor: '#92400e',\n        icon: 'clock-outline',\n      },\n      processing: {\n        color: colors.primary,\n        backgroundColor: colors.primaryContainer,\n        textColor: colors.onPrimaryContainer,\n        icon: 'loading',\n      },\n      completed: {\n        color: colors.tertiary,\n        backgroundColor: colors.tertiaryContainer,\n        textColor: colors.onTertiaryContainer,\n        icon: 'check',\n      },\n      error: {\n        color: colors.error,\n        backgroundColor: colors.errorContainer,\n        textColor: colors.onErrorContainer,\n        icon: 'alert',\n      },\n    };\n\n    return configs[status];\n  };\n\n  const config = getStatusConfig();\n\n  return (\n    <Chip\n      mode=\"flat\"\n      icon={config.icon}\n      style={[\n        {\n          backgroundColor: config.backgroundColor,\n        },\n        style,\n      ]}\n      textStyle={{\n        color: config.textColor,\n        fontSize: 12,\n        fontWeight: '500',\n      }}\n      {...props}\n    />\n  );\n}","size_bytes":1505},"mobile/src/components/ui/Toast.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { StyleSheet, Animated, Text, ViewStyle } from 'react-native';\nimport { Portal, Surface } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { colors, spacing, borderRadius, typography } from '@/constants/theme';\n\ninterface ToastProps {\n  visible: boolean;\n  message: string;\n  type?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  onDismiss: () => void;\n  position?: 'top' | 'bottom';\n}\n\nexport function Toast({\n  visible,\n  message,\n  type = 'info',\n  duration = 3000,\n  onDismiss,\n  position = 'bottom',\n}: ToastProps) {\n  const insets = useSafeAreaInsets();\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n  const slideAnim = useRef(new Animated.Value(position === 'top' ? -100 : 100)).current;\n\n  useEffect(() => {\n    if (visible) {\n      Animated.parallel([\n        Animated.timing(fadeAnim, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n        Animated.timing(slideAnim, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n      ]).start();\n\n      const timer = setTimeout(() => {\n        hideToast();\n      }, duration);\n\n      return () => clearTimeout(timer);\n    } else {\n      hideToast();\n    }\n  }, [visible]);\n\n  const hideToast = () => {\n    Animated.parallel([\n      Animated.timing(fadeAnim, {\n        toValue: 0,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n      Animated.timing(slideAnim, {\n        toValue: position === 'top' ? -100 : 100,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n    ]).start(() => {\n      onDismiss();\n    });\n  };\n\n  const getTypeStyle = (): ViewStyle => {\n    const typeStyles = {\n      success: { backgroundColor: colors.tertiary },\n      error: { backgroundColor: colors.error },\n      warning: { backgroundColor: '#f59e0b' },\n      info: { backgroundColor: colors.primary },\n    };\n\n    return typeStyles[type];\n  };\n\n  const getTextColor = () => {\n    const textColors = {\n      success: colors.onTertiary,\n      error: colors.onError,\n      warning: '#ffffff',\n      info: colors.onPrimary,\n    };\n\n    return textColors[type];\n  };\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <Portal>\n      <Animated.View\n        style={[\n          styles.container,\n          {\n            opacity: fadeAnim,\n            transform: [{ translateY: slideAnim }],\n            [position]: position === 'top' ? insets.top + spacing.md : insets.bottom + spacing.md,\n          },\n        ]}\n      >\n        <Surface\n          style={[\n            styles.toast,\n            getTypeStyle(),\n          ]}\n          elevation={6}\n        >\n          <Text style={[styles.message, { color: getTextColor() }]}>\n            {message}\n          </Text>\n        </Surface>\n      </Animated.View>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    left: spacing.md,\n    right: spacing.md,\n    zIndex: 9999,\n  },\n  toast: {\n    borderRadius: borderRadius.md,\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.lg,\n    shadowColor: colors.shadow,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  message: {\n    ...typography.bodyMedium,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n});","size_bytes":3401},"mobile/src/components/ui/index.ts":{"content":"// Core UI Components for AdminIA Mobile\nexport { Button } from './Button';\nexport { Card, CardContent, CardActions, CardCover } from './Card';\nexport { Input } from './Input';\nexport { Badge } from './Badge';\nexport { LoadingSpinner } from './LoadingSpinner';\nexport { StatusChip } from './StatusChip';\nexport { Skeleton, SkeletonCard, SkeletonList } from './Skeleton';\nexport { Header } from './Header';\nexport { FloatingActionButton } from './FloatingActionButton';\nexport { Modal } from './Modal';\nexport { Toast } from './Toast';\n\n// Re-export commonly used React Native Paper components with consistent theming\nexport {\n  Text,\n  Title,\n  Paragraph,\n  Caption,\n  Headline,\n  Subheading,\n  Divider,\n  List,\n  Checkbox,\n  RadioButton,\n  Switch,\n  ProgressBar,\n  SegmentedButtons,\n  DataTable,\n  Menu,\n  Dialog,\n  Snackbar,\n  Avatar,\n  Chip,\n  IconButton,\n  TouchableRipple,\n} from 'react-native-paper';","size_bytes":906},"mobile/src/components/upload/FileUploader.tsx":{"content":"import React, { useState } from 'react';\nimport { View, StyleSheet, Alert } from 'react-native';\nimport { \n  Button, \n  Card, \n  Text, \n  LoadingSpinner, \n  ProgressBar,\n  Badge \n} from '@/components/ui';\nimport { fileUploadService } from '@/services/fileUploadService';\nimport { colors, spacing, typography } from '@/constants/theme';\nimport type { FileUploadResult, UploadProgress } from '@/services/fileUploadService';\n\ninterface FileUploaderProps {\n  onUploadComplete?: (documentId: string) => void;\n  onUploadError?: (error: string) => void;\n  title?: string;\n  category?: string;\n  multiple?: boolean;\n  acceptedTypes?: string[];\n}\n\nexport function FileUploader({\n  onUploadComplete,\n  onUploadError,\n  title,\n  category,\n  multiple = false,\n  acceptedTypes,\n}: FileUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<UploadProgress | null>(null);\n  const [selectedFiles, setSelectedFiles] = useState<FileUploadResult[]>([]);\n\n  const handleSelectFiles = async () => {\n    try {\n      const files = await fileUploadService.pickDocument({\n        type: acceptedTypes || fileUploadService.getSupportedFileTypes(),\n        multiple,\n        copyToCacheDirectory: true,\n      });\n\n      setSelectedFiles(files);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to select files';\n      onUploadError?.(errorMessage);\n      console.error('File selection error:', error);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (selectedFiles.length === 0) {\n      onUploadError?.('Please select files to upload');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(null);\n\n    try {\n      for (const file of selectedFiles) {\n        const uploadRequest = {\n          file,\n          title: title || file.name,\n          category,\n        };\n\n        const result = await fileUploadService.uploadDocument(\n          uploadRequest,\n          (progress) => {\n            setUploadProgress(progress);\n          }\n        );\n\n        onUploadComplete?.(result.id);\n      }\n\n      // Reset state after successful upload\n      setSelectedFiles([]);\n      setUploadProgress(null);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      onUploadError?.(errorMessage);\n      console.error('Upload error:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleClearAll = () => {\n    setSelectedFiles([]);\n    setUploadProgress(null);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    return fileUploadService.formatFileSize(bytes);\n  };\n\n  const getFileTypeColor = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return 'info';\n    if (mimeType === 'application/pdf') return 'error';\n    if (mimeType.startsWith('text/')) return 'success';\n    return 'default';\n  };\n\n  return (\n    <View style={styles.container}>\n      <Card style={styles.uploaderCard}>\n        <View style={styles.content}>\n          <Text style={styles.title}>Upload Documents</Text>\n          <Text style={styles.subtitle}>\n            Select files from your device to upload and process\n          </Text>\n\n          {/* File Selection */}\n          <View style={styles.actions}>\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              fullWidth\n              onPress={handleSelectFiles}\n              disabled={isUploading}\n              style={styles.selectButton}\n            >\n              📁 Select Files\n            </Button>\n          </View>\n\n          {/* Selected Files List */}\n          {selectedFiles.length > 0 && (\n            <View style={styles.filesList}>\n              <View style={styles.filesHeader}>\n                <Text style={styles.filesTitle}>\n                  Selected Files ({selectedFiles.length})\n                </Text>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onPress={handleClearAll}\n                  disabled={isUploading}\n                >\n                  Clear All\n                </Button>\n              </View>\n\n              {selectedFiles.map((file, index) => (\n                <Card key={index} style={styles.fileCard}>\n                  <View style={styles.fileInfo}>\n                    <View style={styles.fileDetails}>\n                      <Text style={styles.fileName} numberOfLines={1}>\n                        {file.name}\n                      </Text>\n                      <View style={styles.fileMetadata}>\n                        <Badge \n                          variant={getFileTypeColor(file.mimeType)}\n                          size=\"sm\"\n                        >\n                          {file.mimeType.split('/')[1].toUpperCase()}\n                        </Badge>\n                        <Text style={styles.fileSize}>\n                          {formatFileSize(file.size)}\n                        </Text>\n                      </View>\n                    </View>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onPress={() => handleRemoveFile(index)}\n                      disabled={isUploading}\n                    >\n                      ✕\n                    </Button>\n                  </View>\n                </Card>\n              ))}\n            </View>\n          )}\n\n          {/* Upload Progress */}\n          {isUploading && uploadProgress && (\n            <View style={styles.progressSection}>\n              <Text style={styles.progressText}>\n                Uploading... {uploadProgress.percentage}%\n              </Text>\n              <ProgressBar \n                progress={uploadProgress.percentage / 100} \n                style={styles.progressBar}\n              />\n              <Text style={styles.progressDetails}>\n                {formatFileSize(uploadProgress.loaded)} / {formatFileSize(uploadProgress.total)}\n              </Text>\n            </View>\n          )}\n\n          {/* Upload Button */}\n          {selectedFiles.length > 0 && (\n            <View style={styles.uploadSection}>\n              {isUploading ? (\n                <LoadingSpinner \n                  text=\"Uploading files...\"\n                  centered={false}\n                />\n              ) : (\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  fullWidth\n                  onPress={handleUpload}\n                  disabled={isUploading}\n                >\n                  📤 Upload {selectedFiles.length} File{selectedFiles.length > 1 ? 's' : ''}\n                </Button>\n              )}\n            </View>\n          )}\n\n          {/* File Type Info */}\n          <View style={styles.infoSection}>\n            <Text style={styles.infoTitle}>Supported File Types</Text>\n            <Text style={styles.infoText}>\n              Images (JPG, PNG, WebP), Documents (PDF, DOC, DOCX), Text files (TXT, CSV)\n            </Text>\n            <Text style={styles.infoText}>\n              Maximum file size: {formatFileSize(fileUploadService.getMaxFileSize())}\n            </Text>\n          </View>\n        </View>\n      </Card>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  uploaderCard: {\n    backgroundColor: colors.surface,\n  },\n  content: {\n    padding: spacing.lg,\n    gap: spacing.md,\n  },\n  title: {\n    ...typography.titleLarge,\n    color: colors.onSurface,\n    textAlign: 'center',\n  },\n  subtitle: {\n    ...typography.bodyMedium,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  actions: {\n    marginTop: spacing.md,\n  },\n  selectButton: {\n    borderStyle: 'dashed',\n    borderWidth: 2,\n    borderColor: colors.outline,\n  },\n  filesList: {\n    gap: spacing.sm,\n  },\n  filesHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: spacing.sm,\n  },\n  filesTitle: {\n    ...typography.labelLarge,\n    color: colors.onSurface,\n    fontWeight: '600',\n  },\n  fileCard: {\n    backgroundColor: colors.surfaceVariant,\n    padding: spacing.sm,\n  },\n  fileInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  fileDetails: {\n    flex: 1,\n    gap: spacing.xs,\n  },\n  fileName: {\n    ...typography.bodyMedium,\n    color: colors.onSurface,\n    fontWeight: '500',\n  },\n  fileMetadata: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: spacing.sm,\n  },\n  fileSize: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n  },\n  progressSection: {\n    gap: spacing.sm,\n    marginTop: spacing.md,\n  },\n  progressText: {\n    ...typography.labelLarge,\n    color: colors.onSurface,\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: colors.surfaceVariant,\n  },\n  progressDetails: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n    textAlign: 'center',\n  },\n  uploadSection: {\n    marginTop: spacing.md,\n  },\n  infoSection: {\n    backgroundColor: colors.surfaceVariant,\n    padding: spacing.md,\n    borderRadius: 8,\n    gap: spacing.xs,\n  },\n  infoTitle: {\n    ...typography.labelMedium,\n    color: colors.onSurfaceVariant,\n    fontWeight: '600',\n  },\n  infoText: {\n    ...typography.bodySmall,\n    color: colors.onSurfaceVariant,\n    lineHeight: 16,\n  },\n});","size_bytes":9573},"client/src/pages/terms-of-service.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Header } from \"@/components/Header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Info, Shield, CreditCard } from \"lucide-react\";\n\nexport default function TermsOfServicePage() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"heading-terms\">\n            {t(\"terms.title\", \"Conditions Générales de Vente\")}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {t(\"terms.subtitle\", \"Dernière mise à jour : 15 septembre 2025\")}\n          </p>\n        </div>\n\n        {/* Important notices */}\n        <div className=\"grid gap-4 mb-8\">\n          <Alert data-testid=\"alert-no-refund\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"font-medium\">\n              {t(\"terms.no_refund_notice\", \"IMPORTANT : Tous les abonnements sont NON REMBOURSABLES. Veuillez lire attentivement nos conditions avant de vous abonner.\")}\n            </AlertDescription>\n          </Alert>\n          \n          <Alert data-testid=\"alert-cancellation\">\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              {t(\"terms.cancellation_notice\", \"Vous pouvez annuler votre abonnement à tout moment depuis votre compte. L'annulation prend effet à la fin de votre période de facturation actuelle.\")}\n            </AlertDescription>\n          </Alert>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Service Description */}\n          <Card data-testid=\"card-service-description\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Info className=\"w-5 h-5\" />\n                {t(\"terms.service.title\", \"1. Description du Service\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>{t(\"terms.service.description\", \"AdminIA est un service de gestion intelligente de documents utilisant l'intelligence artificielle pour analyser, classer et extraire des informations de vos documents.\")}</p>\n              <div>\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.service.features\", \"Fonctionnalités incluses :\")}</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                  <li>{t(\"terms.service.feature1\", \"Traitement illimité de documents\")}</li>\n                  <li>{t(\"terms.service.feature2\", \"Analyse IA avec OpenAI\")}</li>\n                  <li>{t(\"terms.service.feature3\", \"Stockage cloud sécurisé\")}</li>\n                  <li>{t(\"terms.service.feature4\", \"Support technique\")}</li>\n                  <li>{t(\"terms.service.feature5\", \"Interface web et mobile\")}</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pricing and Billing */}\n          <Card data-testid=\"card-pricing\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                {t(\"terms.pricing.title\", \"2. Tarification et Facturation\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.pricing.plans\", \"Plans disponibles :\")}</h4>\n                <div className=\"grid gap-2\">\n                  <div className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                    <span>{t(\"terms.pricing.trial\", \"Période d'essai\")}</span>\n                    <Badge variant=\"secondary\">{t(\"terms.pricing.trial_duration\", \"3 semaines gratuites\")}</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                    <span>{t(\"terms.pricing.weekly\", \"Abonnement hebdomadaire\")}</span>\n                    <Badge variant=\"outline\">3€ / semaine</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                    <span>{t(\"terms.pricing.monthly\", \"Abonnement mensuel\")}</span>\n                    <Badge variant=\"outline\">10€ / mois</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                    <span>{t(\"terms.pricing.yearly\", \"Abonnement annuel\")}</span>\n                    <Badge variant=\"outline\">100€ / an</Badge>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {t(\"terms.pricing.currency\", \"Tous les prix sont en euros (EUR) et incluent les taxes applicables.\")}\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* No Refund Policy */}\n          <Card data-testid=\"card-no-refund\" className=\"border-destructive\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-destructive\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                {t(\"terms.refund.title\", \"3. Politique de Non-Remboursement\")}\n              </CardTitle>\n              <CardDescription className=\"text-destructive\">\n                {t(\"terms.refund.subtitle\", \"Cette section est importante - Veuillez la lire attentivement\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n                <h4 className=\"font-bold text-destructive mb-2\">\n                  {t(\"terms.refund.no_refund_title\", \"AUCUN REMBOURSEMENT\")}\n                </h4>\n                <p className=\"text-sm\">\n                  {t(\"terms.refund.no_refund_description\", \"Tous les paiements pour les abonnements AdminIA sont définitifs et NON REMBOURSABLES. Cette politique s'applique à tous les types d'abonnements (hebdomadaire, mensuel, annuel) et dans toutes les circonstances.\")}\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.refund.exceptions\", \"Aucune exception :\")}</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                  <li>{t(\"terms.refund.exception1\", \"Changement d'avis après l'achat\")}</li>\n                  <li>{t(\"terms.refund.exception2\", \"Utilisation partielle du service\")}</li>\n                  <li>{t(\"terms.refund.exception3\", \"Problèmes techniques temporaires\")}</li>\n                  <li>{t(\"terms.refund.exception4\", \"Insatisfaction du service\")}</li>\n                </ul>\n              </div>\n\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">\n                  {t(\"terms.refund.trial_title\", \"Période d'essai gratuite\")}\n                </h4>\n                <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {t(\"terms.refund.trial_description\", \"Nous offrons une période d'essai gratuite de 3 semaines pour vous permettre d'évaluer le service avant tout engagement financier. Profitez de cette période pour tester toutes les fonctionnalités.\")}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Cancellation Policy */}\n          <Card data-testid=\"card-cancellation\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                {t(\"terms.cancellation.title\", \"4. Politique d'Annulation\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.cancellation.how_to\", \"Comment annuler :\")}</h4>\n                <ol className=\"list-decimal list-inside space-y-1 text-sm text-muted-foreground\">\n                  <li>{t(\"terms.cancellation.step1\", \"Connectez-vous à votre compte AdminIA\")}</li>\n                  <li>{t(\"terms.cancellation.step2\", \"Allez dans la section \\\"Abonnement\\\"\")}</li>\n                  <li>{t(\"terms.cancellation.step3\", \"Cliquez sur \\\"Annuler l'abonnement\\\"\")}</li>\n                  <li>{t(\"terms.cancellation.step4\", \"Confirmez votre annulation\")}</li>\n                </ol>\n              </div>\n\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-yellow-800 dark:text-yellow-200 mb-2\">\n                  {t(\"terms.cancellation.effect_title\", \"Effet de l'annulation\")}\n                </h4>\n                <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                  {t(\"terms.cancellation.effect_description\", \"L'annulation prend effet à la fin de votre période de facturation actuelle. Vous conserverez l'accès au service jusqu'à cette date. Aucun remboursement ne sera accordé pour la période restante.\")}\n                </p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.cancellation.immediate\", \"Annulation immédiate :\")}</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t(\"terms.cancellation.immediate_description\", \"En cas d'annulation, votre accès au service sera maintenu jusqu'à la fin de la période déjà payée. Après cette date, votre compte passera automatiquement en mode gratuit avec les limitations associées.\")}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* User Responsibilities */}\n          <Card data-testid=\"card-responsibilities\">\n            <CardHeader>\n              <CardTitle>{t(\"terms.responsibilities.title\", \"5. Responsabilités de l'Utilisateur\")}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>{t(\"terms.responsibilities.description\", \"En utilisant AdminIA, vous vous engagez à :\")}</p>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                <li>{t(\"terms.responsibilities.item1\", \"Utiliser le service conformément à sa destination\")}</li>\n                <li>{t(\"terms.responsibilities.item2\", \"Ne pas partager vos identifiants de connexion\")}</li>\n                <li>{t(\"terms.responsibilities.item3\", \"Respecter les droits de propriété intellectuelle\")}</li>\n                <li>{t(\"terms.responsibilities.item4\", \"Ne pas tenter de contourner les mesures de sécurité\")}</li>\n                <li>{t(\"terms.responsibilities.item5\", \"Signaler tout problème de sécurité découvert\")}</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <Card data-testid=\"card-contact\">\n            <CardHeader>\n              <CardTitle>{t(\"terms.contact.title\", \"6. Contact et Support\")}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>{t(\"terms.contact.description\", \"Pour toute question concernant ces conditions générales de vente ou notre service :\")}</p>\n              <div className=\"bg-muted rounded-lg p-4\">\n                <h4 className=\"font-semibold mb-2\">{t(\"terms.contact.support\", \"Support AdminIA\")}</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t(\"terms.contact.email\", \"Email : support@adminia.app\")}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t(\"terms.contact.response\", \"Temps de réponse : 24-48 heures ouvrées\")}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Separator />\n\n          <div className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-last-update\">\n            <p>{t(\"terms.last_update\", \"Ces conditions générales de vente ont été mises à jour le 15 septembre 2025.\")}</p>\n            <p>{t(\"terms.changes\", \"Nous nous réservons le droit de modifier ces conditions à tout moment. Les utilisateurs seront notifiés des changements importants.\")}</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":12865},"client/src/pages/settings.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Settings, \n  Wifi, \n  WifiOff, \n  Globe, \n  HardDrive, \n  RotateCw, \n  CheckCircle, \n  AlertCircle, \n  Download, \n  Upload,\n  Trash2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\n\n// Offline storage service\nclass OfflineStorageService {\n  private static readonly OFFLINE_KEY = \"adminIA_offline_mode\";\n  private static readonly DOCUMENTS_KEY = \"adminIA_offline_documents\";\n  private static readonly SYNC_QUEUE_KEY = \"adminIA_sync_queue\";\n\n  static isOfflineMode(): boolean {\n    return localStorage.getItem(this.OFFLINE_KEY) === \"true\";\n  }\n\n  static setOfflineMode(enabled: boolean): void {\n    localStorage.setItem(this.OFFLINE_KEY, enabled.toString());\n    window.dispatchEvent(new CustomEvent(\"offlineModeChanged\", { detail: { enabled } }));\n  }\n\n  static getOfflineDocuments() {\n    const docs = localStorage.getItem(this.DOCUMENTS_KEY);\n    return docs ? JSON.parse(docs) : [];\n  }\n\n  static saveOfflineDocument(document: any) {\n    const docs = this.getOfflineDocuments();\n    docs.push({ ...document, id: Date.now().toString(), offline: true, createdAt: new Date() });\n    localStorage.setItem(this.DOCUMENTS_KEY, JSON.stringify(docs));\n  }\n\n  static getSyncQueue() {\n    const queue = localStorage.getItem(this.SYNC_QUEUE_KEY);\n    return queue ? JSON.parse(queue) : [];\n  }\n\n  static addToSyncQueue(item: any) {\n    const queue = this.getSyncQueue();\n    queue.push(item);\n    localStorage.setItem(this.SYNC_QUEUE_KEY, JSON.stringify(queue));\n  }\n\n  static clearSyncQueue() {\n    localStorage.removeItem(this.SYNC_QUEUE_KEY);\n  }\n\n  static getOfflineStorageSize(): number {\n    let total = 0;\n    for (let key in localStorage) {\n      if (key.startsWith(\"adminIA_\")) {\n        total += localStorage[key].length;\n      }\n    }\n    return total;\n  }\n\n  static clearOfflineData() {\n    const keys = Object.keys(localStorage).filter(key => key.startsWith(\"adminIA_\"));\n    keys.forEach(key => localStorage.removeItem(key));\n  }\n}\n\n// Connection status hook\nfunction useConnectionStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  return isOnline;\n}\n\nexport default function SettingsPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const isOnline = useConnectionStatus();\n  const [offlineMode, setOfflineMode] = useState(OfflineStorageService.isOfflineMode());\n  const [syncInProgress, setSyncInProgress] = useState(false);\n  const [storageSize, setStorageSize] = useState(0);\n\n  // Update storage size\n  useEffect(() => {\n    const updateStorageSize = () => {\n      setStorageSize(OfflineStorageService.getOfflineStorageSize());\n    };\n    \n    updateStorageSize();\n    const interval = setInterval(updateStorageSize, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleOfflineModeToggle = (enabled: boolean) => {\n    setOfflineMode(enabled);\n    OfflineStorageService.setOfflineMode(enabled);\n    \n    toast({\n      title: enabled ? \n        t(\"settings.offline_enabled\", \"Offline mode enabled\") : \n        t(\"settings.offline_disabled\", \"Offline mode disabled\"),\n      description: enabled ?\n        t(\"settings.offline_enabled_desc\", \"You can now use AdminIA without internet connection\") :\n        t(\"settings.offline_disabled_desc\", \"AdminIA will require internet connection\"),\n    });\n  };\n\n  const handleSyncData = async () => {\n    if (!isOnline) {\n      toast({\n        title: t(\"settings.sync_offline_error\", \"Cannot sync while offline\"),\n        description: t(\"settings.sync_offline_desc\", \"Please connect to the internet to sync your data\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSyncInProgress(true);\n    try {\n      const syncQueue = OfflineStorageService.getSyncQueue();\n      const offlineDocuments = OfflineStorageService.getOfflineDocuments();\n      \n      // Simulate sync process (in real implementation, you'd sync with the server)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      OfflineStorageService.clearSyncQueue();\n      \n      toast({\n        title: t(\"settings.sync_success\", \"Data synchronized\"),\n        description: t(\"settings.sync_success_desc\", \"All offline changes have been synchronized\"),\n      });\n    } catch (error) {\n      toast({\n        title: t(\"settings.sync_error\", \"Synchronization failed\"),\n        description: t(\"settings.sync_error_desc\", \"Failed to sync offline data. Please try again.\"),\n        variant: \"destructive\",\n      });\n    } finally {\n      setSyncInProgress(false);\n    }\n  };\n\n  const handleClearOfflineData = () => {\n    OfflineStorageService.clearOfflineData();\n    setStorageSize(0);\n    toast({\n      title: t(\"settings.data_cleared\", \"Offline data cleared\"),\n      description: t(\"settings.data_cleared_desc\", \"All offline data has been removed\"),\n    });\n  };\n\n  const formatStorageSize = (bytes: number): string => {\n    if (bytes === 0) return \"0 B\";\n    const k = 1024;\n    const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const offlineDocuments = OfflineStorageService.getOfflineDocuments();\n  const syncQueue = OfflineStorageService.getSyncQueue();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 flex items-center gap-2\">\n            <Settings className=\"w-8 h-8\" />\n            {t(\"nav.settings\", \"Settings\")}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {t(\"settings.subtitle\", \"Manage your AdminIA preferences and offline functionality\")}\n          </p>\n        </div>\n\n        {/* Connection Status */}\n        <Card className=\"mb-6\" data-testid=\"card-connection-status\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {isOnline ? (\n                <>\n                  <Wifi className=\"w-5 h-5 text-green-500\" />\n                  {t(\"settings.connection.online\", \"Online\")}\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"w-5 h-5 text-red-500\" />\n                  {t(\"settings.connection.offline\", \"Offline\")}\n                </>\n              )}\n            </CardTitle>\n            <CardDescription>\n              {isOnline \n                ? t(\"settings.connection.online_desc\", \"Connected to the internet\")\n                : t(\"settings.connection.offline_desc\", \"No internet connection available\")\n              }\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Offline Mode Settings */}\n        <Card className=\"mb-6\" data-testid=\"card-offline-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"w-5 h-5\" />\n              {t(\"settings.offline.title\", \"Offline Mode\")}\n            </CardTitle>\n            <CardDescription>\n              {t(\"settings.offline.description\", \"Use AdminIA without an internet connection\")}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"offline-mode\" className=\"text-base font-medium\">\n                  {t(\"settings.offline.enable\", \"Enable offline mode\")}\n                </Label>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {t(\"settings.offline.enable_desc\", \"Documents and analyses will be stored locally\")}\n                </p>\n              </div>\n              <Switch\n                id=\"offline-mode\"\n                checked={offlineMode}\n                onCheckedChange={handleOfflineModeToggle}\n                data-testid=\"switch-offline-mode\"\n              />\n            </div>\n\n            {offlineMode && (\n              <Alert>\n                <HardDrive className=\"h-4 w-4\" />\n                <AlertDescription>\n                  {t(\"settings.offline.warning\", \"In offline mode, your data is stored locally on this device. Make sure to sync regularly to avoid data loss.\")}\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Offline Data Management */}\n        {offlineMode && (\n          <Card className=\"mb-6\" data-testid=\"card-offline-data\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <HardDrive className=\"w-5 h-5\" />\n                {t(\"settings.offline.data_title\", \"Offline Data\")}\n              </CardTitle>\n              <CardDescription>\n                {t(\"settings.offline.data_desc\", \"Manage your locally stored documents and synchronization\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Storage Usage */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <Label>{t(\"settings.storage.usage\", \"Storage used\")}</Label>\n                  <Badge variant=\"secondary\" data-testid=\"badge-storage-size\">\n                    {formatStorageSize(storageSize)}\n                  </Badge>\n                </div>\n                <Progress value={Math.min((storageSize / (10 * 1024 * 1024)) * 100, 100)} className=\"w-full\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t(\"settings.storage.limit\", \"Up to 10MB of local storage available\")}\n                </p>\n              </div>\n\n              <Separator />\n\n              {/* Offline Documents */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <Label>{t(\"settings.offline.documents\", \"Offline documents\")}</Label>\n                  <Badge variant=\"outline\" data-testid=\"badge-offline-docs-count\">\n                    {offlineDocuments.length}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t(\"settings.offline.documents_desc\", \"Documents stored locally for offline access\")}\n                </p>\n              </div>\n\n              {/* Sync Queue */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <Label>{t(\"settings.sync.queue\", \"Pending sync\")}</Label>\n                  <Badge \n                    variant={syncQueue.length > 0 ? \"destructive\" : \"secondary\"}\n                    data-testid=\"badge-sync-queue-count\"\n                  >\n                    {syncQueue.length}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t(\"settings.sync.queue_desc\", \"Changes waiting to be synchronized\")}\n                </p>\n              </div>\n\n              <Separator />\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={handleSyncData}\n                  disabled={!isOnline || syncInProgress || syncQueue.length === 0}\n                  className=\"flex-1\"\n                  data-testid=\"button-sync-data\"\n                >\n                  {syncInProgress ? (\n                    <>\n                      <RotateCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                      {t(\"settings.sync.syncing\", \"Syncing...\")}\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      {t(\"settings.sync.sync_now\", \"Sync now\")}\n                    </>\n                  )}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={handleClearOfflineData}\n                  disabled={storageSize === 0}\n                  data-testid=\"button-clear-offline-data\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  {t(\"settings.offline.clear_data\", \"Clear offline data\")}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Language Settings */}\n        <Card className=\"mb-6\" data-testid=\"card-language-settings\">\n          <CardHeader>\n            <CardTitle>{t(\"settings.language.title\", \"Language\")}</CardTitle>\n            <CardDescription>\n              {t(\"settings.language.description\", \"Choose your preferred language for AdminIA\")}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <LanguageSelector />\n          </CardContent>\n        </Card>\n\n        {/* Sync Status */}\n        {offlineMode && syncQueue.length > 0 && (\n          <Alert className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {t(\"settings.sync.pending_warning\", \"You have {{count}} pending changes that need to be synchronized when you're back online.\", { count: syncQueue.length })}\n            </AlertDescription>\n          </Alert>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":14464},"client/src/components/OfflineStatusIndicator.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wifi, WifiOff, RotateCw } from \"lucide-react\";\n\n// Offline storage service reference\ndeclare global {\n  interface Window {\n    offlineStorageService: any;\n  }\n}\n\nexport function OfflineStatusIndicator() {\n  const { t } = useTranslation();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isOfflineMode, setIsOfflineMode] = useState(false);\n  const [syncInProgress, setSyncInProgress] = useState(false);\n\n  useEffect(() => {\n    // Check initial offline mode state\n    const offlineMode = localStorage.getItem(\"adminIA_offline_mode\") === \"true\";\n    setIsOfflineMode(offlineMode);\n\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    \n    const handleOfflineModeChange = (event: CustomEvent) => {\n      setIsOfflineMode(event.detail.enabled);\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n    window.addEventListener(\"offlineModeChanged\" as any, handleOfflineModeChange);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      window.removeEventListener(\"offlineModeChanged\" as any, handleOfflineModeChange);\n    };\n  }, []);\n\n  // Don't show indicator if offline mode is not enabled\n  if (!isOfflineMode) {\n    return null;\n  }\n\n  const getStatusVariant = () => {\n    if (syncInProgress) return \"secondary\";\n    if (!isOnline) return \"destructive\";\n    return \"default\";\n  };\n\n  const getStatusText = () => {\n    if (syncInProgress) return t(\"settings.sync.syncing\", \"Syncing...\");\n    if (!isOnline) return t(\"settings.connection.offline\", \"Offline\");\n    return t(\"settings.connection.online\", \"Online\");\n  };\n\n  const getStatusIcon = () => {\n    if (syncInProgress) return <RotateCw className=\"w-3 h-3 animate-spin\" />;\n    if (!isOnline) return <WifiOff className=\"w-3 h-3\" />;\n    return <Wifi className=\"w-3 h-3\" />;\n  };\n\n  return (\n    <Badge \n      variant={getStatusVariant()} \n      className=\"fixed top-4 right-4 z-50 flex items-center gap-2\"\n      data-testid=\"offline-status-indicator\"\n    >\n      {getStatusIcon()}\n      {getStatusText()}\n    </Badge>\n  );\n}","size_bytes":2357}},"version":1}